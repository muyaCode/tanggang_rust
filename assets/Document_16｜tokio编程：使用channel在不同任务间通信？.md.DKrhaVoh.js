import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D2WelYEY.js";const F=JSON.parse('{"title":"16 ｜ tokio 编程：使用 channel 在不同任务间通信？","description":"","frontmatter":{},"headers":[],"relativePath":"Document/16｜tokio编程：使用channel在不同任务间通信？.md","filePath":"Document/16｜tokio编程：使用channel在不同任务间通信？.md","lastUpdated":1740766764000}'),o={name:"Document/16｜tokio编程：使用channel在不同任务间通信？.md"};function e(r,s,c,t,B,y){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_16-tokio-编程-使用-channel-在不同任务间通信" tabindex="-1">16 ｜ tokio 编程：使用 channel 在不同任务间通信？ <a class="header-anchor" href="#_16-tokio-编程-使用-channel-在不同任务间通信" aria-label="Permalink to &quot;16 ｜ tokio 编程：使用 channel 在不同任务间通信？&quot;">​</a></h1><p>你好，我是 Mike。今天我们来了解并发编程的另一种范式——使用 channel 在不同的任务间进行通信。</p><p>channel 翻译成中文就是通道或管道，用来在 task 之间传递消息。这个概念本身并不难。我们回忆一下上节课的目标：要在多个任务中同时对一个内存数据库进行更新。其实我们也可以用 channel 的思路来解决这个问题。</p><p>我们先来分解一下任务。</p><ol><li>创建三个子任务，task_a、task_b 和另一个起代理作用的 task_c。</li><li>在 task_a 和 task_b 中，不直接操作 db 本身，而是向 task_c 发一个消息。</li><li>task_c 里面会拿到 db 的所有权，收到从 task_a 和 task_b 来的消息后，对 db 进行操作。</li></ol><p>基于这个思路，我们来重写上一节课的示例。</p><h2 id="mpsc-channel" tabindex="-1">MPSC Channel <a class="header-anchor" href="#mpsc-channel" aria-label="Permalink to &quot;MPSC Channel&quot;">​</a></h2><p>我们使用 tokio 中的 MPSC Channel 来实现。MPSC Channel 是多生产者，单消费者通道（Multi-Producers Single Consumer）。</p><p>MPSC 的基本用法如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">tx</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> rx</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> mpsc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">channel</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 MPSC 模块的 <code>channel()</code> 函数创建一个通道对，tx 表示发送端，rx 表示接收端，rx 前面要加 mut 修饰符，因为 rx 在接收数据的时候使用了可变借用。channel 使用的时候要给一个整数参数，表示这个通道容量多大。tokio 的这个 <code>mpsc::channel</code> 是带背压功能的，也就是说，如果发送端发得太快，接收端来不及消耗导致通道堵塞了的话，这个 channel 会让发送端阻塞等待，直到通道里面的数据包被消耗到留出空位为止。</p><p>MPSC 的特点就是可以有多个生产者，但只有一个消费者。因此，tx 可以被随意 clone 多份，但是 rx 只能有一个。</p><p>前面的例子，我们用 channel 来实现。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">sync</span><span style="color:#ABB2BF;">::mpsc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> db</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">tx</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> rx</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> mpsc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">channel</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 创建channel</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> tx1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 拷贝两份arc</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> tx2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tx1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {  </span><span style="color:#7F848E;font-style:italic;">// 发送端标准写法</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;receiver dropped&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tx2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {  </span><span style="color:#7F848E;font-style:italic;">// 发送端标准写法</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;receiver dropped&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> rx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">().</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {  </span><span style="color:#7F848E;font-style:italic;">// 接收端标准写法</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;got = {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">            db</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_a</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_b</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_c</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//输出</span></span>
<span class="line"><span style="color:#E06C75;">got</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 50</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">got</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#56B6C2;">^</span><span style="color:#E5C07B;">C</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>代码第 6 行，我们使用 <code>let (tx, mut rx) = mpsc::channel::&lt;u32&gt;(100);</code> 创建一个 channel，注意，这一句使用 <code>::&lt;u32&gt;</code> 指定了这个 channel 中要传输的消息类型，也就是传 u32 类型的整数，通道容量为 100 个消息。</p><p>第 8 行和第 9 行，clone 了两份 tx。因为 tx 本质上实现为一个 Arc 对象，因此 clone 它也就只增加了引用计数，没有多余的性能消耗。</p><p>第 11 行和第 17 行，创建了两个工作者任务，在里面我们用 <code>if let Err(_) = tx1.send(50).await</code> 这种写法来向 channel 中发送信息，因为向 MPSC Channel 中灌数据时，是有可能会出错的，比如 channel 的另一端 rx 已经关闭了（被释放了），那么这时候再用 tx 发数据就会产生一个错误，所以这里需要用 <code>if let Err(_)</code> 这种形式来处理错误。</p><p>第 24 行，创建一个代理任务 task_c，使用这种写法 <code>while let Some(i) = rx.recv().await</code> 来接收消息。这里 <code>rx.recv().await</code> 获取回来的是一个 <code>Option&lt;u32&gt;</code> 类型，因此要用 <code>while let Some(i)</code> 这种模式匹配语法来写，i 就是收到的消息。然后在 while 内部处理具体的业务就行了。当 rx 收到一个 None 值（channel 关闭产生的）的时候，会退出这个循环。</p><p>可以看到，当业务正常进行时，这个程序不会自动终止，而是会一直处于工作状态，最后我们得用 Ctrl-C 在终端终止它的运行。为什么呢？因为 while let 没有退出。 <code>rx.recv().await</code> 一直在等待下一个 msg 的到来，但是前面两个发消息的任务 task_a、task_b 的工作已经完成，退出了，于是没有角色给 rx 发消息了，它就会一直等下去。这里的 <code>.await</code> 是一种不消耗资源的等待，tokio 保证这种等待不会让一个 CPU 忙空转。</p><p>第 31 行～第 33 行的顺序在这里并不是很重要，你可以试试改变 task_a、task_b、task_c 的 await 的顺序，看看输出结果的变化。</p><p>花几分钟理解了这个过程后，你会发现这个方案的思维方式和前面使用锁的方式完全不同。这其实是一种常见的设计模式：代理模式。</p><h3 id="真正的并发执行" tabindex="-1">真正的并发执行 <a class="header-anchor" href="#真正的并发执行" aria-label="Permalink to &quot;真正的并发执行&quot;">​</a></h3><p><code>tokio::task::spawn()</code> 这个 API 有个特点，就是通过它创建的异步任务，一旦创建好，就会立即扔到 tokio runtime 里执行，不需要对其返回的 JoinHandler 进行 await 才驱动执行，这个特性很重要。</p><p>我们使用这个特性分析一下前面的示例：task_a、task_b、task_c 创建好之后，实际就已经开始执行了。task_c 已经在等待 channel 数据的到来了。第 31 到 33 行 JoinHandler 的 await 只是在等待任务本身结束而已。我们试着修改一下上面的示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">time</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">sync</span><span style="color:#ABB2BF;">::mpsc;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::task;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::time;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> db</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">tx</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> rx</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> mpsc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">channel</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> tx1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> tx2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_a 1&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        time</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_secs</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// 等待3s</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_a 2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tx1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;receiver dropped&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tx2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;receiver dropped&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> rx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">().</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;got = {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">            db</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_c</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// task_c 放在前面来await</span></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_a</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_b</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_a</span><span style="color:#D19A66;"> 1</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_b</span></span>
<span class="line"><span style="color:#E06C75;">got</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_a</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#E06C75;">got</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 50</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#56B6C2;">^</span><span style="color:#E5C07B;">C</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>在这个示例里，我们在 task_a 中 sleep 了 3 秒（第 16 行）。同时把 task_c 放到最前面去 await 了（第 39 行）。可以看到，task_b 发来的数据先打印，3 秒后，task_a 发来的数据打印了。</p><p>实际对于 main 函数这个 task 来讲，它其实被阻塞在了第 39 行，因为 task_c 一直在 await，并没有结束。task_a 和 task_b 虽然已经结束了，但是并没有执行到第 40 行和第 41 行去。对整个程序的输出来讲，没有执行到第 40 行和第 41 行并不影响最终效果。你仔细体会一下。</p><p>所以使用 <code>task::spawn()</code> 创建的多个任务之间，本身就是并发执行的关系。你可以对比一下这两个示例。</p><h3 id="unbounded-channel" tabindex="-1">unbounded channel <a class="header-anchor" href="#unbounded-channel" aria-label="Permalink to &quot;unbounded channel&quot;">​</a></h3><p>tokio::mpsc 模块里还有一个函数 <code>mpsc::unbounded_channel()</code>，可以用来创建没有容量上限的通道，也就意味着，它不具有背压功能。这个通道里面能存多少数据，就看机器的内存多大，极端情况下，可能会撑爆你的服务器。而在使用方法上，这两种 channel 区别不大，因此不再举例说明。如果你感兴趣的话可以看一下我给出的 <a href="https://docs.rs/tokio/1.33.0/tokio/sync/mpsc/fn.unbounded_channel.html" target="_blank" rel="noreferrer">链接</a>。</p><h2 id="oneshot-channel" tabindex="-1">Oneshot Channel <a class="header-anchor" href="#oneshot-channel" aria-label="Permalink to &quot;Oneshot Channel&quot;">​</a></h2><p>如果现在我们要在前面示例的基础上增加一个需求：我在 task_c 中将 db 更新完成，想给 task_a 和 task_b 返回一个事件通知说，我已经完成了，应该怎么做？</p><p>这个问题当然不止一种解法，比如外部增加一个消息队列，将这两个消息抛进消息队列里面，让 task_a 和 task_b 监听这个队列。然而这个方案会增加对外部服务的依赖，可能是一个订阅-发布服务；task_a 和 task_b 里需要订阅外部消息队列，并过滤对应的消息进行处理。</p><p>tokio 其实内置了另外一个好用的东西 Oneshot channel，它可以配合 MPSC Channel 完成我们的任务。Oneshot 定义了这样一个模型，这个通道只能用一次，也就是说只能发送一条数据，发送完之后就关闭了，对应的 tx 和 rx 就无法再次使用了。这个很适合等待计算结果返回的场景。我们试着用这个新设施来实现一下我们的需求。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">time</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">sync</span><span style="color:#ABB2BF;">::{mpsc, oneshot};</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::task;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::time;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> db</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">tx</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> rx</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> mpsc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">channel</span><span style="color:#ABB2BF;">::&lt;(</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">oneshot</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Sender</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">&gt;)&gt;(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> tx1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> tx2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        time</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_secs</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">resp_tx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resp_rx</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> oneshot</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">channel</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tx1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">((</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resp_tx</span><span style="color:#ABB2BF;">)).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;receiver dropped&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> resp_rx</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;task_a finished with success.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;task_a finished with failure.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;oneshot sender dropped&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">resp_tx</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resp_rx</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> oneshot</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">channel</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tx2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">((</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resp_tx</span><span style="color:#ABB2BF;">)).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;receiver dropped&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> resp_rx</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> ret</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;task_b finished with success.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">                println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;task_b finished with failure.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;oneshot sender dropped&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">resp_tx</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> rx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">().</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;got = {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">            db</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">db</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">            resp_tx</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_a</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_b</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_c</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E06C75;">got</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">task_b</span><span style="color:#E06C75;"> finished</span><span style="color:#E06C75;"> with</span><span style="color:#E06C75;"> success</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E06C75;">got</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 50</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">9</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E06C75;">task_a</span><span style="color:#E06C75;"> finished</span><span style="color:#E06C75;"> with</span><span style="color:#E06C75;"> success</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#56B6C2;">^</span><span style="color:#E5C07B;">C</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br></div></div><p>解释一下这个例子，这个例子里的第 9 行，把消息类型定义成了 <code>(u32, oneshot::Sender&lt;bool&gt;)</code>。对，你没看错，是一个元组，元组的第二个元素为 oneshot channel 的发送端类型。</p><p>然后第 16 行，在 task_a 中创建了一个 Oneshot channel，两个端为 resp_tx 和 resp_rx。然后在第 17 行，把 resp_tx 实例直接放在消息中，随着 MPSC Channel 一起发送给 task_c 了。然后在 task_a 里用 resp_rx 等待 oneshot 通道的值传过来。这点很关键。task_b 也是类似的处理。</p><p>在 task_c 里，第 51 行收到的消息是 <code>Some((i, resp_tx))</code>，task_c 拿到了 task_a 和 task_b 里创建的 Oneshot channel 的发送端 resp_tx，就可以用它在第 55 行把计算的结果发送回去: <code>resp_tx.send(true).unwrap();</code>。</p><p>这个例子非常精彩，也是一种比较固定的模式。因为通道两个端本身就是类型的实例，当然可以被其他通道传输。这里我们 MPSC + Oneshot 两种通道成功实现了 Request/Response 模式。</p><h2 id="tokio-中的其他-channel-类型" tabindex="-1">tokio 中的其他 channel 类型 <a class="header-anchor" href="#tokio-中的其他-channel-类型" aria-label="Permalink to &quot;tokio 中的其他 channel 类型&quot;">​</a></h2><p>接下来我们再介绍一下 tokio 中的其他 channel 类型。tokio 中还有两个内置通道类型，用得不是那么多，但功能非常强大，你可以在遇到合适的场景时再去具体研究。</p><h3 id="broadcast-channel" tabindex="-1">broadcast channel <a class="header-anchor" href="#broadcast-channel" aria-label="Permalink to &quot;broadcast channel&quot;">​</a></h3><p>广播模式，实现了 MPMC 模型，也就是多生产者多消费者模式，可以用来实现发布-订阅模式。每个消费者都会收到每个生产者发出的同样的消息副本。你可以查看 <a href="https://docs.rs/tokio/1.33.0/tokio/sync/broadcast/index.html" target="_blank" rel="noreferrer">链接</a> 了解学习。</p><p>broadcast 通道实际已覆盖 SPMC 模型，所以不用再单独定义 SPMC 了。</p><h3 id="watch-channel" tabindex="-1">watch channel <a class="header-anchor" href="#watch-channel" aria-label="Permalink to &quot;watch channel&quot;">​</a></h3><p>watch 通道实际是一个特定化版本的 broadcast 通道，它有 2 个特性。</p><ol><li>只有一个生产者，多个消费者。</li><li>只关心最后一个值。</li></ol><p>它适用于一些特定的场景，比如配置更新需要通知工作任务重新加载，平滑关闭任务等等。你可以通过我给出的 <a href="https://docs.rs/tokio/1.33.0/tokio/sync/watch/index.html" target="_blank" rel="noreferrer">链接</a> 进一步学习。</p><h2 id="补充知识-任务管理的-2-种常见模式" tabindex="-1">补充知识：任务管理的 2 种常见模式 <a class="header-anchor" href="#补充知识-任务管理的-2-种常见模式" aria-label="Permalink to &quot;补充知识：任务管理的 2 种常见模式&quot;">​</a></h2><h3 id="等待所有任务一起返回" tabindex="-1">等待所有任务一起返回 <a class="header-anchor" href="#等待所有任务一起返回" aria-label="Permalink to &quot;等待所有任务一起返回&quot;">​</a></h3><p>前面示例中 task_c 很关键。为什么呢？因为它不但起到了搜集数据执行操作的作用，它还把整个程序阻塞住了，保证了程序的持续运行。那如果一个程序里面没有负责这个任务的角色，应该怎么去搜集其他任务返回的结果呢？我们在 <a href="https://time.geekbang.org/column/article/725837" target="_blank" rel="noreferrer">第 13 讲</a> 中已经提到了一种方式。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::task;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> my_background_op</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Starting background task {}.&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    s</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ops</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> tasks</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_capacity</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ops</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> op</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> ops</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 任务创建后，立即开始运行，我们用一个Vec来持有各个任务的handler</span></span>
<span class="line"><span style="color:#E06C75;">        tasks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">my_background_op</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">op</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> outputs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_capacity</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tasks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> task</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> tasks</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 在这里依次等待任务完成</span></span>
<span class="line"><span style="color:#E06C75;">        outputs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">outputs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>上面的代码有两个关键要点。</p><ol><li>在第 15 行用一个 Vec 来存放所有任务的 handler。</li><li>在第 20 行依次对 task 进行 await，获取任务的返回值。</li></ol><p>这代表了一种模式。这个模式有个特点，就是要等待前面任务结束，才能拿到后面任务的返回结果。如果前面某个任务执行的时间比较长，即使后面的任务实际已经执行完了，在最后搜集结果的时候，还是需要等前面那个任务结束了后，我们才能搜集到后面任务的结果。比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">time</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::task;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::time;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        time</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_secs</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 等待3s</span></span>
<span class="line"><span style="color:#D19A66;">        1</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D19A66;">        2</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_c&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D19A66;">        3</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> tasks</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_capacity</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    tasks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task_a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    tasks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task_b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    tasks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task_c</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> outputs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_capacity</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tasks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> task</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> tasks</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;iterate task result..&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 在这里依次等待任务完成</span></span>
<span class="line"><span style="color:#E06C75;">        outputs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">outputs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E06C75;">iterate</span><span style="color:#E06C75;"> task</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">..</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_a</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_b</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_c</span><span style="color:#7F848E;font-style:italic;">   // 在这之后会等待 3 秒，然后继续打印</span></span>
<span class="line"><span style="color:#E06C75;">iterate</span><span style="color:#E06C75;"> task</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">..</span></span>
<span class="line"><span style="color:#E06C75;">iterate</span><span style="color:#E06C75;"> task</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">..</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>上面的示例创建了三个任务 task_a、task_b、task_c，在 task_a 里等待 3 秒返回，task_b 和 task_c 都是立即返回。执行的时候，当打印出 <code>&quot;in task_c&quot;</code> 后，会停止 3 秒左右，然后继续打印剩下的，印证了我们前面的分析。</p><p>tokio 提供了一个宏 <code>tokio::join!()</code>，用来简化上面代码的写法，表示等待所有任务完成后，一起返回一个结果。用法如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">time</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::task;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::time;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        time</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_secs</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 等待3s</span></span>
<span class="line"><span style="color:#D19A66;">        1</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D19A66;">        2</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_c&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D19A66;">        3</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">r1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">r2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">r3</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">join!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task_a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">task_b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">task_c</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}, {}, {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">r1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">r2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">r3</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_a</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_b</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_c</span></span>
<span class="line"><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>这两个示例基本等价，都是在所有任务中等待最长的那个任务执行完成后，统一返回。你可以想想为什么它们差不多。</p><h3 id="等待其中一个任务先返回" tabindex="-1">等待其中一个任务先返回 <a class="header-anchor" href="#等待其中一个任务先返回" aria-label="Permalink to &quot;等待其中一个任务先返回&quot;">​</a></h3><p>在实际场景中，还有另外一大类需求，就是在一批任务中，哪个任务先执行完，就马上返回那个任务的结果。剩下的任务，要么是不关心它们的执行结果，要么是直接取消它们继续执行。</p><p>针对这种场景，tokio 提供了 <code>tokio::select!()</code> 宏。用法如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">time</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::task;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::time;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_a&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        time</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_secs</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">)).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 等待3s</span></span>
<span class="line"><span style="color:#D19A66;">        1</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_b&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D19A66;">        2</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in task_c&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D19A66;">        3</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">select!</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        r</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_a</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">        r</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_b</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">        r</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_c</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第一次</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_b</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_a</span></span>
<span class="line"><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_c</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第二次</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_a</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_c</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_b</span></span>
<span class="line"><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 第n次</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_a</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_c</span></span>
<span class="line"><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> task_b</span></span>
<span class="line"><span style="color:#D19A66;">3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>请注意示例里第 21 行到第 25 行的写法，这是 <code>tokio::select!</code> 宏定义的语法，不是 Rust 标准语法。变量 r 表示任务的返回值。当你多次执行上面代码后，你会发现，输出结果并不固定，你可以想一下为什么会这样。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这节课我们讨论了在 Rust 中如何应用 channel 这种编程范式，在并发编程中避免使用锁。Rust 的 tokio 库提供了常用的通道模型基础设施。</p><ol><li>MPSC 多生产者，单消费者 channel</li><li>Oneshot 一次性 channel</li><li>broadcast 广播模式</li><li>watch 观察者模式</li></ol><p>每种通道都有各自的用途，适用于不同的场景需求。这一讲我们重点讲解了前两种通道，只要你掌握了它们，另外两种使用方式也是差不多的。这节课讨论的这些模式相当固定，只要照搬套用就可以了。</p><p>本讲代码链接： <a href="https://github.com/miketang84/jikeshijian/tree/master/16-channel" target="_blank" rel="noreferrer">https://github.com/miketang84/jikeshijian/tree/master/16-channel</a></p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>你可以说一说从任务中搜集返回结果有几种方式吗？欢迎你把你对课程的思考和疑问留在评论区，我会和你一起交流探讨，如果你觉得这节课的内容对你有帮助的话，也欢迎你分享给其他朋友，我们下节课再见！</p>`,72)]))}const A=n(o,[["render",e]]);export{F as __pageData,A as default};
