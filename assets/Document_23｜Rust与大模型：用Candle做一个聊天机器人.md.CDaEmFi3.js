import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D2WelYEY.js";const o="/tanggang_rust/assets/6bc0b61202yy14dfb11a834d0a649b91.BNbBGDP8.png",e="/tanggang_rust/assets/18d6de5afca0b6ffb61e1bc309877127.D6Afftqu.png",r="/tanggang_rust/assets/6e420065087c82b10813d2694a67c6c1.DfWHRzKl.png",b=JSON.parse('{"title":"23 ｜ Rust 与大模型：用 Candle 做一个聊天机器人","description":"","frontmatter":{},"headers":[],"relativePath":"Document/23｜Rust与大模型：用Candle做一个聊天机器人.md","filePath":"Document/23｜Rust与大模型：用Candle做一个聊天机器人.md","lastUpdated":1740766764000}'),t={name:"Document/23｜Rust与大模型：用Candle做一个聊天机器人.md"};function c(B,s,y,i,F,A){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="_23-rust-与大模型-用-candle-做一个聊天机器人" tabindex="-1">23 ｜ Rust 与大模型：用 Candle 做一个聊天机器人 <a class="header-anchor" href="#_23-rust-与大模型-用-candle-做一个聊天机器人" aria-label="Permalink to &quot;23 ｜ Rust 与大模型：用 Candle 做一个聊天机器人&quot;">​</a></h1><p>你好，我是 Mike。今天我们来聊一聊如何用 Rust 做一个基于大语言模型的聊天机器人。</p><p>大语言模型（LLM）是 2023 年最火的领域，没有之一。这波热潮是由 OpenAI 的 ChatGPT 在今年上半年发布后引起的，之后全世界的研究机构和科技公司都卷入了大模型的竞争中。目前业界应用大模型训练及推理的主要语言是 Python 和 C/C++。Python 一般用来实现上层框架，而 C/C++一般起底层高性能执行的作用，比如著名的框架 PyTorch，它的上层业务层面是用 Python 写的，下层执行层面由 C 执行，因为 GPU 加速的部分只能由 C/C++来调用。</p><p>看起来大语言模型好像和 Rust 没什么关系，必须承认，由于历史积累的原因，在 AI 这一块儿 Rust 的影响力还非常小。但从另一方面来讲呢，Rust 是目前业界除 Python、C++ 外，唯一有潜力在未来 20 年的 AI 发展中发挥重要作用的语言了。为什么这么说呢？</p><p>首先 Rust 的性能与 C/C++一致，并且在调用 GPU 能力方面也同样方便；其次，Rust 强大的表达能力，不输于 Python，这让人们使用 Rust 做业务并不难；然后，Rust 的 cargo 编译成单文件的能力，以及对 WebAssembly 完善的支持，部署应用的时候非常方便，这比 Py + C/C++组合需要安装的一堆依赖和数 G 的库方便太多。</p><p>目前 Rust 生态中其实已经有很多 AI 相关的基础设施了，你可以从我给出的 <a href="https://www.arewelearningyet.com/" target="_blank" rel="noreferrer">链接</a> 里找到。</p><p>世界上最大的机器学习模型仓库平台 HuggingFace（机器学习领域的 Github） 推出了 Rust 机器学习框架 <a href="https://github.com/huggingface/candle" target="_blank" rel="noreferrer">Candle</a>。在这个官方代码仓库上，HuggingFace 上解释了为什么要做一个 Rust 的机器学习框架。</p><ol><li>Candle 上云端的 Serverless 推理可行。PyTorch 那一套体积太大，安装完得几个 G，而 Candle 编译后的可执行文件才十几 M 到几十 M。</li><li>Candle 可以让你避免 Python 的 <a href="https://www.backblaze.com/blog/the-python-gil-past-present-and-future/" target="_blank" rel="noreferrer">GIL</a>，从而提高性能。</li><li>HuggingFace 已经用 Rust 写了不少基础工具了，比如 <a href="https://github.com/huggingface/safetensors" target="_blank" rel="noreferrer">safetensors</a> 和 <a href="https://github.com/huggingface/tokenizers" target="_blank" rel="noreferrer">tokenizers</a>。</li></ol><p>Elon Musk 的 <a href="https://x.ai/" target="_blank" rel="noreferrer">x.ai</a> 发布后，页面上也有一段对 Rust 的溢美之词：Rust 被证明是一个理想的选择，用于构建可扩展的、可靠的、可维护性的基础设施。它提供了高性能、丰富的生态系统，它能阻止大部分错误，这些错误在分布式系统中经常会碰到。由于我们的团队规模很小，基础设施的可靠性就显得至关重要，否则维护工作会浪费大量创新的时间。Rust 给我们提供了信心，任何的代码修改或重构都可以产出可工作的程序，并且在最小监管下可以持续运行好几个月（而不会出问题）。</p><p>Musk 甚至说 Rust 语言是未来 <a href="https://zhuanlan.zhihu.com/p/648565007" target="_blank" rel="noreferrer">构建 AGI</a> 的语言。</p><p>在使用 Rust 尝试做聊天机器人之前，我们先来了解一下相关的背景知识。</p><h2 id="大语言模型背景知识" tabindex="-1">大语言模型背景知识 <a class="header-anchor" href="#大语言模型背景知识" aria-label="Permalink to &quot;大语言模型背景知识&quot;">​</a></h2><p>这节课我们还是主要讲 Rust 及 Rust 的应用，所以相关的背景知识我们就简单概括一下。</p><p>机器学习（Machine Learning，ML）泛指用计算机对数据集按照一定的算法进行数据处理、分析、聚类、回归等。在执行前，人往往不知道结果是什么，所以叫机器学习。机器学习可以用于自动提取信息，自动或辅助人类做决策。</p><p>而神经网络（Neural Network）是机器学习的一类算法，它是模拟人的大脑神经元和连接的一种算法。目前整个业界投入资源最多的就是在这类算法上面，在这个类别中的创新也是最多的，有种观点认为神经网络算法是通向真正的 AI 最可能正确的路径。</p><p><img src="'+o+`" alt="1.00"></p><p>而深度学习（Deep Learning），其实就是层次很多很深的神经网络。你可以想象，层次越深，节点数（图里那些圈）越多，就越能模拟大脑。但是深度学习带来的问题就是，层次越深，节点数越多，则那些线（就是权重值）就会越多，呈指数级增长，那么计算量就会越来越大。其实之前十几、二十年 AI 进展不大，主要就是因为这个计算能力限制了。</p><p>通过无数人的探索，我们发现可以把深度学习的计算并行化，优化了很多工程上的算法。这样就能够在大家熟悉的主要用来玩游戏的 GPU 显卡上运行，大大提高了计算速度。这个视角，二十多年前 Nvidia 的老黄就看明白了，早早地提供好了基础设施，CUDA、CUDNN 等。所以现在你就看到了，一卡难求，已经严重影响到了游戏玩家的生存。</p><h3 id="chatgpt-与-llama" tabindex="-1">ChatGPT 与 LLaMA <a class="header-anchor" href="#chatgpt-与-llama" aria-label="Permalink to &quot;ChatGPT 与 LLaMA&quot;">​</a></h3><p>那么 ChatGPT 是什么呢？英文是 Chat Generative Pre-trained Transformer，是 OpenAI 提供的在线 AI 对话服务，具有令人惊叹的理解能力和回答能力。你可以把 ChatGPT 理解成一个为对话调优的预训练转换模型。GPT 3 有 1750 亿参数，有传言 GPT 4 有 1.76 万亿参数。参数是什么，就是图中节点之间的连线，你可以想象一下 1750 亿根线的场景。</p><p>OpenAI 搞出了 ChatGPT，让全世界惊掉了下巴，但是它是闭源的。于是 Meta 公司（前 Facebook）的 Yann LeCun（图灵奖得主）团队，搞了一个开源版本的 GPT，叫 LLaMA。它也是在巨量的源数据集上进行的训练，生成了 70 亿（7B），130 亿（13B），650 亿（65B）三个版本参数的大模型文件，可以供业界做学习和研究使用。现在已推出 LLaMA 2，正在做 LLaMA 3。</p><p>LLaMA 搞出来后，掀起了 LLM 界的狂欢。全世界的团队在 LLaMA 的基础上，继续调优，推出了各种各样的大模型。比如国内清华的 ChatGLM, 零一万物的 Yi。国外的 Mistral、OpenChat、Starling 等。这块儿非常卷，大家都在争相推出自己调优后的版本，每天早上睡醒起来，都发现又推出了几个新的 LLM。</p><p>这些训练好后的文件一般从几个 G 到几十 G 不等，也有几百 G 的。要运行它们，得有非常强大的机器才行。比如 7B 的 LLaMA 2 文件，每个权重为一个 f16 浮点数，占两个字节，所以可以估算出要运行 LLaMA 2 模型，起码得有 14G 的内存或显存。内存还好，显存超过 14G 的个人用户真不多。并且，LLaMA2 的模型文件是 PyTorch 导出的，只能由 PyTorch 框架来运行。</p><h3 id="llama-cpp-与量子化方法" tabindex="-1">llama.cpp 与量子化方法 <a class="header-anchor" href="#llama-cpp-与量子化方法" aria-label="Permalink to &quot;llama.cpp 与量子化方法&quot;">​</a></h3><p>车到山前必有路，大神 Georgi Gerganov 搞了一个项目： <a href="https://github.com/ggerganov/llama.cpp" target="_blank" rel="noreferrer">llama.cpp</a>。它是一个用 C/C++重新实现引擎的版本，不需要安装 PyTorch，就可以运行 LLaMA 2 模型文件。最关键的是，它提出了一种量子化（quantization）方法，可以将权重从 16 位量子化到 8 位、6 位、5 位、4 位，甚至 2 位。这样，就相当于等比缩小了占用内存的规模。比如，一个 4 位量子化版本的 LLaMA 2 7B 模型，就只需要不到 4G 的内存/显存就能运行。这样，就能适配大多数的个人计算机了。</p><p>这种量子化方法是个重大创新，它直接促进了 LLM 生态的进一步繁荣。现在 HuggingFace 上有大量量子化后的模型，比如 <a href="https://huggingface.co/TheBloke/openchat_3.5-GGUF/blob/main/openchat_3.5.Q4_K_M.gguf" target="_blank" rel="noreferrer">openchat_3.5.Q4_K_M.gguf</a> 就是一个 OpenChat 的 4 位量子化的版本。我们下载的时候，直接下载这些量子化后的模型文件就可以了。</p><p>请注意，这些文件是训练后的成品，我们下载它是用来做推理（infer）的，而不是训练（train）的。当然，我们可以在这些成品模型上运行调优（fine tune）。</p><h3 id="大模型文件格式" tabindex="-1">大模型文件格式 <a class="header-anchor" href="#大模型文件格式" aria-label="Permalink to &quot;大模型文件格式&quot;">​</a></h3><p>目前 HuggingFace 上有几种常见的 LLM 文件格式。</p><ul><li>bin 格式：Pytorch 导出的模型文件格式</li><li>safetensors 格式：HuggingFace 定义的一种新的模型文件格式，有可能成为未来的主流格式。HuggingFace 用 Rust 实现 safetensors 格式的解析，并导出为 Py 接口，请参见 <a href="https://huggingface.co/docs/safetensors/index" target="_blank" rel="noreferrer">链接</a>。</li><li>ggml 格式：llama.cpp 项目量子化模型的前期模型格式。</li><li>gguf 格式：llama.cpp 项目量子化模型的后期模型格式，也是现在主流的量子化 LLM 格式。</li></ul><h3 id="rust-的机器学习框架" tabindex="-1">Rust 的机器学习框架 <a class="header-anchor" href="#rust-的机器学习框架" aria-label="Permalink to &quot;Rust 的机器学习框架&quot;">​</a></h3><p>Rust 生态现在有几个比较不错的 ML 框架，最好的两个是： <a href="https://github.com/huggingface/candle" target="_blank" rel="noreferrer">Candle</a> 和 <a href="https://github.com/Tracel-AI/burn" target="_blank" rel="noreferrer">burn</a>。后续，我们以 Candle 为例来介绍。</p><h2 id="candle-介绍" tabindex="-1">Candle 介绍 <a class="header-anchor" href="#candle-介绍" aria-label="Permalink to &quot;Candle 介绍&quot;">​</a></h2><p>据 Candle 官网介绍，它是一个极小主义机器学习框架，也就是没什么依赖，不像 Pytorch 那样装一堆东西，部署起来很麻烦。但其实它也能用来训练。</p><p>它有下面这些特性：</p><ul><li>HuggingFace 出品。近水楼台先得月，Candle 几乎能支持 HuggingFace 上所有的模型（有的需要经过转换）。</li><li>语法简单，跟 PyTorch 差不多。</li><li>CPU、Cuda、Metal 的支持。</li><li>让 serverless 和快速部署成为可能。</li><li>模型训练。</li><li>分布式计算（通过 NCCL）。</li><li>开箱即用的模型支持，LLaMA、Whisper、 Falcon 等等。</li></ul><p>Candle 不仅仅是大模型深度学习框架，它还是一个机器学习框架，因此它也支持其他的机器学习算法和强化学习（reinforcement learning）。下面我们就来看看如何利用 Candle 框架做一个聊天机器人。</p><p>注：这节课的代码适用于 candle_core v0.3 版本。</p><h2 id="使用-candle-做一个聊天机器人" tabindex="-1">使用 Candle 做一个聊天机器人 <a class="header-anchor" href="#使用-candle-做一个聊天机器人" aria-label="Permalink to &quot;使用 Candle 做一个聊天机器人&quot;">​</a></h2><h3 id="下载模型文件" tabindex="-1">下载模型文件 <a class="header-anchor" href="#下载模型文件" aria-label="Permalink to &quot;下载模型文件&quot;">​</a></h3><p>我对一些大模型进行了测试，发现 OpenChat 的对话效果比较好，所以下面我们用 OpenChat LLM 来进行展示。我们会用 <a href="https://huggingface.co/TheBloke/openchat_3.5-GGUF/blob/main/openchat_3.5.Q8_0.gguf" target="_blank" rel="noreferrer">quantized 8bit</a> 的版本。其实 4bit 的版本也是可以的，效果也非常好。</p><p>Candle 官方的示例比较复杂，我为这个课程定制了一个更简单的独立运行的 <a href="https://github.com/miketang84/jikeshijian/tree/master/23-candle_chat" target="_blank" rel="noreferrer">示例</a>。你可以将这个仓库克隆下来，进入目录。在运行代码之前，下载模型文件和 tokenizer.json 文件。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">与代码目录同级的位置，创建一个目录</span></span>
<span class="line"><span style="color:#E06C75;">mkdir</span><span style="color:#E06C75;"> hf_hub</span></span>
<span class="line"><span style="color:#ABB2BF;">进入这个目录，请下载</span></span>
<span class="line"><span style="color:#E06C75;">https</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//huggingface.co/TheBloke/openchat_3.5-GGUF/blob/main/openchat_3.5.Q8_0.gguf</span></span>
<span class="line"><span style="color:#ABB2BF;">和</span></span>
<span class="line"><span style="color:#E06C75;">https</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//huggingface.co/openchat/openchat_3.5/blob/main/tokenizer.json</span></span>
<span class="line"><span style="color:#ABB2BF;">将这个 </span><span style="color:#E06C75;">tokenizer</span><span style="color:#ABB2BF;">.json 重命名为 </span><span style="color:#E06C75;">openchat_3</span><span style="color:#ABB2BF;">.5_tokenizer.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>目录结构：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">23</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">candle_chat</span><span style="color:#ABB2BF;">/</span></span>
<span class="line"><span style="color:#E5C07B;">    Cargo</span><span style="color:#ABB2BF;">.toml</span></span>
<span class="line"><span style="color:#E06C75;">    src</span><span style="color:#ABB2BF;">/</span></span>
<span class="line"><span style="color:#E06C75;">hf_hub</span><span style="color:#ABB2BF;">/</span></span>
<span class="line"><span style="color:#E06C75;">    openchat_3</span><span style="color:#ABB2BF;">.5_tokenizer.json</span></span>
<span class="line"><span style="color:#E06C75;">    openchat_3</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">5.</span><span style="color:#E5C07B;">Q8_0</span><span style="color:#ABB2BF;">.gguf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="运行演示" tabindex="-1">运行演示 <a class="header-anchor" href="#运行演示" aria-label="Permalink to &quot;运行演示&quot;">​</a></h3><p>然后，进入 23-candle_chat/ 运行：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">cargo</span><span style="color:#E06C75;"> run</span><span style="color:#ABB2BF;"> --</span><span style="color:#E06C75;">release</span><span style="color:#ABB2BF;"> --</span><span style="color:#E06C75;">bin</span><span style="color:#E06C75;"> simple</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>出现如下界面，就可以聊天了。</p><p><img src="`+e+'" alt="1.00"></p><p>下面是我问的一个问题，bot 的回答好像有点问题，这个模型用英文问的效果会好一些。</p><p><img src="'+r+`" alt="1.00"></p><h3 id="代码讲解" tabindex="-1">代码讲解 <a class="header-anchor" href="#代码讲解" aria-label="Permalink to &quot;代码讲解&quot;">​</a></h3><p>你可以看一下代码。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#![allow(unused)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Write</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">PathBuf</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokenizers</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Tokenizer</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> candle_core</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">quantized</span><span style="color:#ABB2BF;">::gguf_file;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> candle_core</span><span style="color:#ABB2BF;">::utils;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> candle_core</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Device</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Tensor</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> candle_transformers</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">generation</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">LogitsProcessor</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> candle_transformers</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">models</span><span style="color:#ABB2BF;">::quantized_llama </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> quantized_model;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> anyhow</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">mod</span><span style="color:#ABB2BF;"> token_output_stream;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> token_output_stream</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">TokenOutputStream</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Args</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    tokenizer</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    model</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    sample_len</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    temperature</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    seed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    repeat_penalty</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    repeat_last_n</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    gqa</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Args</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> tokenizer</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Tokenizer</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> tokenizer_path</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> PathBuf</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.tokenizer);</span></span>
<span class="line"><span style="color:#E5C07B;">        Tokenizer</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_file</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tokenizer_path</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">anyhow</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> model</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">PathBuf</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">        Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">PathBuf</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.model))</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">anyhow</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;()&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">        &quot;avx: {}, neon: {}, simd128: {}, f16c: {}&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">        utils</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_avx</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">        utils</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_neon</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">        utils</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_simd128</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">        utils</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_f16c</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> args</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Args</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        tokenizer</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../hf_hub/openchat_3.5_tokenizer.json&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">        model</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;../hf_hub/openchat_3.5.Q8_0.gguf&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">        sample_len</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        temperature</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0.8</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        seed</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">299792458</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        repeat_penalty</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        repeat_last_n</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        gqa</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // load model</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> model_path</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">model</span><span style="color:#ABB2BF;">()?;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">model_path</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> start</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">time</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Instant</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // This is the model instance</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> model</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> gguf_file</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Content</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> file</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> total_size_in_bytes</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tensor</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> model</span><span style="color:#ABB2BF;">.tensor_infos.</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> elem_count</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tensor</span><span style="color:#ABB2BF;">.shape.</span><span style="color:#61AFEF;">elem_count</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        total_size_in_bytes</span><span style="color:#56B6C2;"> +=</span></span>
<span class="line"><span style="color:#E06C75;">            elem_count</span><span style="color:#ABB2BF;"> * </span><span style="color:#E06C75;">tensor</span><span style="color:#ABB2BF;">.ggml_dtype.</span><span style="color:#61AFEF;">type_size</span><span style="color:#ABB2BF;">() / </span><span style="color:#E06C75;">tensor</span><span style="color:#ABB2BF;">.ggml_dtype.</span><span style="color:#61AFEF;">blck_size</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">        &quot;loaded {:?} tensors ({}bytes) in {:.2}s&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        model</span><span style="color:#ABB2BF;">.tensor_infos.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">        total_size_in_bytes</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        start</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">elapsed</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">as_secs_f32</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> model</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> quantized_model</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">ModelWeights</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_gguf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">model</span><span style="color:#ABB2BF;">, &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> file</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;model built&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // load tokenizer</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> tokenizer</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tokenizer</span><span style="color:#ABB2BF;">()?;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> tos</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> TokenOutputStream</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tokenizer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // left for future improvement: interactive</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> prompt_index</span><span style="color:#C678DD;"> in</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">.. {</span></span>
<span class="line"><span style="color:#61AFEF;">        print!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&gt; &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">stdout</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">flush</span><span style="color:#ABB2BF;">()?;</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> prompt</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">stdin</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">read_line</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> prompt</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> prompt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ends_with</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\n</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            prompt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> prompt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ends_with</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\r</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                prompt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> prompt_str</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;User: {prompt} &lt;|end_of_turn|&gt; Assistant: &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">        print!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;bot: &quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> tokens</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tos</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">tokenizer</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prompt_str</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">anyhow</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> prompt_tokens</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_ids</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> all_tokens</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> logits_processor</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> LogitsProcessor</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">.seed, </span><span style="color:#E5C07B;">Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">.temperature), </span><span style="color:#E5C07B;">None</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> start_prompt_processing</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">time</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Instant</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> next_token</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Tensor</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">prompt_tokens</span><span style="color:#ABB2BF;">, &amp;</span><span style="color:#E5C07B;">Device</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Cpu</span><span style="color:#ABB2BF;">)?.</span><span style="color:#61AFEF;">unsqueeze</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> logits</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> model</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forward</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> logits</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> logits</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">squeeze</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#E06C75;">            logits_processor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sample</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">logits</span><span style="color:#ABB2BF;">)?</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> prompt_dt</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> start_prompt_processing</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">elapsed</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        all_tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">next_token</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next_token</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">next_token</span><span style="color:#ABB2BF;">)? {</span></span>
<span class="line"><span style="color:#61AFEF;">            print!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{t}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">            std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">stdout</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">flush</span><span style="color:#ABB2BF;">()?;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> eos_token</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;&lt;|end_of_turn|&gt;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> eos_token</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> *</span><span style="color:#E06C75;">tos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tokenizer</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">get_vocab</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">eos_token</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> start_post_prompt</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">time</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Instant</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">now</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> to_sample</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">.sample_len.</span><span style="color:#61AFEF;">saturating_sub</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> sampled</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> index</span><span style="color:#C678DD;"> in</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">..</span><span style="color:#E06C75;">to_sample</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> input</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Tensor</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(&amp;[</span><span style="color:#E06C75;">next_token</span><span style="color:#ABB2BF;">], &amp;</span><span style="color:#E5C07B;">Device</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Cpu</span><span style="color:#ABB2BF;">)?.</span><span style="color:#61AFEF;">unsqueeze</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> logits</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> model</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forward</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">prompt_tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">() + </span><span style="color:#E06C75;">index</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> logits</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> logits</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">squeeze</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> logits</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> args</span><span style="color:#ABB2BF;">.repeat_penalty </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">. {</span></span>
<span class="line"><span style="color:#E06C75;">                logits</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                let</span><span style="color:#E06C75;"> start_at</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> all_tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">saturating_sub</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">args</span><span style="color:#ABB2BF;">.repeat_last_n);</span></span>
<span class="line"><span style="color:#E5C07B;">                candle_transformers</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">utils</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">apply_repeat_penalty</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">                    &amp;</span><span style="color:#E06C75;">logits</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                    args</span><span style="color:#ABB2BF;">.repeat_penalty,</span></span>
<span class="line"><span style="color:#ABB2BF;">                    &amp;</span><span style="color:#E06C75;">all_tokens</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">start_at</span><span style="color:#ABB2BF;">..],</span></span>
<span class="line"><span style="color:#ABB2BF;">                )?</span></span>
<span class="line"><span style="color:#ABB2BF;">            };</span></span>
<span class="line"><span style="color:#E06C75;">            next_token</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> logits_processor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sample</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">logits</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#E06C75;">            all_tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">next_token</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">t</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next_token</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">next_token</span><span style="color:#ABB2BF;">)? {</span></span>
<span class="line"><span style="color:#61AFEF;">                print!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{t}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">                std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">stdout</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">flush</span><span style="color:#ABB2BF;">()?;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E06C75;">            sampled</span><span style="color:#56B6C2;"> +=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> next_token</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> eos_token</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                break</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            };</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> tos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">decode_rest</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">candle_core</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">msg</span><span style="color:#ABB2BF;">)? {</span></span>
<span class="line"><span style="color:#61AFEF;">            print!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{rest}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">stdout</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">flush</span><span style="color:#ABB2BF;">()?;</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> dt</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> start_post_prompt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">elapsed</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">            &quot;</span><span style="color:#56B6C2;">\\n\\n</span><span style="color:#98C379;">{:4} prompt tokens processed: {:.2} token/s&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            prompt_tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">            prompt_tokens</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> f64</span><span style="color:#ABB2BF;"> / </span><span style="color:#E06C75;">prompt_dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_secs_f64</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">        );</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">            &quot;{sampled:4} tokens generated: {:.2} token/s&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            sampled</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> f64</span><span style="color:#ABB2BF;"> / </span><span style="color:#E06C75;">dt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_secs_f64</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">        );</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br></div></div><p>我们分段讲解这 100 多行代码。</p><p>第 19 行，定义了 Args 参数，这是模型必要的参数配置定义。第 42 ～ 48 行，看看有哪些 CPU 特性支持。第 50 ～ 59 行，实例化 Args，这些参数都是硬编码进去的，除了两个文件的路径外，需要 LLM 相关知识才能理解。</p><p>第 62 ～ 81 行，加载大模型文件，并生成模型对象。我们这个模型是 GGUF 格式的，因此需要用 gguf_file 模块来读。Tensor 是 LLM 中的重要概念，它是一个多维数组，可以在 CPU 和 GPU 上计算，在 GPU 上还可以并行计算。一个大模型由很多的 Tensor 组成。我们这个模型中，加载进来了 291 个 Tensor。</p><p>第 84 行，加载 tokenizer.json 文件，并生成 tokenizer 实例。tokenizer 用于将输入和输出的文本转化为 Tensor，变成大模型可理解的数据。第 85 行创建 token 输出流实例。第 89 ～ 99 行，建立问答界面，输入提示符为一个 &gt; 号，输出为 <code>bot:</code> 开头。第 101 ～ 104 行将输入的问答转化为 tokens。这个 tokens 就是 Tensor 实例。</p><p>第 106 ～ 122 行，是用于处理输入，大模型对输入的 token 做一处理，你可以理解成大模型对你的输入问题先要进行一下理解，然后后面才能做出对应的回答。</p><p>LogitsProcessor 是一个用于修改模型输出概率分布的工具。我们可以看到，这个过程中使用的设备写死了，用的 CPU。</p><p>第 124 行， <code>&quot;&lt;|end_of_turn|&gt;&quot;</code> 是 OpenChat 模式定义的一轮对话结束的标志。第 125 ～ 156 行，就是对问题的回答。用的设备仍然为 CPU，我们可以猜测应该会很慢。它这里面还有对 penalty 机制的处理。细节也需要去查阅大模型 NLP 相关的知识。</p><p>第 158 ～ 167 行，是对本次处理性能的一个汇总。在我的电脑上，纯用 CPU 计算的话，只能达到 1 秒一个多 token 的速度，非常卡。有 GPU 加持的话，会快很多。</p><p>你可能发现了，第 87 行有个循环，它是用来实现 interactive 交互效果的，问完一句，回答完，还可以问下一句。</p><h3 id="添加命令行参数" tabindex="-1">添加命令行参数 <a class="header-anchor" href="#添加命令行参数" aria-label="Permalink to &quot;添加命令行参数&quot;">​</a></h3><p>前面的 simple 示例，我们所有的参数都是写死在代码里面的。这样方便理解，但不方便使用。我们可以尝试为它添加命令行参数功能。</p><p>在 Rust 中，写一个命令行非常简单，直接用 clap，改几行代码就可以了。将上面示例中的 Args 结构体的定义变成下面这样就可以了，然后在调用的时候使用 <code>Args::parse()</code> 生成 Args 实例。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Parser</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#ABB2BF;">#[command(author, version, about, long_about </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> None</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Args</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[arg(long, default_value </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;../hf_hub/openchat_3.5_tokenizer.json&quot;</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#E06C75;">    tokenizer</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[arg(long, default_value </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;../hf_hub/openchat_3.5.Q8_0.gguf&quot;</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#E06C75;">    model</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[arg(short </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &#39;n&#39;</span><span style="color:#ABB2BF;">, long, default_value_t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> 1000)]</span></span>
<span class="line"><span style="color:#E06C75;">    sample_len</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[arg(long, default_value_t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> 0.8)]</span></span>
<span class="line"><span style="color:#E06C75;">    temperature</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[arg(long, default_value_t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> 299792458)]</span></span>
<span class="line"><span style="color:#E06C75;">    seed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[arg(long, default_value_t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> 1.1)]</span></span>
<span class="line"><span style="color:#E06C75;">    repeat_penalty</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[arg(long, default_value_t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> 64)]</span></span>
<span class="line"><span style="color:#E06C75;">    repeat_last_n</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[arg(long, default_value_t </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> 8)]</span></span>
<span class="line"><span style="color:#E06C75;">    gqa</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> args</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Args</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>经过升级的命令有了下面这些参数：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#E06C75;">cargo</span><span style="color:#E06C75;"> run</span><span style="color:#ABB2BF;"> --</span><span style="color:#E06C75;">release</span><span style="color:#ABB2BF;"> --</span><span style="color:#E06C75;">bin</span><span style="color:#E06C75;"> cli</span><span style="color:#ABB2BF;"> -- --</span><span style="color:#E06C75;">help</span></span>
<span class="line"><span style="color:#E5C07B;">    Finished</span><span style="color:#E06C75;"> release</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">optimized</span><span style="color:#ABB2BF;">] </span><span style="color:#61AFEF;">target</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#D19A66;"> 0.</span><span style="color:#ABB2BF;">04s</span></span>
<span class="line"><span style="color:#E5C07B;">     Running</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">release</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">cli</span><span style="color:#ABB2BF;"> --</span><span style="color:#E06C75;">help</span><span style="color:#ABB2BF;">\`</span></span>
<span class="line"><span style="color:#E06C75;">avx</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">neon</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">simd128</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">f16c</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#E5C07B;">Usage</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">cli</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">OPTIONS</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#E5C07B;">Options</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      --</span><span style="color:#E06C75;">tokenizer</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#D19A66;">TOKENIZER</span><span style="color:#ABB2BF;">&gt;            [</span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: ../</span><span style="color:#E06C75;">hf_hub</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">openchat_3</span><span style="color:#ABB2BF;">.5_tokenizer.json]</span></span>
<span class="line"><span style="color:#ABB2BF;">      --</span><span style="color:#E06C75;">model</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#D19A66;">MODEL</span><span style="color:#ABB2BF;">&gt;                    [</span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: ../</span><span style="color:#E06C75;">hf_hub</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">openchat_3</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">5.</span><span style="color:#E5C07B;">Q8_0</span><span style="color:#ABB2BF;">.gguf]</span></span>
<span class="line"><span style="color:#ABB2BF;">  -</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">, --</span><span style="color:#E06C75;">sample</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">len</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#D19A66;">SAMPLE_LEN</span><span style="color:#ABB2BF;">&gt;          [</span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      --</span><span style="color:#E06C75;">temperature</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#D19A66;">TEMPERATURE</span><span style="color:#ABB2BF;">&gt;        [</span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0.8</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      --</span><span style="color:#E06C75;">seed</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#D19A66;">SEED</span><span style="color:#ABB2BF;">&gt;                      [</span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">299792458</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      --</span><span style="color:#E06C75;">repeat</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">penalty</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#D19A66;">REPEAT_PENALTY</span><span style="color:#ABB2BF;">&gt;  [</span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      --</span><span style="color:#E06C75;">repeat</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">last</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#D19A66;">REPEAT_LAST_N</span><span style="color:#ABB2BF;">&gt;    [</span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">64</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">      --</span><span style="color:#E06C75;">gqa</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#D19A66;">GQA</span><span style="color:#ABB2BF;">&gt;                        [</span><span style="color:#E06C75;">default</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">  -</span><span style="color:#E06C75;">h</span><span style="color:#ABB2BF;">, --</span><span style="color:#E06C75;">help</span><span style="color:#E5C07B;">                             Print</span><span style="color:#E06C75;"> help</span></span>
<span class="line"><span style="color:#ABB2BF;">  -</span><span style="color:#E5C07B;">V</span><span style="color:#ABB2BF;">, --</span><span style="color:#E06C75;">version</span><span style="color:#E5C07B;">                          Print</span><span style="color:#E06C75;"> version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>是不是很方便？谁说 Rust 生产力不行的！</p><p>点击 <a href="https://github.com/miketang84/jikeshijian/tree/master/23-candle_chat" target="_blank" rel="noreferrer">这里</a> 可以找到源文件，你可以本地试试跑起一个大模型对话机器人。另外，Candle 官方仓库中的 <a href="https://github.com/huggingface/candle/tree/main/candle-examples/examples/quantized" target="_blank" rel="noreferrer">示例</a> 功能更强大，但也更复杂，你可以继续深入研究。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这节课我们一起探索了使用 Rust 利用 Candle 机器学习框架开发一个大模型聊天机器人的应用。Rust 目前在 AI 界虽然还不够有影响力，但是未来是相当有潜力的，这也是为什么 HuggingFace 带头出一个 Rust 机器学习框架的原因。</p><p>不过这节课我们只是讲了怎么用起来，而如果要深入下去的话，机器学习、深度学习的基础知识就必不可少了。如果你有时间精力的话，你可以深入下去好好补充一下这方面的学术知识，毕竟未来几十年，AI 是一个主要问题，也会是一个主要机会。目前 AI 发展速度太快了，有种学习跟不上业界发展速度的感觉。但是不管怎样，学好基础，永远不会过时。</p><p>另外，Rust AI 这块儿，虽然已经小有起色，但是作为生态来讲，空白处还很多。所以这也正是学好 Rust 的机会，Rust 可以在 AI 基建这块做大量的工作，这些工作可以服务于 Rust 社区，也可以服务于 Python 乃至整个 AI 社区。</p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>你可以在我的示例上继续捣鼓，添加 GPU 的支持，在 Linux、Windows、macOS 多种平台上测试一下。欢迎你在评论区贴出你自己的代码，也欢迎你把这节课分享给其他朋友，我们下节课再见！</p>`,78)]))}const C=n(t,[["render",c]]);export{b as __pageData,C as default};
