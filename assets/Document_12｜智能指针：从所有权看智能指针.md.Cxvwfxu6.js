import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D2WelYEY.js";const o="/tanggang_rust/assets/86yy7a1095414ed7c2e479a5af42cfa9.CgbMdXcQ.jpg",F=JSON.parse('{"title":"12 ｜智能指针：从所有权看智能指针","description":"","frontmatter":{},"headers":[],"relativePath":"Document/12｜智能指针：从所有权看智能指针.md","filePath":"Document/12｜智能指针：从所有权看智能指针.md","lastUpdated":1740766764000}'),e={name:"Document/12｜智能指针：从所有权看智能指针.md"};function r(c,s,t,B,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_12-智能指针-从所有权看智能指针" tabindex="-1">12 ｜智能指针：从所有权看智能指针 <a class="header-anchor" href="#_12-智能指针-从所有权看智能指针" aria-label="Permalink to &quot;12 ｜智能指针：从所有权看智能指针&quot;">​</a></h1><p>你好，我是 Mike。从今天开始，我们进入 Rust 进阶篇。</p><p>相对于基础篇，进阶篇更像外功招式，主要是掌握一些实用的基础设施，提高编程效率。这节课我们就在所有权视角下来学习 Rust 中的智能指针。</p><h2 id="智能指针" tabindex="-1">智能指针 <a class="header-anchor" href="#智能指针" aria-label="Permalink to &quot;智能指针&quot;">​</a></h2><p>学习智能指针之前，我们先来了解一下指针是什么。</p><h3 id="指针和指针的类型" tabindex="-1">指针和指针的类型 <a class="header-anchor" href="#指针和指针的类型" aria-label="Permalink to &quot;指针和指针的类型&quot;">​</a></h3><p>如果一个变量，里面存的是另一个变量在内存里的地址值，那么这个变量就被叫做 <strong>指针</strong>。而我们前面讲到的引用（用&amp;号表示）就是一种指针。</p><p><strong>引用是必定有效的指针</strong>，它一定指向一个目前有效（比如没有被释放掉）的类型实例。而指针不一定是引用。也就是说，在 Rust 中，还有一些其他类型的指针存在，我们这节课就来学习其中一些。</p><p>我们这里要再次明晰一下 <strong>引用的类型</strong>。引用分为不同的类型，单独的&amp;符号本身没有什么意义，但是它和其他类型组合起来就能形成各种各样的引用类型。比如：</p><ul><li>&amp;str 是字符串切片引用类型。</li><li>&amp;String 是所有权字符串的引用类型。</li><li>&amp;u32 是 u32 的引用类型。</li></ul><p>注：&amp;str、&amp;String、&amp;u32 都是一个整体。</p><p>这三种都是引用类型，作为引用类型，它们之间是不同的。但是同一种引用类型的实例，比如 &amp;10u32 和&amp;20u32，它们的类型是相同的。</p><p>那么，指针其实也类似，指向不同类型实例的指针，它的类型也是有区别的，这叫做 <strong>指针的类型</strong>。</p><h3 id="智能指针-1" tabindex="-1">智能指针 <a class="header-anchor" href="#智能指针-1" aria-label="Permalink to &quot;智能指针&quot;">​</a></h3><p>Rust 中指针的概念非常灵活，比如，它可以是一个结构体类型，只要其中的一个字段存储其他类型实例的地址，然后对这个结构体实现一些 Rust 标准库里提供的 trait，就可以把它变成指针类型。这种指针可以在传统指针的基础上添加一些额外信息，比如放在额外的一些字段中；也可以做一些额外操作，比如管理引用计数，资源自动回收等。从而显得更加智能，所以被叫做 <strong>智能指针</strong>。</p><p>其实，我们前面碰到的 String 和 <code>Vec&lt;T&gt;</code> 就是一种智能指针。我们来看标准库代码中 <a href="https://doc.rust-lang.org/src/alloc/string.rs.html#365" target="_blank" rel="noreferrer">String</a> 的定义和 <a href="https://doc.rust-lang.org/src/alloc/vec/mod.rs.html#396" target="_blank" rel="noreferrer"><code>Vec&lt;T&gt;</code></a> 的定义。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> struct</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    vec</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> struct</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, #[unstable(feature </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;allocator_api&quot;</span><span style="color:#ABB2BF;">, issue </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;32838&quot;</span><span style="color:#ABB2BF;">)] </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Allocator</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Global</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    buf</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">RawVec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">A</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;">    len</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">usize</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过代码我们可以看到，String 和 <code>Vec&lt;T&gt;</code> 实际都定义为结构体。</p><p>注：Rust 中智能指针的概念也直接来自于 C++。C++里面有 <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr" target="_blank" rel="noreferrer">unique_ptr</a>、 <a href="https://en.cppreference.com/w/cpp/memory/shared_ptr" target="_blank" rel="noreferrer">shared_ptr</a>。</p><p>智能指针可以让代码的开发相对来说容易一些。经过前面的学习，我们知道 Rust 基于所有权出发，定义了一套完整的所有权和借用规则。很多我们习以为常的代码写法，在 Rust 中变成了“违法”，这导致很多人觉得学习 Rust 的门槛很高。而智能指针可以在某些方面降低这种门槛。</p><p>它如何能做到呢？我们稍后揭秘。</p><p>前面我们看到过这种代码：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    i</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _i</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>我们看到， <code>foo()</code> 函数将 i 返回用的不是 move 行为，而是 copy 行为，将 100u32 这个值复制了一份，返回给外面的_i。 <code>foo()</code> 函数调用结束后， <code>foo()</code> 里的局部变量 i 被销毁。</p><p>我们再回忆一下另一段代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;abc&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    s</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _s</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上述代码可以在函数 <code>foo()</code> 里生成一个字符串实例，这个字符串实例资源在堆内存中分配，s 是 foo 函数里的局部变量，拥有字符串资源的所有权。在代码的最后一行，s 把所有权返回给外部调用者并传递给_s。 <code>foo()</code> 调用完成后，栈上的局部变量 s 被销毁。</p><p>这种写法可行是因为返回了资源的所有权。如果我们把代码里的 String 换成&amp;String，把 s 换成&amp;s 就不行了。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; &amp;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;abc&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    &amp;</span><span style="color:#E06C75;">s</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _s</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>你可能会问，既然 String 资源本身是在堆中，为什么我们不能拿到这个资源的引用而返回呢？</p><p>我们来看看为什么不行。在 <code>foo()</code> 函数里，其实我们返回的并不是那个堆里字符串资源的引用，而是栈上局部变量 s 的引用。堆里的字符串资源由栈上的变量 s 管理，而 s 在 <code>foo()</code> 函数调用完成后，就被销毁了，堆里的字符串资源也一并被回收了，所以刚刚那段代码当然行不通了。</p><p>同样的，下面这段代码也是不允许的。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; &amp;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &amp;</span><span style="color:#E06C75;">i</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _i</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>那么，我们有什么办法能让这种意图变得可行呢？其实是有的，比如使用 <code>Box&lt;T&gt;</code> 智能指针。</p><h2 id="box-t" tabindex="-1"><code>Box&lt;T&gt;</code> <a class="header-anchor" href="#box-t" aria-label="Permalink to &quot;\`Box&lt;T&gt;\`&quot;">​</a></h2><p><code>Box&lt;T&gt;</code> 是一个类型整体，作为智能指针 <code>Box&lt;T&gt;</code> 可以把资源强行创建在堆上，并获得资源的所有权，让资源的生命期得以被程序员精确地控制。</p><p>注：堆上的资源，默认与整个程序进程的存在时间一样久。</p><p>我们来看使用 <code>Box&lt;T&gt;</code> 如何处理前面那个示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 100</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _i</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>通过 Box，我们把栈上 i 的值，强行 copy 了一份并放在堆上某个地址，然后 Box 指针指向这个地址。</p><p>返回一个整数 i 的指针确实没多大用，如果我们定义了一个结构体，可以采用类似的办法从函数中返回结构体的 Box 指针。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">};  </span><span style="color:#7F848E;font-style:italic;">// 这个结构体的实例创建在栈上</span></span>
<span class="line"><span style="color:#E5C07B;">    Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _p</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这就很有用了。</p><p>我们看示例的第 7 行，Point 的实例 p 实际是创建在栈上的。通过 <code>Box::new(p)</code>，把 p 实例强行按位复制了一份，并且放到了堆上，我们记为 p’。然后 <code>foo()</code> 函数返回，把 Box 指针实例 move 给了_p。之后，_p 拥有了对 p’ 的所有权。</p><h3 id="box-t-中的所有权分析" tabindex="-1"><code>Box&lt;T&gt;</code> 中的所有权分析 <a class="header-anchor" href="#box-t-中的所有权分析" aria-label="Permalink to &quot;\`Box&lt;T&gt;\` 中的所有权分析&quot;">​</a></h3><p>我们继续深入，回顾一下上面示例里讲到的，编译期间已知尺寸的类型实例会默认创建在栈上。Point 有两个字段：x、y，它们的尺寸是固定的，都是 4 个字节，所以 Point 的尺寸就是 8 个字节，它的尺寸也是固定的。所以它的实例会被创建在栈上。第 7 行的 p 拥有这个 Point 实例的所有权。注意 Point 并没有默认实现 Copy，虽然它的尺寸是固定的。</p><p>在创建 <code>Box&lt;Point&gt;</code> 实例的时候会发生所有权转移：资源从栈上 move 到了堆上，原来栈上的那片资源被置为无效状态，因此下面的代码编译不会通过。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> boxed</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 创建Box实例</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> q</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;                </span><span style="color:#7F848E;font-style:italic;">// 这一句用来检查p有没有被move走</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _p</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>编译提示：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0382</span><span style="color:#ABB2BF;">]: </span><span style="color:#C678DD;">use</span><span style="color:#ABB2BF;"> of moved value: \`p\`</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; src/main.rs:9:13</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#ABB2BF;">7 </span><span style="color:#56B6C2;">|</span><span style="color:#C678DD;">     let</span><span style="color:#ABB2BF;"> p </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {x: 10, y: 20};</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">         - </span><span style="color:#C678DD;">move</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> because</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">has</span><span style="color:#C678DD;"> type</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">\`, </span><span style="color:#E06C75;">which</span><span style="color:#E06C75;"> does</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> implement</span><span style="color:#E06C75;"> the</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Copy</span><span style="color:#ABB2BF;">\` </span><span style="color:#C678DD;">trait</span></span>
<span class="line"><span style="color:#D19A66;">8</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> boxed</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);     </span><span style="color:#7F848E;font-style:italic;">// 创建Box实例</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">                          - </span><span style="color:#E06C75;">value</span><span style="color:#E06C75;"> moved</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#D19A66;">9</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> q</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> p</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">// 这一句用来检查p有没有被move走</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">             ^</span><span style="color:#E06C75;"> value</span><span style="color:#E06C75;"> used</span><span style="color:#E06C75;"> here</span><span style="color:#E06C75;"> after</span><span style="color:#C678DD;"> move</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>之所以会发生所有权这样的转移，是因为 Point 类型本身就是 move 语义的。作为对照，我们来看一个示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> boxed</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 创建Box实例</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> q</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;                </span><span style="color:#7F848E;font-style:italic;">// 这一句用来检查i有没有被move走</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _i</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这个示例就可以编译通过。也就是说，在执行 <code>Box::new()</code> 创建 Box 实例时，具有 copy 语义的整数类型和具有 move 语义的 Point 类型行为不一样。整数会 copy 一份自己，Point 实例会把自己 move 到 Box 里面去。</p><p>一旦创建好 Box 实例后，这个实例就具有了对里面资源的所有权了，它是 move 语义的，你可以看一下示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> boxed</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 创建Box实例</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> q</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;                  </span><span style="color:#7F848E;font-style:italic;">// 这一句用来检查i有没有被move走</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> boxed2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">;         </span><span style="color:#7F848E;font-style:italic;">// 这一句检查boxed实例是不是move语义</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _i</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>不能编译通过，提示：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0382</span><span style="color:#ABB2BF;">]: </span><span style="color:#C678DD;">use</span><span style="color:#ABB2BF;"> of moved value: \`boxed\`</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; src/main.rs:6:5</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#ABB2BF;">3 </span><span style="color:#56B6C2;">|</span><span style="color:#C678DD;">     let</span><span style="color:#ABB2BF;"> boxed </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::new(i);    </span><span style="color:#7F848E;font-style:italic;">// 创建Box实例</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">         ----- </span><span style="color:#C678DD;">move</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> because</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">has</span><span style="color:#C678DD;"> type</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt;\`, </span><span style="color:#E06C75;">which</span><span style="color:#E06C75;"> does</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> implement</span><span style="color:#E06C75;"> the</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Copy</span><span style="color:#ABB2BF;">\` </span><span style="color:#C678DD;">trait</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> q</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> i</span><span style="color:#ABB2BF;">;                  </span><span style="color:#7F848E;font-style:italic;">// 这一句用来检查i有没有被move走</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> boxed2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">;         </span><span style="color:#7F848E;font-style:italic;">// 这一句检查boxed实例是不是move语义</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">                  ----- </span><span style="color:#E06C75;">value</span><span style="color:#E06C75;"> moved</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#D19A66;">6</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;">     boxed</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">     ^^^^^</span><span style="color:#E06C75;"> value</span><span style="color:#E06C75;"> used</span><span style="color:#E06C75;"> here</span><span style="color:#E06C75;"> after</span><span style="color:#C678DD;"> move</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这个示例就验证了我们刚才的说法。</p><h3 id="box-t-的解引用" tabindex="-1"><code>Box&lt;T&gt;</code> 的解引用 <a class="header-anchor" href="#box-t-的解引用" aria-label="Permalink to &quot;\`Box&lt;T&gt;\` 的解引用&quot;">​</a></h3><p>前面我们讲过，创建一个 Box 实例把栈上的内容包起来，可以把栈上的值移动到堆上，比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u8</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 这里 boxed 里面那个u8就是堆上的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>还可以在 Box 实例上使用 <strong>解引用符号</strong>*，把里面的堆上的值再次移动回栈上，比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u8</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> *</span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// 这里这个val整数实例就是在栈上的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>解引用是 <code>Box::new()</code> 的 <strong>逆操作</strong>，可以看到整个过程是相反的。</p><p>对于具有 copy 语义的 u8 类型来说，解引用回来后，boxed 还能使用，我们看下示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u8</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> *</span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 用于u8类型，解引用后，boxed实例还能用</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#D19A66;">5</span></span>
<span class="line"><span style="color:#D19A66;">5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>而对于具有 move 语义的类型来说，情况就不一样了，会发生所有权的转移。比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Point</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> *</span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// 这里做了解引用，Point实例回到栈上</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 解引用后想把boxed再打印出来</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>编译出错，提示 <code>*boxed</code> 已经 move 了。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0382</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">borrow</span><span style="color:#E06C75;"> of</span><span style="color:#E06C75;"> moved</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">: \`</span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;">  --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">13</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">22</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span></span>
<span class="line"><span style="color:#D19A66;">10</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> val</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Point</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> *</span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span><span style="color:#ABB2BF;">                      ------ </span><span style="color:#E06C75;">value</span><span style="color:#E06C75;"> moved</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#D19A66;">13</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span><span style="color:#56B6C2;">                      ^^^^^</span><span style="color:#E06C75;"> value</span><span style="color:#E06C75;"> borrowed</span><span style="color:#E06C75;"> here</span><span style="color:#E06C75;"> after</span><span style="color:#C678DD;"> move</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>因此 boxed 不能再使用。也就是说，如果 <code>Box&lt;T&gt;</code> 的 T 是 move 语义的，那么对这个 Box 实例做解引用操作，会把这个 Box 实例的所有权释放。</p><p>关于这些细节，其实你不用太担心能不能一次性掌握好，因为你用错的时候，Rustc 小助手会贴心地准确提示你，所以不要有心理负担。</p><h3 id="box-t-实现了-trait" tabindex="-1"><code>Box&lt;T&gt;</code> 实现了 trait <a class="header-anchor" href="#box-t-实现了-trait" aria-label="Permalink to &quot;\`Box&lt;T&gt;\` 实现了 trait&quot;">​</a></h3><p><code>Box&lt;T&gt;</code> 的好处在于它的明确性，它里面的资源一定在堆上，所以我们就不用再去关心资源是在栈上还是堆上这种细节问题了。一种类型，被 <code>Box&lt;&gt;</code> 包起来的过程就叫作这个类型的 <strong>盒化</strong>（boxed）。</p><p>Rust 在标准库里为 <code>Box&lt;T&gt;</code> 实现了 <code>Deref</code>、 <code>Drop</code>、 <code>AsRef&lt;T&gt;</code> 等 trait，所以 <code>Box&lt;T&gt;</code> 可以直接调用 T 实例的方法，访问 T 实例的值。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am a method of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();    </span><span style="color:#7F848E;font-style:italic;">// 点操作符触发deref</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> method</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><code>Box&lt;T&gt;</code> 拥有对 T 实例的所有权，所以可以对 T 实例进行写操作。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">boxed</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {    </span><span style="color:#7F848E;font-style:italic;">// 这一行，使用解引用操作更新值</span></span>
<span class="line"><span style="color:#E06C75;">        x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="box-t-的-clone" tabindex="-1"><code>Box&lt;T&gt;</code> 的 Clone <a class="header-anchor" href="#box-t-的-clone" aria-label="Permalink to &quot;\`Box&lt;T&gt;\` 的 Clone&quot;">​</a></h3><p><code>Box&lt;T&gt;</code> 能否 Clone，需要看 T 是否实现了 Clone，因为我们也需要把 T 的资源克隆一份。你可以看一下我给出的示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Clone</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am a method of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> another_boxed</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();   </span><span style="color:#7F848E;font-style:italic;">// 克隆</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">another_boxed</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">};  </span><span style="color:#7F848E;font-style:italic;">// 修改新的一份值</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">);                 </span><span style="color:#7F848E;font-style:italic;">// 打印原来一份值</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">another_boxed</span><span style="color:#ABB2BF;">);         </span><span style="color:#7F848E;font-style:italic;">// 打印新的一份值</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="box-t-作为函数参数" tabindex="-1"><code>Box&lt;T&gt;</code> 作为函数参数 <a class="header-anchor" href="#box-t-作为函数参数" aria-label="Permalink to &quot;\`Box&lt;T&gt;\` 作为函数参数&quot;">​</a></h3><p>我们可以把 <code>Box&lt;T&gt;</code> 作为参数传入函数，这个我们前面已经见过了。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt;) {    </span><span style="color:#7F848E;font-style:italic;">// 这里参数类型是 Box&lt;Point&gt;</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">}));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="box-t-1" tabindex="-1"><code>&amp;Box&lt;T&gt;</code> <a class="header-anchor" href="#box-t-1" aria-label="Permalink to &quot;\`&amp;Box&lt;T&gt;\`&quot;">​</a></h3><p><code>Box&lt;T&gt;</code> 本身作为一种类型，对它做引用操作当然是可以的。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am a method of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();        </span><span style="color:#7F848E;font-style:italic;">// 调用类型方法</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">boxed</span><span style="color:#ABB2BF;">;      </span><span style="color:#7F848E;font-style:italic;">// 取boxed实例的引用</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();            </span><span style="color:#7F848E;font-style:italic;">// 调用类型方法</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> method</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> method</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>在示例中，boxed 是一个所有权型变量，y 是一个引用型变量。它们都能调用到 Point 类型上的方法。</p><p>对 Box 实例做可变引用（&amp;mut）也是可以的，你可以看一下示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am a method of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">;     </span><span style="color:#7F848E;font-style:italic;">// 这里&amp;mut Box&lt;Point&gt;</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();               </span><span style="color:#7F848E;font-style:italic;">// 调用类型方法</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 修改前的值</span></span>
<span class="line"><span style="color:#ABB2BF;">    **</span><span style="color:#E06C75;">y</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">};  </span><span style="color:#7F848E;font-style:italic;">// 注意这里用了二级解引用</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 修改后的值</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> method</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这个示例里值得注意的是第 18 行，做了两次解引用，第一次是对&amp;mut 做的，第二次是对 <code>Box&lt;T&gt;</code> 做的。</p><h3 id="box-self" tabindex="-1"><code>Box&lt;Self&gt;</code> <a class="header-anchor" href="#box-self" aria-label="Permalink to &quot;\`Box&lt;Self&gt;\`&quot;">​</a></h3><p>前面我们讲过，类型的方法可以用 self、&amp;self、&amp;mut self 三种形态传入 Self 参数。其中第一种 self 形态还有一种变体 <code>Box&lt;Self&gt;</code>，你可以看一下示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play_ref</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am play_ref of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play_mutref</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am play_mutref of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play_own</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am play_own of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play_boxown</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;">&gt;) {    </span><span style="color:#7F848E;font-style:italic;">// 注意这里</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am play_boxown of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play_ref</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play_mutref</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play_boxown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // boxed.play_own();</span><span style="color:#7F848E;font-style:italic;">  // play_boxown()和 play_own() 只能同时打开一个</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>注意示例中， <code>play_boxown()</code> 和 <code>play_own()</code> 只能同时打开一个，这是为什么呢？你思考一下。</p><h3 id="结构体中的-box" tabindex="-1">结构体中的 Box <a class="header-anchor" href="#结构体中的-box" aria-label="Permalink to &quot;结构体中的 Box&quot;">​</a></h3><p><code>Box&lt;T&gt;</code> 作为类型，当然是可以出现在 struct 里的，你可以看一下示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Triangle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    one</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt;,    </span><span style="color:#7F848E;font-style:italic;">// 三个字段类型都是 Box&lt;Point&gt;</span></span>
<span class="line"><span style="color:#E06C75;">    two</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;">    three</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> t</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Triangle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        one</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        }),</span></span>
<span class="line"><span style="color:#E06C75;">        two</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        }),</span></span>
<span class="line"><span style="color:#E06C75;">        three</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        }),</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="box-dyn-trait" tabindex="-1"><code>Box&lt;dyn trait&gt;</code> <a class="header-anchor" href="#box-dyn-trait" aria-label="Permalink to &quot;\`Box&lt;dyn trait&gt;\`&quot;">​</a></h3><p>回忆 <a href="https://time.geekbang.org/column/article/724776" target="_blank" rel="noreferrer">第 10 讲</a> 的 trait object，它代表一种类型，这种类型可以代理一批其他的类型。但是 dyn trait 本身的尺寸在编译期是未知的，所以 dyn trait 的出现总是要借助于引用或智能指针。而 <code>Box&lt;dyn trait&gt;</code> 是最常见的，甚至比 <code>&amp;dyn trait</code> 更常见。原因就是 <code>Box&lt;dyn Trait&gt;</code> 拥有所有权，这就是 <code>Box&lt;T&gt;</code> 方便的地方，而 <code>&amp;dyn Trait</code> 不拥有所有权，有的时候就没那么方便。</p><p>我们来看使用 <code>Box&lt;dyn trait&gt;</code> 做函数参数的一个示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">trait</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> doit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#ABB2BF;">&gt;) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    doit</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    doit</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    doit</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>这个示例里的 <code>doit()</code> 函数能接收 Atype、Btype、Ctype 三种不同类型的实例。</p><p>如果 dyn trait 出现在结构体里，那么 <code>Box&lt;dyn trait&gt;</code> 形式就比 <code>&amp;dyn trait</code> 形式要方便得多。比如，下面示例里的结构体字段类型是 <code>Box&lt;dyn TraitA&gt;</code>，能正常编译。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">trait</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> MyStruct</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#ABB2BF;">&gt;  </span><span style="color:#7F848E;font-style:italic;">// 结构体的字段类型是 Box&lt;dyn TraitA&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> t1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> MyStruct</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)};</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> t2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> MyStruct</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">)};</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> t3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> MyStruct</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">)};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>而下面这个示例，结构体字段类型是 <code>&amp;dyn TraitA</code>，就没办法通过编译。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">trait</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> MyStruct</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#7F848E;font-style:italic;">    // 结构体字段类型是 &amp;dyn TraitA</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>报错如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0106</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">missing</span><span style="color:#E06C75;"> lifetime</span><span style="color:#E06C75;"> specifier</span></span>
<span class="line"><span style="color:#ABB2BF;">  --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">lib</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">8</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span></span>
<span class="line"><span style="color:#D19A66;">12</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;">     x</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> TraitA</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span><span style="color:#56B6C2;">        ^</span><span style="color:#E06C75;"> expected</span><span style="color:#E06C75;"> named</span><span style="color:#E06C75;"> lifetime</span><span style="color:#E06C75;"> parameter</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span></span>
<span class="line"><span style="color:#E06C75;">help</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">consider</span><span style="color:#E06C75;"> introducing</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> named</span><span style="color:#E06C75;"> lifetime</span><span style="color:#E06C75;"> parameter</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span></span>
<span class="line"><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;"> ~ </span><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> MyStruct</span><span style="color:#ABB2BF;">&lt;&#39;</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;"> ~     </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: &amp;&#39;</span><span style="color:#E5C07B;">a</span><span style="color:#C678DD;"> dyn</span><span style="color:#E5C07B;"> TraitA</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这个错误涉及到第 20 讲引用的生命期的概念，现在我们不去深究。</p><p><code>Box&lt;T&gt;</code> 智能指针的内容就讲到这里，下面我们看另一种智能指针 <code>Arc&lt;T&gt;</code>。</p><h2 id="arc-t" tabindex="-1"><code>Arc&lt;T&gt;</code> <a class="header-anchor" href="#arc-t" aria-label="Permalink to &quot;\`Arc&lt;T&gt;\`&quot;">​</a></h2><p><code>Box&lt;T&gt;</code> 是单所有权或独占所有权模型的智能指针，而 <code>Arc&lt;T&gt;</code> 是共享所有权模型的智能指针，也就是多个变量可以同时拥有一个资源的所有权。和 <code>Box&lt;T&gt;</code> 一样， <code>Arc&lt;T&gt;</code> 也会保证被包装的内容被分配在堆上。</p><h3 id="clone" tabindex="-1">clone <a class="header-anchor" href="#clone" aria-label="Permalink to &quot;clone&quot;">​</a></h3><p>Arc 的主要功能是和 <code>clone()</code> 配合使用。在 Arc 实例上每一次新的 <code>clone()</code> 操作，总是会将资源的引用数+1，而保持原来那一份资源不动，这个信息记录在 Arc 实例里面。每一个指向同一个资源的 Arc 实例走出作用域，就会给这个引用计数-1。直到最后一个 Arc 实例消失，目标资源才会被销毁释放。你可以看一下示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">sync</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Arc</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]    </span><span style="color:#7F848E;font-style:italic;">// 这里不需要目标type实现Clone trait</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am a method of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> arced</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Arc</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> another_arced</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> arced</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();      </span><span style="color:#7F848E;font-style:italic;">// 克隆引用</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">arced</span><span style="color:#ABB2BF;">);                </span><span style="color:#7F848E;font-style:italic;">// 打印一份值</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">another_arced</span><span style="color:#ABB2BF;">);        </span><span style="color:#7F848E;font-style:italic;">// 打印同一份值</span></span>
<span class="line"><span style="color:#E06C75;">    arced</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    another_arced</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> arc3_ref</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">another_arced</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    arc3_ref</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> method</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> method</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> method</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>我们可以看到，相比于 <code>Box&lt;T&gt;</code>， <code>Arc&lt;T&gt;</code> 的 clone 不要求 T 实现了 Clone trait。 <code>Arc&lt;T&gt;</code> 的克隆行为只会改变 Arc 的引用计数，而不会克隆里面的内容。由于不需要克隆原始资源，所以性能是很高的。</p><p>类似于 <code>Box&lt;T&gt;</code>， <code>Arc&lt;T&gt;</code> 也实现了 Deref、Drop、Clone 等 trait。因此， <code>Arc&lt;T&gt;</code> 也可以符合人类的习惯，访问到里面类型 T 的方法。 <code>Arc&lt;T&gt;</code> 的不可变引用 <code>&amp;Arc&lt;&gt;</code> 也可以顺利调用到 T 上的方法。</p><h3 id="arc" tabindex="-1">Arc <a class="header-anchor" href="#arc" aria-label="Permalink to &quot;Arc&quot;">​</a></h3><p>和 <code>Box&lt;T&gt;</code> 一样，Arc 也可以用在方法中的 self 参数上面，作为所有权 self 的一个变体形式。</p><p>我们继续扩展上面的代码，你可以看一下扩展后的样子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">sync</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Arc</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play_ref</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am play_ref of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play_mutref</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am play_mutref of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play_own</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am play_own of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play_boxown</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;">&gt;) {    </span><span style="color:#7F848E;font-style:italic;">// 注意这里</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am play_boxown of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play_arcown</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Arc</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;">&gt;) {    </span><span style="color:#7F848E;font-style:italic;">// 注意这里</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;am play_arcown of Point.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> boxed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play_ref</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play_mutref</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    boxed</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play_boxown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // boxed.play_own();</span><span style="color:#7F848E;font-style:italic;">  // play_boxown()和 play_own() 只能同时打开一个</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> arced</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Arc</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Arc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#E06C75;">    arced</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play_ref</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // arced.play_mutref();</span><span style="color:#7F848E;font-style:italic;">  // 不能用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // arced.play_own();</span><span style="color:#7F848E;font-style:italic;">     // 不能用，Arc&lt;T&gt; 中的T无法被移出</span></span>
<span class="line"><span style="color:#E06C75;">    arced</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">play_arcown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> play_ref</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> play_mutref</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> play_boxown</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> play_ref</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">am</span><span style="color:#E06C75;"> play_arcown</span><span style="color:#E06C75;"> of</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>通过这个示例我们可以看到，不能通过 <code>Arc&lt;&gt;</code> 直接修改里面类型的值，也不能像 <code>Box&lt;&gt;</code> 的解引用操作那样，把里面的内容从 <code>Arc&lt;&gt;</code> 中移动出来。你可以试着打开示例里注释掉的几行看看 Rustc 小助手的提示信息。</p><h3 id="arc-dyn-trait" tabindex="-1"><code>Arc&lt;dyn trait&gt;</code> <a class="header-anchor" href="#arc-dyn-trait" aria-label="Permalink to &quot;\`Arc&lt;dyn trait&gt;\`&quot;">​</a></h3><p>我们还可以把前面 <code>Box&lt;dyn trait&gt;</code> 的示例改编成 <code>Arc&lt;T&gt;</code> 的。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">sync</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Arc</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">trait</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> MyStruct</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Arc</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Atype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> t1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> MyStruct</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Arc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">)};</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Btype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> t2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> MyStruct</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Arc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">)};</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Ctype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> t3</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> MyStruct</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Arc</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">)};</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="值的修改" tabindex="-1">值的修改 <a class="header-anchor" href="#值的修改" aria-label="Permalink to &quot;值的修改&quot;">​</a></h3><p>多所有权条件下，怎么修改 Arc 里面的值呢？答案是不能修改。虽然 <code>Arc&lt;T&gt;</code> 是拥有所有权的，但 <code>Arc&lt;T&gt;</code> 不提供修改 T 的能力，这也是 <code>Arc&lt;T&gt;</code> 和 <code>Box&lt;T&gt;</code> 不一样的地方。后面我们在并发编程部分会讲到 Mutex、RwLock 等锁。想要修改 Arc 里面的内容，必须配合这些锁才能完成，比如 <code>Arc&lt;Mutex&lt;T&gt;&gt;</code>。</p><p>其实很好理解，共享所有权的场景下，如果任意一方能随意修改被包裹的值，那就会影响其他所有权的持有者，整个就乱套了。所以要修改的话必须引入锁的机制。</p><h3 id="arc-t-与不可变引用-的区别" tabindex="-1"><code>Arc&lt;T&gt;</code> 与不可变引用&amp;的区别 <a class="header-anchor" href="#arc-t-与不可变引用-的区别" aria-label="Permalink to &quot;\`Arc&lt;T&gt;\` 与不可变引用&amp;的区别&quot;">​</a></h3><p>首先，它们都是共享对象的行为，本质上都是指针。但 <code>Arc&lt;T&gt;</code> 是共享了所有权模型，而&amp;只是共享借用模型。共享借用模型就得遵循借用检查器的规则——借用的有效性依赖于被借用资源的 scope。对于这个的分析是非常复杂的。而所有权模型是由自己来管理资源的 scope，所以处理起来比较方便。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这节课我们一起学习了最常用的两个智能指针： <code>Box&lt;T&gt;</code> 和 <code>Arc&lt;T&gt;</code>。其实 Rust 里还有很多智能指针，比如 Rc、Cell、RefCell 等等，每一种智能指针类型都有自己的特点。但是不管怎样，学习的方法都是一样的，那就是从所有权的视角去分析研究。你可以在后面遇到那些类型的时候，再根据这节课提供的方法去研究它们。</p><p>后面我们会看到，在智能指针的加持下，Rust 代码写起来会非常流畅，可以和 Java 不相上下。再结合 Rust 强大的类型系统建模能力，等你写得熟练之后，在中大项目中，使用 Rust 甚至会有超越 Python 的开发效率。</p><p><img src="`+o+`" alt=""></p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>你试着打开示例中的这两句，看看报错信息，然后分析一下是为什么？</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">    // arced.play_mutref();</span><span style="color:#7F848E;font-style:italic;">  // 不能用</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // arced.play_own();</span><span style="color:#7F848E;font-style:italic;">     // 不能用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>欢迎你把自己的分析分享到评论区，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>`,140)]))}const A=n(e,[["render",r]]);export{F as __pageData,A as default};
