import{_ as a,c as n,o as e,ag as l}from"./chunks/framework.D2WelYEY.js";const y=JSON.parse('{"title":"答疑课堂（一）｜第一章 Rust 基础篇思考题答案","description":"","frontmatter":{},"headers":[],"relativePath":"Document/答疑课堂（一）｜第一章Rust基础篇思考题答案.md","filePath":"Document/答疑课堂（一）｜第一章Rust基础篇思考题答案.md","lastUpdated":1740766764000}'),p={name:"Document/答疑课堂（一）｜第一章Rust基础篇思考题答案.md"};function o(t,s,r,c,i,B){return e(),n("div",null,s[0]||(s[0]=[l(`<h1 id="答疑课堂-一-第一章-rust-基础篇思考题答案" tabindex="-1">答疑课堂（一）｜第一章 Rust 基础篇思考题答案 <a class="header-anchor" href="#答疑课堂-一-第一章-rust-基础篇思考题答案" aria-label="Permalink to &quot;答疑课堂（一）｜第一章 Rust 基础篇思考题答案&quot;">​</a></h1><p>你好，我是 Mike。</p><p>恭喜你学完前两章的内容了，基础篇和进阶篇一共有 20 讲，每一讲的内容都很重要，算是你入门 Rust 的重要基础，所以一定要多读几遍，争取学透。为了让你学思结合，我们在每节课的最后设计了对应的思考题，这节课我们就来处理这些问题。</p><p>我也看到很多同学在课程的后面回答了这些问题，此外还有一些其他的问题，提得也很精彩，所以我挑出一并放在这里，希望能为你解惑，对你有所启发，话不多说，我们马上开始吧！</p><p>做完思考题再来看答案会更有收获。</p><h2 id="基础篇" tabindex="-1"><strong>基础篇</strong> <a class="header-anchor" href="#基础篇" aria-label="Permalink to &quot;**基础篇**&quot;">​</a></h2><h3 id="_01-快速入门-rust-中有哪些你不得不了解的基础语法" tabindex="-1"><a href="https://time.geekbang.org/column/article/718865?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">01 ｜快速入门：Rust 中有哪些你不得不了解的基础语法？</a> <a class="header-anchor" href="#_01-快速入门-rust-中有哪些你不得不了解的基础语法" aria-label="Permalink to &quot;[01 ｜快速入门：Rust 中有哪些你不得不了解的基础语法？](https://time.geekbang.org/column/article/718865?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><ul><li>Rust 中能否实现类似 JS 中的 number 这种通用的数字类型呢？</li><li>Rust 中能否实现 Python 中那种无限大小的数字类型呢？</li></ul><h4 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h4><p>在 Rust 中，有多种数字类型，包括有符号和无符号整数、浮点数、复数等。和 JS 中的 number 类型相似，Rust 中的数字类型也支持基本的数学运算，例如加减乘除和取模等。不过，和 JS 的 number 不同，Rust 的数字类型都具有固定的位数，这意味着不同的数字类型有不同的取值范围。</p><p>此外，Rust 中的数值类型需要在编译时就确定它们的类型和大小，这些类型可以通过使用 Rust 内置的类型注解，或是灵活的小数点和后缀表示法来声明。而 crates.io 上有 num crate 可以用来表示通用的数字类型，具体是通过 trait 机制来实现的。</p><p>关于实现 Python 中无限大小的数字类型，Rust 不直接支持这个特性，但可以通过使用第三方库来实现。常用的第三方库包括 rug 和 num-bigint 等，它们提供了实现高精度计算的数据类型和函数，使 Rust 可以处理更大的整数和浮点数。这些库采用的是类似于 Python 的动态内存分配和存储机制，能够进行几乎无限大小的数字计算。</p><h3 id="_02-所有权-上-rust-如何管理程序中的资源" tabindex="-1"><a href="https://time.geekbang.org/column/article/718916?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">02 ｜所有权（上）：Rust 如何管理程序中的资源？</a> <a class="header-anchor" href="#_02-所有权-上-rust-如何管理程序中的资源" aria-label="Permalink to &quot;[02 ｜所有权（上）：Rust 如何管理程序中的资源？](https://time.geekbang.org/column/article/718916?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题-1" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-1" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><ol><li>下面的示例将输出什么？</li></ol><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;I am a superman.&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> i</span><span style="color:#C678DD;"> in</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">..</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> tmp_s</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;s is {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tmp_s</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol><li>一个由固定尺寸类型组成的结构体变量，如下面示例中的 Point 类型，在赋值给另一个变量时，采用的移动方式还是复制方式？</li></ol><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i64</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  z</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i64</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="答案-1" tabindex="-1">答案 <a class="header-anchor" href="#答案-1" aria-label="Permalink to &quot;答案&quot;">​</a></h4><ol><li>无法通过编译，可以将第 5 行代码修改为：let tmp_s = s.clone();。</li></ol><p>修改后如下：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;I am a superman.&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> _</span><span style="color:#C678DD;"> in</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">..</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> tmp_s</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;s is {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">tmp_s</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol><li>由于 Point 没有实现 Copy trait，所以在赋值过程中会产生 Move。如果结构体实现了 Copy trait，则会进行复制而不是移动。</li></ol><p>答案来自二夕 Thrower 和 Forest</p><h3 id="_03-所有权-下-rust-中借用与引用的规则是怎样的" tabindex="-1"><a href="https://time.geekbang.org/column/article/720128?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">03 ｜所有权（下）：Rust 中借用与引用的规则是怎样的？</a> <a class="header-anchor" href="#_03-所有权-下-rust-中借用与引用的规则是怎样的" aria-label="Permalink to &quot;[03 ｜所有权（下）：Rust 中借用与引用的规则是怎样的？](https://time.geekbang.org/column/article/720128?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题-2" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-2" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><ol><li>请思考，为何在不可变引用存在的情况下（只是读操作），原所有权变量也无法写入？</li></ol><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol><li>请回答，可变引用复制的时候，为什么不允许 copy，而是 move？</li></ol><h4 id="答案-2" tabindex="-1">答案 <a class="header-anchor" href="#答案-2" aria-label="Permalink to &quot;答案&quot;">​</a></h4><ol><li><p>不可变引用的作用域跨越了所有权变量的写入过程，意味着同一个作用域同时存在可变引用和不可变引用，编译器为了防止读取错误，不能通过编译。可以把 a = 20 放到引用之前，即可编译通过。</p></li><li><p>可变引用如果可以 Copy，就违反了可变引用不能同时存在的规则，因此只能 Move。</p></li></ol><p>不可变借用，从字面理解就是借出去了就不能变了，所以既然保证不变了，那这样的借用当然可以被借出去 N 次（原变量不可变是只限于在借出去的变量的有效生命周期内）。可变借用就是借出去随时有被改变的可能，在同一生命周期内借出去多次，有不确定性的被改变的风险，尤其在多线程中，所以就只让你借出去一次，既然存在有不确定性的被修改的可能，那这个时期肯定就不会让你再有不可以变借用了（因为随时会改变了，不可变借用本身也就不成立了）。Rust 这个逻辑看似很繁杂，实则逻辑环环相扣清晰很符合常规。</p><p>答案来自 Andylinge 和 Citroen</p><h3 id="_04-字符串-对号入座-字符串其实没那么可怕" tabindex="-1"><a href="https://time.geekbang.org/column/article/720426?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">04 ｜字符串：对号入座，字符串其实没那么可怕！</a> <a class="header-anchor" href="#_04-字符串-对号入座-字符串其实没那么可怕" aria-label="Permalink to &quot;[04 ｜字符串：对号入座，字符串其实没那么可怕！](https://time.geekbang.org/column/article/720426?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题-3" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-3" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><p><code>chars</code> 函数是定义在 str 上的，为什么 String 类型能直接调用 str 上定义的方法？实际上 str 上所有的方法，String 都能调用，请问这是为什么呢？</p><h4 id="答案-3" tabindex="-1">答案 <a class="header-anchor" href="#答案-3" aria-label="Permalink to &quot;答案&quot;">​</a></h4><p>因此在 String 上实现了 Deref trait，target 为 str。</p><p>另外补充一些字符串相关知识点。</p><p>Rust 中 <code>char</code> 是用于存放 unicode 单个字符的类型（固定 4 个字节）。String 类型只能放在堆上，通过引用所有权的形式和变量绑定，它的存储方式不是简单的 char 数组，而是 utf8 编码的字节序列，所以单独取这个序列的某一段切片，不一定能解析出具体的字符（程序里的 <code>String[a..b]</code>，这里的 a 和 b 已经是经过特殊处理的保证截取的有效性）。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;abcdefghijk&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">[..</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;我爱中国&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">[..</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">     Running</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">debug</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">playground</span><span style="color:#ABB2BF;">\`</span></span>
<span class="line"><span style="color:#E06C75;">thread</span><span style="color:#98C379;"> &#39;main&#39;</span><span style="color:#E06C75;"> panicked</span><span style="color:#E06C75;"> at</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">byte</span><span style="color:#E06C75;"> index</span><span style="color:#D19A66;"> 5</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> a</span><span style="color:#E5C07B;"> char</span><span style="color:#E06C75;"> boundary</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">it</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> inside</span><span style="color:#98C379;"> &#39;爱&#39;</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">bytes</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">..</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">) </span><span style="color:#E06C75;">of</span><span style="color:#ABB2BF;"> \`我爱中国\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果能取得有效的序列片段那就是 str 类型，但是程序里凡是用到绑定 str 类型变量的地方，则必须都是引用形式存在的（&amp;str），因为 str 是引用的原始片段的那段真实数据，而&amp;str 类型是一个 FatPointer，它包括引用目标的起始地址和长度，所以 str 和&amp;str 是完全两个不同的概念。</p><p>u8 就是一个存储 0 到 255 大小的类型，因为一个字节就是 8 位，所以[u8, N]可以看做是程序的任何类型数据的二进制表示形式。</p><p>答案来自 Citroen</p><h3 id="_05-复合类型-上-结构体与面向对象特性" tabindex="-1"><a href="https://time.geekbang.org/column/article/720991?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">05 ｜复合类型（上）：结构体与面向对象特性</a> <a class="header-anchor" href="#_05-复合类型-上-结构体与面向对象特性" aria-label="Permalink to &quot;[05 ｜复合类型（上）：结构体与面向对象特性](https://time.geekbang.org/column/article/720991?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题-4" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-4" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><p>可以给 i8 类型做 impl 吗？</p><h4 id="答案-4" tabindex="-1">答案 <a class="header-anchor" href="#答案-4" aria-label="Permalink to &quot;答案&quot;">​</a></h4><p>基本数据类型无法实现 impl，不过我们可以通过 trait 给基本数据类型添加操作的方式来实现。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">trait</span><span style="color:#E5C07B;"> Operate</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  fn</span><span style="color:#61AFEF;"> plus</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Operate</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> i8</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> plus</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        self</span><span style="color:#ABB2BF;"> + </span><span style="color:#E5C07B;">self</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;">  a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1</span><span style="color:#E5C07B;">i8</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">plus</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>另外可以用 newtype 模式对 <code>i8</code> 封装一下，再 impl。</p><p>答案来自下雨天和约书亚</p><h3 id="_06-复合类型-下-枚举与模式匹配" tabindex="-1"><a href="https://time.geekbang.org/column/article/720999?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">06 ｜复合类型（下）：枚举与模式匹配</a> <a class="header-anchor" href="#_06-复合类型-下-枚举与模式匹配" aria-label="Permalink to &quot;[06 ｜复合类型（下）：枚举与模式匹配](https://time.geekbang.org/column/article/720999?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题-5" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-5" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><p>match 表达式的各个分支中，如果有不同的返回类型的情况，应该如何处理？</p><h4 id="答案-5" tabindex="-1">答案 <a class="header-anchor" href="#答案-5" aria-label="Permalink to &quot;答案&quot;">​</a></h4><p>作为静态类型语言，match 返回的类型必须在编译期就被确定，也就意味着 match 必须返回相同的类型。在这个前提下，如果要返回不同的类型，那么切入点就只能是：“返回同一个类型，但是这个类型能表示（承载）不同的类型”，那就只能是本节课讲的枚举 enum 了。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    Int</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">    Float</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">f64</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">    None</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> get_number</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">condition</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> condition</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D19A66;">        1</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Int</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#D19A66;">        2</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Float</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3.14</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">        _</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">None</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> get_number</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Number</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Int</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;int {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        Number</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Float</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;float {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        Number</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">None</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;not number&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> get_number</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Number</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Int</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;int {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        Number</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Float</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;float {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        Number</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">None</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;not number&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> value</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> get_number</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Number</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Int</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;int {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        Number</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Float</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;float {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        Number</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">None</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;not number&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>答案来自-Hedon 🍭</p><h3 id="_07-类型与类型参数-如何给-rust-小助手提供更多信息" tabindex="-1"><a href="https://time.geekbang.org/column/article/722240?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">07 ｜类型与类型参数：如何给 Rust 小助手提供更多信息？</a> <a class="header-anchor" href="#_07-类型与类型参数-如何给-rust-小助手提供更多信息" aria-label="Permalink to &quot;[07 ｜类型与类型参数：如何给 Rust 小助手提供更多信息？](https://time.geekbang.org/column/article/722240?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题-6" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-6" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><p>如果你给某个泛型实现了一个方法，那么还能为它的一个具化类型再实现同样的方法吗？</p><h4 id="答案-6" tabindex="-1">答案 <a class="header-anchor" href="#答案-6" aria-label="Permalink to &quot;答案&quot;">​</a></h4><p>“为泛型实现了一个方法，能否再为具化类型实现一个同名方法”，取决于这个泛型能否表示相应的具化类型。比如为泛型 T 和 String 实现了相同的方法，由于 T 没有施加任何约束，它可以代表 String。那么当调用方法时，对于具化类型 String 来说，要调用哪一个呢？因此会出现歧义，编译器会报错：方法被重复定义了。</p><p>但如果给泛型 T 施加了一个 Copy 约束，要求 T 必须实现了 Copy trait，那么就不会报错了，因为此时 T 代表不了 String，所以调用方法不会出现歧义。但如果再为 <code>i32</code> 实现一个同名方法就会报错了，因为 <code>i32</code> 实现了 Copy，它可以被 T 表示。</p><p>答案来自古明地觉</p><h3 id="_08-option、result、迭代器及实际类型中所有权问题" tabindex="-1"><a href="https://time.geekbang.org/column/article/722702?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">08 ｜ Option、Result、迭代器及实际类型中所有权问题</a> <a class="header-anchor" href="#_08-option、result、迭代器及实际类型中所有权问题" aria-label="Permalink to &quot;[08 ｜ Option、Result、迭代器及实际类型中所有权问题](https://time.geekbang.org/column/article/722702?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题-7" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-7" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><p>你可以用同样的思路去研究一下，看看如何拿到 HashMap 中值的所有权。 <a href="https://doc.rust-lang.org/std/collections/struct.HashMap.html" target="_blank" rel="noreferrer">https://doc.rust-lang.org/std/collections/struct.HashMap.html</a></p><h4 id="答案-7" tabindex="-1">答案 <a class="header-anchor" href="#答案-7" aria-label="Permalink to &quot;答案&quot;">​</a></h4><p>HashMap 实现了 <code>into_iter()</code>，因此可以用 for 语句获取其所有权。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">k</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">v</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> myhash</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">//\`myhash\` moved due to this implicit call to \`.into_iter()\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // todo:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里会获得v的所有权，并且消耗掉myhash</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">myhash</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//value borrowed here after move</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>答案来自 PEtFiSh 和 Ransang</p><h3 id="_09-初识-trait-协议约束与能力配置" tabindex="-1"><a href="https://time.geekbang.org/column/article/723496?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">09 ｜初识 Trait：协议约束与能力配置</a> <a class="header-anchor" href="#_09-初识-trait-协议约束与能力配置" aria-label="Permalink to &quot;[09 ｜初识 Trait：协议约束与能力配置](https://time.geekbang.org/column/article/723496?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题-8" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-8" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><p>如果你学习或者了解过 Java、C++ 等面向对象语言的话，可以聊一聊 trait 的依赖和 OOP 继承的区别在哪里。</p><h4 id="答案-8" tabindex="-1">答案 <a class="header-anchor" href="#答案-8" aria-label="Permalink to &quot;答案&quot;">​</a></h4><p>trait 的依赖：小明要听从数学老师，语文老师，英语老师的话。老师之间是平等关系，多个依赖平等，最小依赖选择自己喜欢的功能。</p><p>OOP 继承：小明要听他爸、他爷爷、他曾祖父的话。继承之间存在父子关系，继承过来一堆破属性和方法，也许根本不是自己想要的，还要负重前行。</p><p>答案来自下雨天</p><h3 id="_10-再探-trait-trait-类型-rust-的大脑" tabindex="-1"><a href="https://time.geekbang.org/column/article/724776?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">10 ｜再探 Trait：Trait + 类型 = Rust 的大脑</a> <a class="header-anchor" href="#_10-再探-trait-trait-类型-rust-的大脑" aria-label="Permalink to &quot;[10 ｜再探 Trait：Trait + 类型 = Rust 的大脑](https://time.geekbang.org/column/article/724776?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题-9" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-9" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><p>请谈谈在函数参数中传入 <code>&amp;dyn TraitA</code> 与 <code>Box</code>  两种类型的区别。</p><h4 id="答案-9" tabindex="-1">答案 <a class="header-anchor" href="#答案-9" aria-label="Permalink to &quot;答案&quot;">​</a></h4><p>Rust 生命周期的独特设计，导致了该语言需要设计一些处理方式应对特殊情况，比如生命周期的标注（主要是给编译器进行代码处理时的提示）。事实上，我们在日常开发中应该避免一些陷入复杂情况的方式：比如，传入参数都用引用（borrow），传出结果都应该是 owner。Rust 也为我们提供了处理各种情况的工具。所以，一般来说，我们应该在传入参数的时候用 <code>&amp;dyn T</code>，传出结果用 <code>Box&lt;dyn T&gt;</code>。</p><p>此外， <code>&amp;dyn TraitA</code> 没有所有权，而 <code>Box&lt;dyn TraitA&gt;</code> 有所有权。 <code>&amp;dyn TraitA</code> 是借用，Box 会转移所有权。</p><p>通过下面的程序可以测试出来：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> doit3</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">t1</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> TraitA</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">t2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">t1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">t2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> AType</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> BType</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">     doit3</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#ABB2BF;">输出：</span></span>
<span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0382</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">borrow</span><span style="color:#E06C75;"> of</span><span style="color:#E06C75;"> moved</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#ABB2BF;">   --&gt; </span><span style="color:#E06C75;">examples</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">trait_object</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">29</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">22</span></span>
<span class="line"><span style="color:#56B6C2;">    |</span></span>
<span class="line"><span style="color:#D19A66;"> 26</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> BType</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">    |</span><span style="color:#ABB2BF;">         - </span><span style="color:#C678DD;">move</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> because</span><span style="color:#E06C75;"> b</span><span style="color:#E06C75;"> has</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> BType</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">which</span><span style="color:#E06C75;"> does</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> implement</span><span style="color:#E06C75;"> the</span><span style="color:#E5C07B;"> Copy</span><span style="color:#C678DD;"> trait</span></span>
<span class="line"><span style="color:#D19A66;"> 27</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     doit3</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#56B6C2;">    |</span><span style="color:#ABB2BF;">                        - </span><span style="color:#E06C75;">value</span><span style="color:#E06C75;"> moved</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#D19A66;"> 28</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#D19A66;"> 29</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">    |</span><span style="color:#56B6C2;">                      ^</span><span style="color:#E06C75;"> value</span><span style="color:#E06C75;"> borrowed</span><span style="color:#E06C75;"> here</span><span style="color:#E06C75;"> after</span><span style="color:#C678DD;"> move</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>答案来自哄哄、鸠摩智和-Hedon 🍭</p><h3 id="_11-常见-trait-解析-标准库中的常用-trait-应该怎么用" tabindex="-1"><a href="https://time.geekbang.org/column/article/724942?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">11 ｜常见 Trait 解析：标准库中的常用 Trait 应该怎么用？</a> <a class="header-anchor" href="#_11-常见-trait-解析-标准库中的常用-trait-应该怎么用" aria-label="Permalink to &quot;[11 ｜常见 Trait 解析：标准库中的常用 Trait 应该怎么用？](https://time.geekbang.org/column/article/724942?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search)&quot;">​</a></h3><h4 id="思考题-10" tabindex="-1">思考题 <a class="header-anchor" href="#思考题-10" aria-label="Permalink to &quot;思考题&quot;">​</a></h4><p>请举例说明 Deref 与 AsRef  的区别。</p><h4 id="答案-10" tabindex="-1">答案 <a class="header-anchor" href="#答案-10" aria-label="Permalink to &quot;答案&quot;">​</a></h4><p>在 Rust 中，Deref 和 AsRef 都是与引用相关的 trait，它们可以使某些类型在使用时具有类似于指针的行为，但它们的具体用途有所不同。</p><p><strong>Deref trait 通常与智能指针一起使用</strong>。当我们编写 Rust 代码时，分配在堆上的值通常不是通过拷贝的方式传递或返回，而是通过使用指向它们的指针（智能指针）来传递或返回。Deref trait 可以强制将智能指针转换成指针，从而可以使用类似于 * 操作符这样的解引用语法访问指针指向的值。例如：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> MyInt</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Deref</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> MyInt</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    type</span><span style="color:#E5C07B;"> Target</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> i32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> deref</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) -&gt; &amp;</span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Target</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        &amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> my_int</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> MyInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    assert_eq!</span><span style="color:#ABB2BF;">(*</span><span style="color:#E06C75;">my_int</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在上面的代码中，我们定义了一个 <code>MyInt</code> 结构体，它包含一个 i32 类型的值。我们实现了 Deref trait，并指定了目标类型为 i32。我们在 <code>deref</code> 方法中返回了 <code>self.0</code>，即指向 <code>MyInt</code> 中的 i32 值的引用。这样，我们就可以在 <code>main</code> 函数中使用 <code>*my_int</code> 访问这个 i32 值。</p><p>相比之下， <strong>AsRef trait 更加通用</strong>。它只是将类型的引用转换为其他类型的引用。一种常见的用途是将各种字符串类型统一转换为&amp;str 类型。例如：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> do_something</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AsRef</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">&gt;&gt;(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> bytes</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_ref</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">as_bytes</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // Do something with the bytes...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> my_str</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;hello&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">    do_something</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">my_str</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在上面的代码中，我们定义了一个 <code>do_something</code> 函数，它接受任何实现了 <code>AsRef&lt;str&gt;</code> trait 的值。在函数内部，我们首先使用 <code>as_ref</code> 方法将输入值转换为 <code>&amp;str</code> 类型，然后使用 <code>as_bytes</code> 方法将 <code>&amp;str</code> 类型转换为 <code>&amp;[u8]</code> 类型。这样，我们就可以在函数中使用字节数组操作 <code>bytes</code> 了。在 <code>main</code> 函数中，我们传递了一个所有权字符串，它在函数中，使用 as_ref() 转换成了 <code>&amp;str</code> 类型。</p><p>好了，以上就是我们第一章基础篇的思考题与答案，希望你对照着答案看一下自己的思路对不对，如果你有不同的见解，也欢迎你在评论区分享出来，我们一起讨论。我们下节课再见！</p>`,102)]))}const u=a(p,[["render",o]]);export{y as __pageData,u as default};
