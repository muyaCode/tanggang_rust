import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D2WelYEY.js";const o="/tanggang_rust/assets/8648455e46194dc0d9d1828d304364e1.RBPKEfno.png",e="/tanggang_rust/assets/2d374c92df13c23394c1d18835ae53bc.DkkIJt3D.png",t="/tanggang_rust/assets/8414fb520b8a8b63f45cf9dyya221ecb.DEiTfaCg.png",r="/tanggang_rust/assets/1yy39ee412661fca7c8bdb8a4c5f89d7.Bgcq0Yxo.png",c="/tanggang_rust/assets/c165807a7b9c109f928a64fdb2ae4yy9.DG5UWSL2.png",B="/tanggang_rust/assets/823ab4dd841a844b0247be8cecf7ff29.B32uAgHk.png",y="/tanggang_rust/assets/fd0af99a9a7ce1814947fa2240a015d6.BKpMofRZ.jpg",m=JSON.parse('{"title":"22 ｜ Web 开发（下）：如何实现一个 Todo List 应用？","description":"","frontmatter":{},"headers":[],"relativePath":"Document/22｜Web开发（下）：如何实现一个TodoList应用？.md","filePath":"Document/22｜Web开发（下）：如何实现一个TodoList应用？.md","lastUpdated":1740766764000}'),i={name:"Document/22｜Web开发（下）：如何实现一个TodoList应用？.md"};function A(u,s,F,C,b,d){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_22-web-开发-下-如何实现一个-todo-list-应用" tabindex="-1">22 ｜ Web 开发（下）：如何实现一个 Todo List 应用？ <a class="header-anchor" href="#_22-web-开发-下-如何实现一个-todo-list-应用" aria-label="Permalink to &quot;22 ｜ Web 开发（下）：如何实现一个 Todo List 应用？&quot;">​</a></h1><p>你好，我是 Mike，今天我们继续讲如何使用 Axum 开发 Web 后端。学完这节课的内容后，你应该能使用 Axum 独立开发一个简单的 Web 后端应用了。</p><p>第 21 讲，我们已经讲到了第 4 步，处理 Get query 请求，拿到 query 中的参数。下面我们讲如何处理 Post 请求并拿到参数。</p><p>这节课的代码适用于 Axum v0.7 版本。</p><h2 id="基本步骤" tabindex="-1">基本步骤 <a class="header-anchor" href="#基本步骤" aria-label="Permalink to &quot;基本步骤&quot;">​</a></h2><h3 id="第五步-解析-post-请求参数" tabindex="-1">第五步：解析 Post 请求参数 <a class="header-anchor" href="#第五步-解析-post-请求参数" aria-label="Permalink to &quot;第五步：解析 Post 请求参数&quot;">​</a></h3><p>当我们想向服务端提交一些数据的时候，一般使用 HTTP POST 方法。Post 的数据会放在 HTTP 的 body 中，在 HTML 页面上，通常会使用表单 form 收集数据。</p><p>和前面的 Query 差不多，Axum 给我们提供了 Form 解包器，可以方便地取得 form 表单数据。你可以参考下面的示例。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Deserialize</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Input</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    email</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> accept_form</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Form</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Form</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#E5C07B;">Html</span><span style="color:#ABB2BF;">&lt;&amp;&#39;</span><span style="color:#E5C07B;">static</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    tracing</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">debug!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;form params {:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    Html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&lt;h3&gt;Form posted&lt;/h3&gt;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以看到，相比于前面的 Query 示例，form 示例代码结构完全一致，只是解包器由 Query 换成了 Form。这体现了 Axum 具有相当良好的人体工程学，让我们非常省力。</p><p>我们这里在结构体上 derive 了 Deserialize，它是 serde 库提供的反序列化宏。serde 库是 Rust 生态中用得最广泛的序列化和反序列化框架。</p><p>要测试 Post 请求，你需要安装一个浏览器插件，比如 Postman，它可以让你在浏览器中方便地构建一个 Form 格式的 Post 请求。</p><p>完整代码示例在 <a href="https://github.com/miketang84/jikeshijian/tree/master/2122-axumapp_stepbystep/axumapp05_form" target="_blank" rel="noreferrer">这里</a>，这个示例运行后，访问 <code>http://127.0.0.1:3000/form</code>，会出现一个表单。</p><p><img src="`+o+`" alt="1.00"></p><p>在表单中填入数据后，可以观察到日志输出像下面这个样子：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">33.</span><span style="color:#ABB2BF;">520071Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> axumapp05</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">listening</span><span style="color:#E06C75;"> on</span><span style="color:#D19A66;"> 127.0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">3000</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">33.</span><span style="color:#ABB2BF;">720071Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/ </span><span style="color:#E06C75;">version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_request</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">started</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">33.</span><span style="color:#ABB2BF;">720274Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/ </span><span style="color:#E06C75;">version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_response</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">finished</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span><span style="color:#E06C75;"> latency</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> ms</span><span style="color:#E06C75;"> status</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">200</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">33.</span><span style="color:#ABB2BF;">833684Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">favicon</span><span style="color:#ABB2BF;">.ico </span><span style="color:#E06C75;">version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_request</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">started</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">08</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">33.</span><span style="color:#ABB2BF;">833779Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">favicon</span><span style="color:#ABB2BF;">.ico </span><span style="color:#E06C75;">version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_response</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">finished</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span><span style="color:#E06C75;"> latency</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> ms</span><span style="color:#E06C75;"> status</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">404</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">09</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">09.</span><span style="color:#ABB2BF;">309848Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">form</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_request</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">started</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">09</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">09.</span><span style="color:#ABB2BF;">309975Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">form</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_response</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">finished</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span><span style="color:#E06C75;"> latency</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> ms</span><span style="color:#E06C75;"> status</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">200</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">09</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">13.</span><span style="color:#ABB2BF;">964549Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">POST</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">form</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_request</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">started</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">09</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">13.</span><span style="color:#ABB2BF;">964713Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">POST</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">form</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E06C75;">axumapp05</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">form</span><span style="color:#E06C75;"> params</span><span style="color:#E5C07B;"> Input</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;111&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">email</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;2222&quot;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">09</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">13.</span><span style="color:#ABB2BF;">964796Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">POST</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">form</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_response</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">finished</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span><span style="color:#E06C75;"> latency</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> ms</span><span style="color:#E06C75;"> status</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">200</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>我们可以看到，在日志的第 9 行 form 表单的数据已经解析出来了。</p><p>下一步我们研究如何处理传上来的 Json 格式的请求。</p><h3 id="第六步-解析-json-请求参数" tabindex="-1">第六步：解析 Json 请求参数 <a class="header-anchor" href="#第六步-解析-json-请求参数" aria-label="Permalink to &quot;第六步：解析 Json 请求参数&quot;">​</a></h3><p>在现代 Web 开发中，发 POST 请求更多的时候是提交 Json 数据，这时 HTTP 请求的 content-type 是 application/json。这种情况 Axum 应该怎么处理呢？</p><p>还是一样的，非常简单。Axum 提供了解包器 Json，只需要把参数解包器修改一下就可以了，解析后的类型都不用变。你可以看一下修改后的代码。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Deserialize</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Input</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    email</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> accept_json</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#E5C07B;">Html</span><span style="color:#ABB2BF;">&lt;&amp;&#39;</span><span style="color:#E5C07B;">static</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    tracing</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">debug!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;json params {:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    Html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&lt;h3&gt;Json posted&lt;/h3&gt;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>完整代码示例在 <a href="https://github.com/miketang84/jikeshijian/tree/master/2122-axumapp_stepbystep/axumapp06_jsoninput" target="_blank" rel="noreferrer">这里</a>。这种 Post 请求在浏览器 URL 地址栏里面就不太好测试了。最好安装 Postman 等工具来测试。我用的 Postwoman 插件操作界面如下：</p><p><img src="`+e+`" alt="1.00"></p><p>控制台 log 输出为：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">02.</span><span style="color:#ABB2BF;">093884Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> axumapp06</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">listening</span><span style="color:#E06C75;"> on</span><span style="color:#D19A66;"> 127.0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">3000</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">07.</span><span style="color:#ABB2BF;">665064Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">POST</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">json</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_request</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">started</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">07.</span><span style="color:#ABB2BF;">665244Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">POST</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">json</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E06C75;">axumapp06</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">json</span><span style="color:#E06C75;"> params</span><span style="color:#E5C07B;"> Input</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;mike&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">email</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;mike@jksj.com&quot;</span><span style="color:#ABB2BF;"> }</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T07:</span><span style="color:#D19A66;">37</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">07.</span><span style="color:#ABB2BF;">665309Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">POST</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">json</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_response</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">finished</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span><span style="color:#E06C75;"> latency</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> ms</span><span style="color:#E06C75;"> status</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">200</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可以看到，我们成功解析出了 json 参数，并转换成了 Rust 结构体。</p><p>截止目前，我们接触到了三个解包器：Query、Form、Json。Axum 还内置很多高级解包器，感兴趣的话你可以点击这个 <a href="https://docs.rs/axum/latest/axum/extract/index.html" target="_blank" rel="noreferrer">链接</a> 了解一下。</p><h3 id="解析出错了怎么办" tabindex="-1">解析出错了怎么办？ <a class="header-anchor" href="#解析出错了怎么办" aria-label="Permalink to &quot;解析出错了怎么办？&quot;">​</a></h3><p>这里我们先暂停一下，回头想想。Axum 帮我们自动做了参数的解析，这点固然很好、很方便。但是，如果参数没有解析成功，Axum 就会自动返回一些信息，而这些信息我们根本没有接触到，好像也不能控制，这就一点也不灵活了。</p><p>Axum 的设计者其实考虑到了这个问题，也提供了相应的解决方案——Rejection。只需要在写解包器的时候，把参数类型改成使用 Result 包起来，Result 的错误类型为相应的解包器对应的 Rejection 类型就行了。比如 Json 解包器就对应 JsonRejection，Form 解包器就对应 FormRejection。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> create_user</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Value</span><span style="color:#ABB2BF;">&gt;, </span><span style="color:#E5C07B;">JsonRejection</span><span style="color:#ABB2BF;">&gt;) {</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>用这种方式，我们能获得解析被驳回的详细错误原因，还可以根据这些原因来具体处理。比如我们可以返回自定义的错误信息模板。</p><p>比如：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> axum</span><span style="color:#ABB2BF;">::{</span></span>
<span class="line"><span style="color:#E5C07B;">    extract</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">rejection</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">JsonRejection</span><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#E5C07B;">    routing</span><span style="color:#ABB2BF;">::post,</span></span>
<span class="line"><span style="color:#E5C07B;">    Router</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> serde_json</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> create_user</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Value</span><span style="color:#ABB2BF;">&gt;, </span><span style="color:#E5C07B;">JsonRejection</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> payload</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">payload</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // We got a valid JSON payload</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JsonRejection</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">MissingJsonContentType</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">)) =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Request didn&#39;t have \`Content-Type: application/json\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // header</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JsonRejection</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">JsonDataError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">)) =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Couldn&#39;t deserialize the body into the target type</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JsonRejection</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">JsonSyntaxError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">)) =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Syntax error in the body</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JsonRejection</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">BytesRejection</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">)) =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // Failed to extract the request body</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // \`JsonRejection\` is marked \`#[non_exhaustive]\` so match must</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // include a catch-all case.</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Router</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/users&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">create_user</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>更多详细的 Rejection 的信息，请参考 <a href="https://docs.rs/axum/latest/axum/extract/rejection/index.html" target="_blank" rel="noreferrer">这里</a>。</p><h3 id="自定义-extractor" tabindex="-1">自定义 Extractor <a class="header-anchor" href="#自定义-extractor" aria-label="Permalink to &quot;自定义 Extractor&quot;">​</a></h3><p>当然，面对业务的千变万化，Axum 还给了我们自定义解包器的能力。平时用得不多，但必要的时候你不会感觉被限制住。</p><p>这方面的内容属于扩展内容，有兴趣的话你可以自己研究一下。请参考 <a href="https://docs.rs/axum/latest/axum/extract/index.html#defining-custom-extractors" target="_blank" rel="noreferrer">这里</a>。</p><h3 id="第七步-handler-返回值" tabindex="-1">第七步：Handler 返回值 <a class="header-anchor" href="#第七步-handler-返回值" aria-label="Permalink to &quot;第七步：Handler 返回值&quot;">​</a></h3><p>Axum handler 的返回类型也很灵活。除了前面例子里提到的 HTML 类型的返回之外，常见的还有 String、Json、Redirect 等类型。实际上，只要实现了 IntoResponse 这个 trait 的类型，都能用作 handler 的返回值。Axum 会根据返回值的类型，对 Http Response 的 status code 和 header 等进行自动配置，减少了开发者对细节的处理。</p><p>比如返回一个 HTML：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> query</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">InputParams</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> IntoResponse</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    Html</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&lt;h3&gt;Test json&lt;/h3&gt;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>返回一个 String：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> query</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">InputParams</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> IntoResponse</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">    &quot;Hello, world&quot;</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>返回一个 Json：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> query</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">InputParams</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> IntoResponse</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ajson</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ...;</span></span>
<span class="line"><span style="color:#61AFEF;">    Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ajson</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>从上面代码中可以看到，在 Axum 里 Json 既是解包器，又可以用在 response 里面。</p><p>在 Rust 中，借助 serde_json 提供的 json!宏，你可以像下面这样方便地构造 Json 对象：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> accept_json</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> IntoResponse</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    tracing</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">debug!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;json params {:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    Json</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">json!</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#98C379;">        &quot;result&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ok&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">        &quot;number&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    }))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>你还可以返回一个 Redirect，自动重定向页面。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> query</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">InputParams</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> IntoResponse</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Redirect</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">to</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>你甚至可以返回一个 <code>(StatusCode, String)</code>。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> query</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">InputParams</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> IntoResponse</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    (</span><span style="color:#E5C07B;">StatusCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Ok</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Hello, world!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以看到，形式变化多端，非常灵活。至于你可以返回哪些形式，可以在 <a href="https://docs.rs/axum/latest/axum/response/trait.IntoResponse.html#foreign-impls" target="_blank" rel="noreferrer">这里</a> 看到。</p><p>注意，如果一个 handler 里需要返回两个或多个不同的类型，那么需要调用 .into_response() 转换一下。这里你可以回顾一下 <a href="https://time.geekbang.org/column/article/726207" target="_blank" rel="noreferrer">第 14 讲</a> 的知识点：impl trait 这种在函数中的写法，本质上仍然是编译期单态化，每次编译都会替换成一个具体的类型。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> query</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">InputParams</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> IntoResponse</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> some_flag</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> ajson</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ...;</span></span>
<span class="line"><span style="color:#61AFEF;">        Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ajson</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">into_response</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Redirect</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">to</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">into_response</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>有没有感觉到一丝丝震撼。Rust 虽然是强类型语言，但是感觉 Axum 把它玩出了弱（动态）类型语言的效果。这固然是 Axum 的优秀之处，不过主要还是 Rust 太牛了。</p><p>关于返回 Json 的完整示例，请参考 <a href="https://github.com/miketang84/jikeshijian/tree/master/2122-axumapp_stepbystep/axumapp07_jsonres" target="_blank" rel="noreferrer">这里</a>。</p><p>测试效果图：</p><p><img src="`+t+`" alt="1.00"></p><h3 id="第八步-全局-404-fallback" tabindex="-1">第八步：全局 404 Fallback <a class="header-anchor" href="#第八步-全局-404-fallback" aria-label="Permalink to &quot;第八步：全局 404 Fallback&quot;">​</a></h3><p>有时，我们希望给全局的 Router 添加一个统一的 404 自定义页面，这在 Axum 中很简单，只需要一句话，像下面这样：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Router</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/query&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/form&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">show_form</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">accept_form</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/json&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">accept_json</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fallback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">handler_404</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面第 7 行就给没有匹配到任何一个 url pattern 的情况配置了一个 fallback，给了一个 404 handler，你自行在那个 handler 里面写你的处理逻辑就好了，比如直接返回一个 404 页面。</p><p>完整代码示例在 <a href="https://github.com/miketang84/jikeshijian/tree/master/2122-axumapp_stepbystep/axumapp08_global404" target="_blank" rel="noreferrer">这里</a>。</p><h3 id="第九步-模板渲染" tabindex="-1">第九步：模板渲染 <a class="header-anchor" href="#第九步-模板渲染" aria-label="Permalink to &quot;第九步：模板渲染&quot;">​</a></h3><p>这里的模板渲染指服务端渲染，一般是在服务端渲染 HTML 页面。在 Rust 生态中有非常多的模板渲染库。常见的有 Askama、Terra 等。这里我们以 Askama 为例来介绍一下。</p><p>Askama 是一种 Jinja-like 语法的模板渲染引擎，支持使用 Rust 语言在模板中写逻辑。作为模板渲染库，它很有 Rust 的味道， <strong>通过类型来保证写出的模板是正确的</strong>。如果模板中有任何非逻辑错误，在编译的时候就能发现问题。带来的直接效果就是，可以节约开发者大量调试页面模板的时间。凡是使用过的人，都体会到了其中的便利。</p><p>先引入 askama。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">cargo</span><span style="color:#E06C75;"> add</span><span style="color:#E06C75;"> askama</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用的时候，也很简单，你可以参考下面的代码示例。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Template</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#ABB2BF;">#[template(path </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;hello.html&quot;</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> HelloTemplate</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> greet</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Path</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Path</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> IntoResponse</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    HelloTemplate</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> } .</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>模板中使用的是 Jinja 语法，这是一种很常见的模板语法，如果不了解的可查阅 <a href="https://docs.jinkan.org/docs/jinja2/" target="_blank" rel="noreferrer">相关资料</a>。Askama 的完整文档，请参考 <a href="https://djc.github.io/askama/askama.html" target="_blank" rel="noreferrer">链接</a></p><p>本小节完整可运行示例，请参考 <a href="https://github.com/miketang84/jikeshijian/tree/master/2122-axumapp_stepbystep/axumapp09_template" target="_blank" rel="noreferrer">这里</a>。</p><p>运行效果：</p><p><img src="`+r+`" alt="1.00"></p><h3 id="第十步-使用连接池连接-postgresql-db" tabindex="-1">第十步：使用连接池连接 PostgreSQL DB <a class="header-anchor" href="#第十步-使用连接池连接-postgresql-db" aria-label="Permalink to &quot;第十步：使用连接池连接 PostgreSQL DB&quot;">​</a></h3><p>一个真正的互联网应用大部分情况下都会用数据库来存储数据。因此，操作数据库是最常见的需求，而 Axum 就内置了这方面的支持。下面我们用 Postgres 来举例。</p><p>一般来讲，我们会定义一个全局应用状态，把所有需要全局共享的信息放进去。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> AppState</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>全局状态能够被所有 handler、中间件 layer 访问到，是一种非常有效的设计模式。</p><p>在下面示例中，我们用 Pool::builder()创建一个连接池对象，并传送到 AppState 的实例里。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> manager</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> PostgresConnectionManager</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new_from_stringlike</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#98C379;">        &quot;host=localhost user=postgres dbname=postgres password=123456&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">        NoTls</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    )</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> pool</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Pool</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">builder</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">manager</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> app_state</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> AppState</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">dbpool</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">pool</span><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>再使用 router 的 .with_state() 方法就可以把这个全局状态传递到每一个 handler 和中间件里了。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">with_state</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app_state</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>另一方面，在 handler 中使用 State 解包器来解出 app_state 。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> handler</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">    State</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">app_state</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">AppState</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // use \`app_state\`...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这里，取出来的这个 app_state 就是前面创建的 AppState 的实例，在 handler 里直接使用就可以了。</p><p>当然除了上面的这些知识，你还需要在本地环境安装 PostgreSQL，或使用 Docker Compose 之类的工具快速构建依赖环境。这个步骤的完整可运行的代码在 <a href="https://github.com/miketang84/jikeshijian/tree/master/2122-axumapp_stepbystep/axumapp10_db" target="_blank" rel="noreferrer">这里</a>，你可以在安装好 PostgreSQL 数据库后，设置好数据库的密码等配置，编译此代码连上去测试。</p><p>在 Ubuntu/Debian 下，安装配置 PostgreSQL 可能用到的指令有下面这几种。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">sudo</span><span style="color:#E06C75;"> apt</span><span style="color:#E06C75;"> install</span><span style="color:#E06C75;"> postgresql</span></span>
<span class="line"><span style="color:#E06C75;">sudo</span><span style="color:#E06C75;"> su</span><span style="color:#E06C75;"> postgres</span></span>
<span class="line"><span style="color:#E06C75;">psql</span></span>
<span class="line"><span style="color:#E06C75;">postgres</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"># </span><span style="color:#D19A66;">ALTER</span><span style="color:#D19A66;"> USER</span><span style="color:#E06C75;"> postgres</span><span style="color:#D19A66;"> WITH</span><span style="color:#D19A66;"> PASSWORD</span><span style="color:#98C379;"> &#39;123456&#39;</span><span style="color:#ABB2BF;">; # 配置默认用户密码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>测试界面：</p><p><img src="`+c+`" alt="1.00"></p><p>这个示例输出 log 类似如下：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T09:</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">41.</span><span style="color:#ABB2BF;">919226Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> axumapp10</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">listening</span><span style="color:#E06C75;"> on</span><span style="color:#D19A66;"> 127.0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">3000</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T09:</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">50.</span><span style="color:#ABB2BF;">224031Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">query_from_db</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_request</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">started</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T09:</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">50.</span><span style="color:#ABB2BF;">224099Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">query_from_db</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E06C75;">axumapp10</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">get</span><span style="color:#E06C75;"> db</span><span style="color:#E06C75;"> conn</span><span style="color:#61AFEF;"> Pool</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">PoolInner</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0x557c6994ed80</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T09:</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">50.</span><span style="color:#ABB2BF;">255306Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">query_from_db</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E06C75;">axumapp10</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">query_from_db</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T09:</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">50.</span><span style="color:#ABB2BF;">256060Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">query_from_db</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E06C75;">axumapp10</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">query_from_db</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T09:</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">50.</span><span style="color:#ABB2BF;">256109Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">query_from_db</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E06C75;">axumapp10</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">query_from_db</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T09:</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">50.</span><span style="color:#ABB2BF;">256134Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">query_from_db</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E06C75;">axumapp10</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">calc_result</span><span style="color:#D19A66;"> 2</span></span>
<span class="line"><span style="color:#D19A66;">2023</span><span style="color:#ABB2BF;">-</span><span style="color:#D19A66;">12</span><span style="color:#ABB2BF;">-11T09:</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">50.</span><span style="color:#ABB2BF;">256218Z </span><span style="color:#D19A66;">DEBUG</span><span style="color:#E06C75;"> request</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">GET</span><span style="color:#E06C75;"> uri</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">query_from_db</span><span style="color:#E06C75;"> version</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">HTTP</span><span style="color:#ABB2BF;">/</span><span style="color:#D19A66;">1.1</span><span style="color:#ABB2BF;">}: </span><span style="color:#E5C07B;">tower_http</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">trace</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">on_response</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">finished</span><span style="color:#E06C75;"> processing</span><span style="color:#E06C75;"> request</span><span style="color:#E06C75;"> latency</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">32</span><span style="color:#E06C75;"> ms</span><span style="color:#E06C75;"> status</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">200</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>跟我们预期一致，说明成功连上了数据库。</p><p>下面，我们通过一个综合示例，把这些工作整合起来，构建一个 Todo List 应用的后端服务。</p><h2 id="综合示例-实现一个-todo-list-应用" tabindex="-1">综合示例：实现一个 Todo List 应用 <a class="header-anchor" href="#综合示例-实现一个-todo-list-应用" aria-label="Permalink to &quot;综合示例：实现一个 Todo List 应用&quot;">​</a></h2><p>TodoList 是最常见的 Web 应用示例，相当于前后端分离型 Web 应用领域中的 Helloworld。一般说来，我们要做一个简单的互联网应用，最基本的步骤有下面几个：</p><ol><li>设计准备 db schema。</li><li>对应 db schema 生成对应的 Rust model types。</li><li>规划 Router，加入需要的 http endpoints。</li><li>规划 handlers。</li><li>规划前后端数据交互方式，是用 form 格式还是 json 格式前后端交互数据，或者是否统一使用 Graphql 进行 query 和 mutation。</li><li>代码实现。</li><li>测试。</li></ol><p>下面我们就按照这个流程一步步来实现。</p><h3 id="第一步-建立模型" tabindex="-1">第一步：建立模型 <a class="header-anchor" href="#第一步-建立模型" aria-label="Permalink to &quot;第一步：建立模型&quot;">​</a></h3><p>这一步需要你对 sql 数据库的基本操作有一些了解。这里我们要创建数据库和表。</p><p>创建数据库：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">create</span><span style="color:#E06C75;"> database</span><span style="color:#E06C75;"> todolist</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 psql 中 使用 <code>\\c todolist</code> 连上刚创建的 todolist 数据库，然后创建表。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">create</span><span style="color:#E06C75;"> table</span><span style="color:#E06C75;"> todo</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#E06C75;">   id</span><span style="color:#E06C75;"> varchar</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   description</span><span style="color:#E06C75;"> varchar</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> null</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">   completed</span><span style="color:#E5C07B;"> bool</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> null</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后在 psql 中使用 <code>\\d</code> 指令查看已经创建好的 table。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">todolist</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"># \\</span><span style="color:#E06C75;">d</span></span>
<span class="line"><span style="color:#E5C07B;">        List</span><span style="color:#E06C75;"> of</span><span style="color:#E06C75;"> relations</span></span>
<span class="line"><span style="color:#E5C07B;"> Schema</span><span style="color:#56B6C2;"> |</span><span style="color:#E5C07B;"> Name</span><span style="color:#56B6C2;"> |</span><span style="color:#E5C07B;"> Type</span><span style="color:#56B6C2;">  |</span><span style="color:#E5C07B;">  Owner</span></span>
<span class="line"><span style="color:#ABB2BF;">--------+------+-------+----------</span></span>
<span class="line"><span style="color:#E06C75;"> public</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> todo</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> table</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;"> postgres</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;"> row</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果你对 SQL 还不太熟悉，这里有一个简单的教程可供参考： <a href="https://www.runoob.com/postgresql/postgresql-tutorial.html" target="_blank" rel="noreferrer">PostgreSQL 教程 | 菜鸟教程 (runoob.com)</a></p><h3 id="第二步-创建对应的-rust-struct" tabindex="-1">第二步：创建对应的 Rust Struct <a class="header-anchor" href="#第二步-创建对应的-rust-struct" aria-label="Permalink to &quot;第二步：创建对应的 Rust Struct&quot;">​</a></h3><p>对应上面创建的 todo table，我们设计出如下结构体类型：</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Serialize</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Clone</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Todo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    description</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    completed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="第三步-规划-router" tabindex="-1">第三步：规划 Router <a class="header-anchor" href="#第三步-规划-router" aria-label="Permalink to &quot;第三步：规划 Router&quot;">​</a></h3><p>Todolist 会有增删改查的操作，也就是 4 个基本的 url endpoints。另外，需要将数据库连接的全局状态传到各个 handler 中。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> app</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Router</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/todos&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todos_list</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/todo/new&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todo_create</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/todo/update&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todo_update</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/todo/delete/:id&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">todo_delete</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">with_state</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pool</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们在这里添加了 4 个 URL，分别对应 query list、create、update、delete 四种操作。</p><h3 id="第四步-设计业务对应的-handler" tabindex="-1">第四步：设计业务对应的 handler <a class="header-anchor" href="#第四步-设计业务对应的-handler" aria-label="Permalink to &quot;第四步：设计业务对应的 handler&quot;">​</a></h3><p>一个标准的 Todo List 的后端服务，只需要对 Todo 模型做基本的增删改查就可以了。</p><ol><li>create 创建一个 Todo item。</li><li>update 更新一个 Todo item。</li><li>delete 删除一个 Todo item。</li><li>query list，加载一个 Todo item list。在这个 TodoList 应用里，我们不需要对一个具体的 item 做 query。</li></ol><p>于是对应的，我们会有 4 个 handlers。我们先把框架写出来。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> todo_create</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">    State</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pool</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#61AFEF;">    Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">CreateTodo</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;(</span><span style="color:#E5C07B;">StatusCode</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">&gt;), (</span><span style="color:#E5C07B;">StatusCode</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">)&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> todo_update</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">    State</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pool</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#61AFEF;">    Json</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">utodo</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">UpdateTodo</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;(</span><span style="color:#E5C07B;">StatusCode</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;), (</span><span style="color:#E5C07B;">StatusCode</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">)&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> todo_delete</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">    Path</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">Path</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#61AFEF;">    State</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pool</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;(</span><span style="color:#E5C07B;">StatusCode</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;), (</span><span style="color:#E5C07B;">StatusCode</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">)&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> todos_list</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">    pagination</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Option</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Pagination</span><span style="color:#ABB2BF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#61AFEF;">    State</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pool</span><span style="color:#ABB2BF;">): </span><span style="color:#E5C07B;">State</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">ConnectionPool</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Json</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Todo</span><span style="color:#ABB2BF;">&gt;&gt;, (</span><span style="color:#E5C07B;">StatusCode</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">)&gt; {</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上面我们设计好了 4 个 handler 的函数签名，这就相当于我们写了书的目录，后面要完成哪些东西就能心中有数了。函数签名里有一些信息还需要补充，比如 HTTP 请求上来后的入参类型。</p><p>下面定义了创建新 item 和更新 item 的入参 DTO（data transform object），用来在 Axum 里把 Http Request 的参数信息直接转化成 Rust 的 struct 类型。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Deserialize</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> CreateTodo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    description</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Deserialize</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> UpdateTodo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    description</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Option</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;">    completed</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Option</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>有了这些类型，Axum 会自动为我们做转换工作，我们在 handler 中拿到这些类型的实例，就可以直接写业务了。</p><h3 id="第五步-规划前后端的数据交互方式" tabindex="-1">第五步：规划前后端的数据交互方式 <a class="header-anchor" href="#第五步-规划前后端的数据交互方式" aria-label="Permalink to &quot;第五步：规划前后端的数据交互方式&quot;">​</a></h3><p>这一步需要做 4 件事情。</p><ul><li>query 参数放在 URL 里面，用 GET 指令提交。</li><li>delete 操作的参数放在 path 里面，用 /todo/delete/:id 这种形式表达。</li><li>create 和 update 参数是放在 body 里面，用 POST 指令提交，用 json 格式上传。</li><li>从服务端返回给前端的数据都是以 json 格式返回。</li></ul><p>这一步定义好了，就可以重新审视一下 4 个 handler 的函数签名，看是否符合我们的要求。</p><h3 id="第六步-代码实现" tabindex="-1">第六步：代码实现 <a class="header-anchor" href="#第六步-代码实现" aria-label="Permalink to &quot;第六步：代码实现&quot;">​</a></h3><p>前面那些步骤设计规划好后，实现代码就是一件非常轻松的事情了。基本上就是按照 Axum 的要求，写出相应的部分就行了。</p><p>你可以看一下完整可运行的 <a href="https://github.com/miketang84/jikeshijian/tree/master/2122-axumapp_stepbystep/axumapp11_todo" target="_blank" rel="noreferrer">示例</a>。在示例里，我们使用了 bb8 这个数据库连接池来连接 pg 数据库。这样我们就不需要去担心连接断开、重连这些底层的琐事了。</p><h3 id="第七步-测试" tabindex="-1">第七步：测试 <a class="header-anchor" href="#第七步-测试" aria-label="Permalink to &quot;第七步：测试&quot;">​</a></h3><p>一般，测试后端服务有几种方式：</p><ol><li>框架的单元和集成测试方法，不同的框架有不同的实现和使用方式，Axum 里也有配套的设施。</li><li>Curl 命令行脚本测试。</li><li>Web 浏览器插件工具测试。</li></ol><p>三种方式并不冲突，是相互补充的。第 3 种方式常见的有 Postman 这种浏览器插件，它们可以很方便地帮我们对 Web 应用进行测试。</p><p>测试创建一个 Item：</p><p><img src="`+B+`" alt="1.00"></p><p>我们也可以多创建几个。</p><p>以下是创建了 5 个 item 的 list 返回，通过 Get 方法访问 <code>http://127.0.0.1:3000/todos</code>。</p><div class="language-Rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;77de4aa746c74eb19b8bf451eab6fbf3&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello, item 1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&quot;completed&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;3c158df02c724695ac67d4cbff180717&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello, item 2&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&quot;completed&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;0c687f7b4d4442dc9c3381cc4d0e4a1d&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello, item 3&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&quot;completed&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;df0bb07aa0f84696896ad86d8f13a61c&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello, item 4&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&quot;completed&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#98C379;">&quot;id&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;3ec8f48f5fd34cf9afa299427066ef35&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&quot;description&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;hello, item 5&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">&quot;completed&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>其他的更新和删除操作，你可以自己动手测试一下。</p><p>你阅读代码时，有 3 个地方需要注意：</p><ol><li>注意参数传入中的可省参数 Option 的处理。</li><li>handler 的返回值用的 Result，请注意业务处理过程中的错误转换。</li><li>pg db 的操作，因为我们没有使用 ORM 这种东西，因此纯靠手动拼 sql 字符串，并且手动转换从 pg db 返回的 row 值的类型。这比较原始，也比较容易出错。但是对于我们学习来讲，是有好处的。后面你做 Web 应用的时候，可以选择一个 ORM，Rust 生态中比较出名的有 sqlx、SeaORM、Rbatis 等。</li></ol><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这节课我们学会了如何使用 Axum 进行 Web 后端开发。Web 开发本身是一个庞大的领域，要精通需要花费大量的时间。我通过两节课的时间，抽出了里面的思路和重要步骤，快速带你体验了如何实现一个 todolist app。</p><p>这节课我们贯彻了循序渐进的学习方式。先对大目标进行分解，了解要完成一个目标之前，需要掌握多少基础的知识点。然后，就一点一点去掌握好，理解透。这样一步一步把积木搭上来，实际也花不了多少时间。这实际是一种似慢实快的方法。在 Rust 中，这种方法比那种先总体瞟一眼教程，直接动手做开发，不清楚的地方再去查阅相关资料的方式，效果要好一些，并且会扎实很多。</p><p>Axum 是一个相当强大灵活的框架，里面还有很多东西（比如：如何写一个中间件，自定义 extractor，如何处理流文件上传等）值得你去探索。好在，我们已经掌握了 Axum 的基本使用方法了，Web 开发的特点让我们可以小步快跑，一点一点加功能，能立即看到效果。只要肯花时间，这些都不是问题。</p><p><img src="`+y+'" alt="1.00"></p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>当 Axum Handler 中有多个参数的时候，你可以试着改变一下参数的顺序，看看效果有没有变化。并在这个基础上说一说你对 <a href="https://docs.rs/axum/latest/axum/index.html#high-level-features" target="_blank" rel="noreferrer">声明式参数</a> 概念的理解。</p><p>请你展开聊一聊，欢迎你留言和我分享、讨论，也欢迎你把这节课的内容分享给其他朋友，邀他一起学习，我们下节课再见！</p>',154)]))}const D=n(i,[["render",A]]);export{m as __pageData,D as default};
