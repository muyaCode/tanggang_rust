import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D2WelYEY.js";const e="/tanggang_rust/assets/8b2071ac10d130561aff84ccaaf600b6.CZ-JBcZH.jpg",o="/tanggang_rust/assets/yyf79d21925f6787ab176cab1f853078.CiOVA5zQ.jpg",r="/tanggang_rust/assets/4071478ceeea97857b4ce155d5d5dc2d.DdxesbCm.png",c="/tanggang_rust/assets/5378d9ae31aa7b4db568dbf4983c621e.BzOrB43W.png",t="/tanggang_rust/assets/010cdb4abb3239ced41f6750ebd1954d.ZOI82ciP.png",B="/tanggang_rust/assets/38e680225d339594bf280af4830564e7.D6EqBv6o.png",y="/tanggang_rust/assets/eea91bfc1a4a308deea67f06fe4a0c97.DLiuAWHY.png",i="/tanggang_rust/assets/6b5d9639cc9dfeff05f3724fb39d369e.DozJjWWS.png",F="/tanggang_rust/assets/7bd5b3534a7b1a647380c76612b0cd57.C8KT_QUS.png",A="/tanggang_rust/assets/9ef4345a3ca89a281ca25b264ebdc942.Davs3sgx.png",b="/tanggang_rust/assets/d9c2ee5655cf634f05905964101d04b1.CT28O4Rz.png",m="/tanggang_rust/assets/48df50e0837a2080002b8bc343411865.D2deRISn.png",u="/tanggang_rust/assets/a4384058d0dfc46c3386c827bd7af652.7qUiIBh_.png",C="/tanggang_rust/assets/7f1b8ca4a2fd813a880363fcc78b6667.bk7tY1qF.png",E="/tanggang_rust/assets/5cfe1952919841131d5c1a1b8deddayy.CBmxJ1AU.jpg",S=JSON.parse('{"title":"27 ｜ Rust Bevy 游戏开发：用 300 行代码做一个贪吃蛇游戏","description":"","frontmatter":{},"headers":[],"relativePath":"Document/27｜RustBevy游戏开发：用300行代码做一个贪吃蛇游戏.md","filePath":"Document/27｜RustBevy游戏开发：用300行代码做一个贪吃蛇游戏.md","lastUpdated":1740766764000}'),d={name:"Document/27｜RustBevy游戏开发：用300行代码做一个贪吃蛇游戏.md"};function D(g,s,_,h,f,v){return p(),a("div",null,s[0]||(s[0]=[l('<h1 id="_27-rust-bevy-游戏开发-用-300-行代码做一个贪吃蛇游戏" tabindex="-1">27 ｜ Rust Bevy 游戏开发：用 300 行代码做一个贪吃蛇游戏 <a class="header-anchor" href="#_27-rust-bevy-游戏开发-用-300-行代码做一个贪吃蛇游戏" aria-label="Permalink to &quot;27 ｜ Rust Bevy 游戏开发：用 300 行代码做一个贪吃蛇游戏&quot;">​</a></h1><p>你好，我是 Mike。今天我们一起来学习 Rust 游戏编程技术。这节课我们会基于 Bevy 游戏框架来开发一个入门版的贪吃蛇游戏。</p><p>Rust 生态内目前已经有不少很不错的游戏开发框架，而 Bevy 是其中最热门的那一个，目前（2023 年 12 月）最新版本是 0.12，还处在积极开发的过程中。Bevy 框架和 Axum Web 框架、Slint 框架给人的感觉有点儿像，都很简单、优美、灵活。用 Bevy 框架写游戏非常惬意，已经有不少人在尝试使用 Bevy 开发自己的独立游戏，目前有三款（Molecoole、Tiny Glade、Roids）已经上架或即将上架 Steam。</p><p>用 Bevy 开发的游戏能够运行在 Windows、macOS、Linux, Web 浏览器等平台。</p><h2 id="bevy-框架" tabindex="-1">Bevy 框架 <a class="header-anchor" href="#bevy-框架" aria-label="Permalink to &quot;Bevy 框架&quot;">​</a></h2><p>Bevy 框架是一个数据驱动的游戏开发框架（引擎），其核心是一个 ECS。</p><h3 id="ecs" tabindex="-1">ECS <a class="header-anchor" href="#ecs" aria-label="Permalink to &quot;ECS&quot;">​</a></h3><p>ECS 是 Entity Component System 的缩写，意思是实体-组件-系统。它是一种编程范式，这种范式非常有趣，也非常有潜力，现在的主流游戏引擎都开始支持这种编程范式了。这种范式是与传统的 OOP（面向对象编程）范式相对的，跟 Rust 的 trait 的设计理念有一些相似之处。</p><p>我们用一个例子来说明 ECS 是怎样对问题进行建模的。假如现在有这样一幅画面：一个下午，在温暖的家里面，爸爸 D 正在边吃甜点边看书，妈妈 M 在边吃甜点边玩手机，儿子 S 在和狗狗 B 玩。你想一想，这个场景如果用 OOP 方式，应该如何建模呢？而用 ECS 范式可以这样建立模型：</p><p><img src="'+e+`" alt="图片"></p><p>Systems:</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">system1</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">dad_task</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&gt;)</span></span>
<span class="line"><span style="color:#E06C75;">system2</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">mom_task</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&gt;)</span></span>
<span class="line"><span style="color:#E06C75;">system3</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">son_task</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&gt;)</span></span>
<span class="line"><span style="color:#E06C75;">system4</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">dog_task</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&gt;)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这样这个模型就建立好了。</p><p>我们用类似数据库 table 或者 Excel 的 datasheet 的形式来描述 Entity 与 Component 之间的关系。Entity 就用简单的数字来表示，只要能区分不同的实体就可以。然后我们定义了 Role、Name、Snack、Book、Phone、Playmat 6 种 Component。</p><p>这些 Components 就像数据库 table 的列。但是与数据库不同的是，在 ECS 范式中，这个 table 的列是可以随着程序的运行而动态增加、减少的。另外一个重要的不同是，并不是所有的 Entity 都强制拥有所有的 Component（列），每个 Entity 其实只关心自己需要的 Components 就行了。因此，这里的 table 表示在数据上的话，更像一个稀疏矩阵或集合。</p><p>这其实体现了一种设计哲学： <strong>将所有的信息铺平，用组合的方式来建模</strong>。是不是与 Rust 的 trait 设计哲学有相似性？</p><p>你可以把组件 Component 看作一组属性的集合，将属性按 Component 拆开来放置有利于复用。在这个例子里，4 个实体都复用 Role 组件和 Name 组件，Dad 和 Mommy 复用 Snack 组件，Son 和 Dog 复用 Playmate 组件。</p><p>而 System 就是行为或逻辑，用来处理上面建好的表格数据。一个 System 对应在 Bevy 中，就是普通的 Rust 函数。当然，这个函数首先要有办法拿到上述表格（世界状态）的操作权力才行，操作的方法就是 Query 检索。</p><p>关于 ECS 与 OOP 的对比，你可以参考 <a href="https://bevy-cheatbook.github.io/programming/intro-data.html#comparison-with-object-oriented-programming" target="_blank" rel="noreferrer">这里</a>。</p><h3 id="资源-resource" tabindex="-1">资源（Resource） <a class="header-anchor" href="#资源-resource" aria-label="Permalink to &quot;资源（Resource）&quot;">​</a></h3><p>对于在整个系统中，只会存在一份的，可以把它定义为 Resource。比如外部的图片素材、模型文件、音频素材等。另外还包含定时器实例、设备抽象等。你可以将资源想象成编程范式中的 Singleton （单例）。</p><h3 id="事件-event" tabindex="-1">事件（Event） <a class="header-anchor" href="#事件-event" aria-label="Permalink to &quot;事件（Event）&quot;">​</a></h3><p>游戏世界中，有无处不在的并行任务，比如 10 辆坦克同时寻路前进，任务之间的通信，最好是通过事件来沟通。这是一种用于解耦逻辑的编程范式。</p><h3 id="世界状态" tabindex="-1">世界状态 <a class="header-anchor" href="#世界状态" aria-label="Permalink to &quot;世界状态&quot;">​</a></h3><p>基于 ECS 的设计，那张大表 table 其实就是一个世界状态。基于 ECS 的游戏引擎，就需要在内部维护这样一个世界状态。这个世界状态的维护非常关键，需要用高效的数据结构和算法实现。在 Bevy 中具体用什么数据结构来维护的，你可以参考 <a href="https://bevy-cheatbook.github.io/patterns/component-storage.html" target="_blank" rel="noreferrer">这里</a>。</p><h3 id="固定帧率" tabindex="-1">固定帧率 <a class="header-anchor" href="#固定帧率" aria-label="Permalink to &quot;固定帧率&quot;">​</a></h3><p>游戏一般会以固定帧率运行，比如每秒 60 帧。游戏引擎通常会封装好这个，将你从帧率刷新的任务中释放出来，专注于游戏逻辑的设计。你只需要知道，你写的游戏逻辑会每秒执行 60 次，也就是 60 个滴答 tick。</p><h3 id="坐标系统" tabindex="-1">坐标系统 <a class="header-anchor" href="#坐标系统" aria-label="Permalink to &quot;坐标系统&quot;">​</a></h3><p>Bevy 的 2D 默认的坐标系统是原点在窗口正中间的一个正坐标系，像下面这样：</p><p><img src="`+o+`" alt=""></p><h3 id="摄相机-camera" tabindex="-1">摄相机（Camera） <a class="header-anchor" href="#摄相机-camera" aria-label="Permalink to &quot;摄相机（Camera）&quot;">​</a></h3><p>游戏引擎中都会有 Camera 的概念，3D 游戏的画面渲染严重依赖于 Camera。2D 游戏不太关心 Camera，但使用 Camera 也会有放大缩小的效果，默认 Bevy 的 Camera 在坐标系的 Z 轴上，也就是当前你眼睛所处的位置。</p><h3 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h3><p>借助于 ECS 范式，加上 Rust 强大的无畏并发能力，Bevy 能够让你的 systems 尽可能地运行在多个 CPU 核上，也就是并行运算。所以 Bevy 的基础性能是非常棒的，关于 benchmarks 的讨论，你可以看 <a href="https://github.com/bevyengine/bevy/discussions/655" target="_blank" rel="noreferrer">这里</a>。</p><p>有了这些基础知识的铺垫，我们下面进入实战环节吧。</p><h2 id="实战贪吃蛇" tabindex="-1">实战贪吃蛇 <a class="header-anchor" href="#实战贪吃蛇" aria-label="Permalink to &quot;实战贪吃蛇&quot;">​</a></h2><p>这里我先给出完整代码的 <a href="https://github.com/miketang84/jikeshijian/tree/master/27-bevy_snake" target="_blank" rel="noreferrer">链接</a>，你最好下载下来边运行边对照下面的内容学习。</p><h3 id="第-1-步-引入-bevy-库" tabindex="-1">第 1 步：引入 Bevy 库 <a class="header-anchor" href="#第-1-步-引入-bevy-库" aria-label="Permalink to &quot;第 1 步：引入 Bevy 库&quot;">​</a></h3><p>很简单，引入 Bevy 库，创建一个 App 实例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> bevy</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">prelude</span><span style="color:#ABB2BF;">::*;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    App</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个程序运行后马上就结束了，没有任何输出，也没有窗口打开。</p><h3 id="第-2-步-创建窗口" tabindex="-1">第 2 步：创建窗口 <a class="header-anchor" href="#第-2-步-创建窗口" aria-label="Permalink to &quot;第 2 步：创建窗口&quot;">​</a></h3><p>加入默认 Plugin 集合，里面有个主事件循环，还有个创建窗口的功能。然后我们需要设置 2D 的 Camera。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> bevy</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">prelude</span><span style="color:#ABB2BF;">::*;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    App</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">add_plugins</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">DefaultPlugins</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">add_systems</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Startup</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">setup_camera</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> setup_camera</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> commands</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Commands</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    commands</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Camera2dBundle</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>由于引擎本身是一个托管系统（带主循环的 Runtime），我们要在这个引擎所维护的世界状态里添加（或删除）新的东西，必须使用 Commands 这种任务指令形式。你可以把它想象成总线或消息队列编程模型。</p><p>这一步运行后，弹出一个窗口，并且渲染默认背景色。</p><p><img src="`+r+`" alt=""></p><h3 id="第-3-步-画出蛇的头" tabindex="-1">第 3 步：画出蛇的头 <a class="header-anchor" href="#第-3-步-画出蛇的头" aria-label="Permalink to &quot;第 3 步：画出蛇的头&quot;">​</a></h3><p>这一步我们添加一个新函数，创建蛇的头，然后用 add_systems 添加到 bevy runtime 中。你可以看一下代码发生的变化。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#D19A66;"> SNAKE_HEAD_COLOR</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Color</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">rgb</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.7</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.7</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> SnakeHead</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">add_systems</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Startup</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">setup_camera</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">spawn_snake</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  //</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> spawn_snake</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> commands</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Commands</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    commands</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SpriteBundle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            sprite</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Sprite</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                color</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">SNAKE_HEAD_COLOR</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#E06C75;">            transform</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Transform</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                scale</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Vec3</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">10.0</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">                ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#ABB2BF;">            ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SnakeHead</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>我们用 struct 定义了 SnakeHead Component，它没有任何字段。没关系，目前一个类型名字符号就能表达我们的意思，当一个 tag 用。你继续往后面看。</p><p>你可以看到，一个 system 就是一个普通的 Rust 函数。SpriteBundle 是一个 Component Bundle，也就是组件包，可以把一组 components 组合在一起，SpriteBundle 里面就有 Sprite、Transform 等 components。Sprite 就是图片精灵的意思，是游戏里面表达角色的基本方法。Transform 抽象的是角色的运动，有位移、旋转和拉伸变换三种形式。</p><p><code>spawn_snake() system</code> 目的就是创建这个蛇的头，它作为一个 entity 被插入到世界状态中。 <code>.insert(SnakeHead)</code> 把 SnakeHead 这个 Component 添加到这个刚创建好的 entity 上面。</p><p><code>add_systems()</code> 中的第一个参数 Startup，用来表示这是游戏启动的时候执行的 systems。它们只执行一次，多个 systems 写在元组里面，更简洁。</p><p>你可以看一下这一步的运行效果，窗口中间出现了一个小方块，那就是蛇的头。</p><p><img src="`+c+`" alt="img(6)"></p><h3 id="第-4-步-让这条蛇动起来" tabindex="-1">第 4 步：让这条蛇动起来 <a class="header-anchor" href="#第-4-步-让这条蛇动起来" aria-label="Permalink to &quot;第 4 步：让这条蛇动起来&quot;">​</a></h3><p>这里我给出这一步添加的代码，我们边看边解读。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add_systems</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Update</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">snake_movement</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> snake_movement</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> head_positions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;(&amp;</span><span style="color:#E5C07B;">SnakeHead</span><span style="color:#ABB2BF;">, &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> Transform</span><span style="color:#ABB2BF;">)&gt;) {</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_head</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> transform</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> head_positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter_mut</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">        transform</span><span style="color:#ABB2BF;">.translation.y </span><span style="color:#56B6C2;">+=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">.;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这个 <code>snake_movement()</code> 就是处理蛇运动的 system，请注意参数</p><p>是 <code>Query&lt;(&amp;SnakeHead, &amp;mut Transform)&gt;</code> 类型，它的意思是从世界状态中去查找同时拥有 SnakeHead、Transform 两种 Components 的 entity，它定义了一个迭代器，并且 Transform 的实例还是可以修改的。遍历这个迭代器，其实目前只有一个 entity，更新负责管理它运动的 transform 实例。 <code>transform.translation.y += 2.</code> 就是纵向坐标向上移动 2 个像素。</p><p><code>add_systems()</code> 的第一个参数 Update，表示这个 system 是运行在游戏运行过程中的，每一帧都需要更新一次（执行一次这个 system），也就是这个函数 1 秒会执行 60 次。</p><p>运行后你会发现这个小方块在自动向上移动，效果如下：</p><p><img src="`+t+`" alt=""></p><h3 id="第-5-步-控制这条蛇的方向" tabindex="-1">第 5 步：控制这条蛇的方向 <a class="header-anchor" href="#第-5-步-控制这条蛇的方向" aria-label="Permalink to &quot;第 5 步：控制这条蛇的方向&quot;">​</a></h3><p>下面我们需要控制蛇的方向，上下左右四个方向。这一步就是给 <code>snake_movement system</code> 填充内容。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> snake_movement</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">    keyboard_input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Res</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> head_positions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> Transform</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">With</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SnakeHead</span><span style="color:#ABB2BF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> transform</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> head_positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter_mut</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Left</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            transform</span><span style="color:#ABB2BF;">.translation.x </span><span style="color:#56B6C2;">-=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">.;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Right</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            transform</span><span style="color:#ABB2BF;">.translation.x </span><span style="color:#56B6C2;">+=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">.;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Down</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            transform</span><span style="color:#ABB2BF;">.translation.y </span><span style="color:#56B6C2;">-=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">.;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Up</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            transform</span><span style="color:#ABB2BF;">.translation.y </span><span style="color:#56B6C2;">+=</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">.;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>Input&lt;KeyCode&gt;</code> 是 Bevy 系统级的资源，用于表示输入设备，这里是键盘设备。要访问资源就在 system 里用 <code>Res&lt;T&gt;</code> 这种参数类型。 <code>keyboard_input.pressed()</code> 用于判断是否键盘按下了。</p><p>运行后，你就可以用方向键控制这个小方块的运动方向了。</p><h3 id="第-6-步-将窗口网格化" tabindex="-1">第 6 步：将窗口网格化 <a class="header-anchor" href="#第-6-步-将窗口网格化" aria-label="Permalink to &quot;第 6 步：将窗口网格化&quot;">​</a></h3><p>默认 Bevy 的窗口坐标粒度是以屏幕的逻辑像素为单位的。而像贪吃蛇这种游戏，会将整个画布分成一个个正方形的小方格。具体怎么做，你可以看一下这一步变化的代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#D19A66;"> ARENA_WIDTH</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#D19A66;"> ARENA_HEIGHT</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Clone</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Copy</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">PartialEq</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Eq</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Position</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Size</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    width</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    height</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Size</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> square</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Self</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            width</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            height</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">add_systems</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Update</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">snake_movement</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">size_scaling</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">position_translation</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Size</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">square</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.8</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 计算方块元素的大小</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> size_scaling</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">primary_query</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">Window</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">With</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">bevy</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">PrimaryWindow</span><span style="color:#ABB2BF;">&gt;&gt;, </span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> q</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;(&amp;</span><span style="color:#E5C07B;">Size</span><span style="color:#ABB2BF;">, &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> Transform</span><span style="color:#ABB2BF;">)&gt;) {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> window</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> primary_query</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_single</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">sprite_size</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> transform</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter_mut</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">        transform</span><span style="color:#ABB2BF;">.scale </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Vec3</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">            sprite_size</span><span style="color:#ABB2BF;">.width / </span><span style="color:#D19A66;">ARENA_WIDTH</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;"> * </span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">width</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            sprite_size</span><span style="color:#ABB2BF;">.height / </span><span style="color:#D19A66;">ARENA_HEIGHT</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;"> * </span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">height</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#D19A66;">            1.0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        );</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 计算位移</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> position_translation</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">primary_query</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">Window</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">With</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">bevy</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">PrimaryWindow</span><span style="color:#ABB2BF;">&gt;&gt;, </span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> q</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;(&amp;</span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;">, &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> Transform</span><span style="color:#ABB2BF;">)&gt;) {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> convert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bound_window</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">bound_game</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> tile_size</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> bound_window</span><span style="color:#ABB2BF;"> / </span><span style="color:#E06C75;">bound_game</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        pos</span><span style="color:#ABB2BF;"> / </span><span style="color:#E06C75;">bound_game</span><span style="color:#ABB2BF;"> * </span><span style="color:#E06C75;">bound_window</span><span style="color:#ABB2BF;"> - (</span><span style="color:#E06C75;">bound_window</span><span style="color:#ABB2BF;"> / </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">.) + (</span><span style="color:#E06C75;">tile_size</span><span style="color:#ABB2BF;"> / </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">.)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> window</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> primary_query</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_single</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> transform</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> q</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter_mut</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">        transform</span><span style="color:#ABB2BF;">.translation </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Vec3</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">            convert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">.x </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">width</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">ARENA_WIDTH</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">            convert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">.y </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">height</span><span style="color:#ABB2BF;">() </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">ARENA_HEIGHT</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#D19A66;">            0.0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        );</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><p>这一步，我们添加了 Position 和 Size 两种 Components。用来控制蛇头的逻辑位置和显示大小。新增了 <code>size_scaling</code> 和 <code>position_translation</code> 两个 system，用来在每一帧计算蛇头的尺寸和位置。</p><p>具体的算法理解上要注意的就是，坐标的原点是在窗口正中央，转换后的网格 grid 的坐标原点在窗口左下角。</p><p>你可以看一下这一步运行后的效果。</p><p><img src="`+B+`" alt=""></p><p>你可以看到，蛇的头的大小（为一个网格大小的 0.8）和位置已经变化了。这里的位置在 (3, 3)，网格总大小为 (10, 10)，左下角为 (0, 0)。</p><h3 id="第-7-步-让蛇按网格移动" tabindex="-1">第 7 步：让蛇按网格移动 <a class="header-anchor" href="#第-7-步-让蛇按网格移动" aria-label="Permalink to &quot;第 7 步：让蛇按网格移动&quot;">​</a></h3><p>下面要让蛇的运动适配网格。你看一下这一步改动的代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> snake_movement</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">    keyboard_input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Res</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> head_positions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> Position</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">With</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SnakeHead</span><span style="color:#ABB2BF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> pos</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> head_positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter_mut</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Left</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            pos</span><span style="color:#ABB2BF;">.x </span><span style="color:#56B6C2;">-=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Right</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            pos</span><span style="color:#ABB2BF;">.x </span><span style="color:#56B6C2;">+=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Down</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            pos</span><span style="color:#ABB2BF;">.y </span><span style="color:#56B6C2;">-=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Up</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            pos</span><span style="color:#ABB2BF;">.y </span><span style="color:#56B6C2;">+=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>这一步我们要更新蛇头的逻辑坐标，也就是上一步定义那个 Position component 的实例。现在你可以通过方向键将这个小矩形块移动到其他位置。</p><p><img src="`+y+`" alt=""></p><h3 id="第-8-步-配置窗口比例和尺寸" tabindex="-1">第 8 步：配置窗口比例和尺寸 <a class="header-anchor" href="#第-8-步-配置窗口比例和尺寸" aria-label="Permalink to &quot;第 8 步：配置窗口比例和尺寸&quot;">​</a></h3><p>默认打开的窗口是长方形的，我们要给它配置成方形。你可以看一下这一步的变化代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#D19A66;"> ARENA_WIDTH</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 25</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#D19A66;"> ARENA_HEIGHT</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 25</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">add_plugins</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">DefaultPlugins</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">WindowPlugin</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                primary_window</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Some</span><span style="color:#ABB2BF;">( </span><span style="color:#E5C07B;">Window</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                    title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Snake!&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">                    resolution</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">bevy</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">WindowResolution</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">( </span><span style="color:#D19A66;">500.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">500.0</span><span style="color:#ABB2BF;"> ),</span></span>
<span class="line"><span style="color:#ABB2BF;">                    ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">                }),</span></span>
<span class="line"><span style="color:#ABB2BF;">                ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            })</span></span>
<span class="line"><span style="color:#ABB2BF;">        )</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert_resource</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">ClearColor</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">rgb</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.04</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.04</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.04</span><span style="color:#ABB2BF;">)))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这一步我们做了 4 件事情。</p><ol><li>设置窗口尺寸为 500px x 500px。</li><li>设置窗口标题为 Snake!。</li><li>设置窗口填充背景颜色为 Color::rgb(0.04, 0.04, 0.04)。</li><li>分割窗口 grid 为更大一点的数字，比如 25x25。</li></ol><p>你看一下这一步的效果。</p><p><img src="`+i+`" alt=""></p><p>离我们期望的样子越来越近了。</p><h3 id="第-9-步-随机产生食物" tabindex="-1">第 9 步：随机产生食物 <a class="header-anchor" href="#第-9-步-随机产生食物" aria-label="Permalink to &quot;第 9 步：随机产生食物&quot;">​</a></h3><p>下面要开始产生食物。食物我们也用另一种小方块来表示。你看一下这一步变化的代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#D19A66;"> FOOD_COLOR</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Color</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">rgb</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">0.0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Food</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">add_systems</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Update</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">food_spawner</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> food_spawner</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> commands</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Commands</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    commands</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SpriteBundle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            sprite</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Sprite</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                color</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">FOOD_COLOR</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#ABB2BF;">            ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Food</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            x</span><span style="color:#ABB2BF;">: (</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">&gt;() * </span><span style="color:#D19A66;">ARENA_WIDTH</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            y</span><span style="color:#ABB2BF;">: (</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">&gt;() * </span><span style="color:#D19A66;">ARENA_HEIGHT</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Size</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">square</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.8</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>食物随机产生，所以需要用到 random 函数。同样，我们定义了 Food 这个 Compoment，然后定义了 food_spawner system，并添加到 runtime 中去。创建的食物 entity 上带有 Sprite、Food、Position、Size 等 components。</p><p>可以想象，这个创建食物的 system1 秒会执行 60 次，也就是 1 秒钟会创建 60 个食物，速度太快了。</p><p><img src="`+F+`" alt=""></p><h3 id="第-10-步-使用定时器产生食物" tabindex="-1">第 10 步：使用定时器产生食物 <a class="header-anchor" href="#第-10-步-使用定时器产生食物" aria-label="Permalink to &quot;第 10 步：使用定时器产生食物&quot;">​</a></h3><p>下面我们要控制食物的产生速度，比如 2 秒产生一颗食物。我们来看这一步变化的代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Resource</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> FoodSpawnTimer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Timer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert_resource</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">FoodSpawnTimer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Timer</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_seconds</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#D19A66;">            1.0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            TimerMode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Repeating</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        )))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> food_spawner</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> commands</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Commands</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    time</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Res</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Time</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> timer</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ResMut</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">FoodSpawnTimer</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">    ) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果时间未到 2s 就立即返回</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.</span><span style="color:#61AFEF;">tick</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delta</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">finished</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    commands</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SpriteBundle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            sprite</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Sprite</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                color</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">FOOD_COLOR</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#ABB2BF;">            ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Food</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            x</span><span style="color:#ABB2BF;">: (</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">&gt;() * </span><span style="color:#D19A66;">ARENA_WIDTH</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            y</span><span style="color:#ABB2BF;">: (</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">&gt;() * </span><span style="color:#D19A66;">ARENA_HEIGHT</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Size</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">square</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.8</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>Timer 类型是 Bevy 提供的定时器类型，我们用 newtype 模式定义一个自己的定时器，它是一种资源（全局唯一）。我们使用 <code>insert_resource()</code> 将这个资源初始化并插入到托管系统中去。</p><p>然后在 <code>food_spawner system</code> 中使用 <code>ResMut&lt;FoodSpawnTimer&gt;</code> 这种形式来使用资源。同时用 <code>Res&lt;Time&gt;</code> 这种形式来获取游戏中的时间，这个也是 Bevy 引擎提供的。细心的你可能发现了，Bevy 采用的也是声明式参数实现，和前面课程讲到的 Axum 风格一样。这些参数顺序是可以变的！在这里你可以体会到 Rust 强大的表达能力。</p><p>我们再来看一句。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">    if</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.</span><span style="color:#61AFEF;">tick</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delta</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">finished</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这一句表示每次执行这个 <code>food_spawner system</code>（1 秒执行 60 次）时，先判断当前流逝了多少时间，如果定时器的一次间隔还没到，就直接返回，不执行这个函数后面的部分，也就不产生一个食物了。这样就实现了控制食物产生速率的目的。</p><p>你可以看一下运行效果。</p><p><img src="`+A+`" alt=""></p><p>现在 2 秒产生一颗食物，速度比刚才慢多了。</p><h3 id="第-11-步-让蛇自动前进" tabindex="-1">第 11 步：让蛇自动前进 <a class="header-anchor" href="#第-11-步-让蛇自动前进" aria-label="Permalink to &quot;第 11 步：让蛇自动前进&quot;">​</a></h3><p>下面我们要让蛇自己动起来，而且也要控制它的运动速率。同样的我们会用定时器方法。</p><p>你来看这一步改动的代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Resource</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> BTimer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Timer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> SnakeHead</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    direction</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Direction</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">PartialEq</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Copy</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Clone</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Direction</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Left</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Up</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Right</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Down</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Direction</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> opposite</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        match</span><span style="color:#E5C07B;"> self</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Self</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Left</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Right</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            Self</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Right</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Left</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            Self</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Up</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Down</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            Self</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Down</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Up</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 插入定时器资源</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert_resource</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">BTimer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Timer</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_seconds</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#D19A66;">            0.20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            TimerMode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Repeating</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        )))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 更新Update模式下的system集</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">add_systems</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Update</span><span style="color:#ABB2BF;">, (</span></span>
<span class="line"><span style="color:#E06C75;">            snake_movement_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">before</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">snake_movement</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">            snake_movement</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            size_scaling</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            position_translation</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 根据用户键盘行为，预处理蛇的前进方向</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> snake_movement_input</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">    keyboard_input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Res</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> heads</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> SnakeHead</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> heads</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter_mut</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> dir</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Direction</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">just_pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Left</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Left</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">just_pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Down</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Down</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">just_pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Up</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Up</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> keyboard_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">just_pressed</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">KeyCode</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Right</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Right</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            head</span><span style="color:#ABB2BF;">.direction</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> dir</span><span style="color:#56B6C2;"> !=</span><span style="color:#E06C75;"> head</span><span style="color:#ABB2BF;">.direction.</span><span style="color:#61AFEF;">opposite</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">            head</span><span style="color:#ABB2BF;">.direction </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> dir</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 蛇的运动system</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> snake_movement</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> heads</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> Position</span><span style="color:#ABB2BF;">, &amp;</span><span style="color:#E5C07B;">SnakeHead</span><span style="color:#ABB2BF;">)&gt;,</span></span>
<span class="line"><span style="color:#E06C75;">    time</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Res</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Time</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> timer</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ResMut</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">BTimer</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 如果时间未到 0.2s 就立即返回</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.</span><span style="color:#61AFEF;">tick</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delta</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">finished</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">((</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> head_pos</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> heads</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter_mut</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        match</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">.direction {</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Left</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                head_pos</span><span style="color:#ABB2BF;">.x </span><span style="color:#56B6C2;">-=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Right</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                head_pos</span><span style="color:#ABB2BF;">.x </span><span style="color:#56B6C2;">+=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Up</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                head_pos</span><span style="color:#ABB2BF;">.y </span><span style="color:#56B6C2;">+=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Down</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                head_pos</span><span style="color:#ABB2BF;">.y </span><span style="color:#56B6C2;">-=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br></div></div><p>类似地，我们定义了 BTimer 来控制蛇的自动行走，0.2 秒走一格。同时，我们现在可以给蛇指定行走的方向了，因此新定义了 Direction 枚举，并在 SnakeHead Component 里添加了 direction 字段。</p><p>代码中的 <code>snake_movement_input.before(snake_movement)</code> 表示明确指定 <code>snake_movement_input</code> 在 <code>snake_movement system</code> 之前处理。因为 bevy 默认会尽可能并行化，所以这样指定能够明确 system 的执行顺序，不然可能是乱序执行的。</p><h3 id="第-12-步-定义蛇身" tabindex="-1">第 12 步：定义蛇身 <a class="header-anchor" href="#第-12-步-定义蛇身" aria-label="Permalink to &quot;第 12 步：定义蛇身&quot;">​</a></h3><p>下面是定义蛇的身子，这是整个模型相对困难的一步。但其实把结构定义好了就会很简单。</p><p>你可以看一下这步变化的代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Component</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> SnakeSegment</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Resource</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Default</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Deref</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">DerefMut</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> SnakeSegments</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Entity</span><span style="color:#ABB2BF;">&gt;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 插入蛇的结构，定义为资源</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">insert_resource</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SnakeSegments</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建蛇，用SnakeSegments来维护蛇的结构</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> spawn_snake</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> commands</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Commands</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> segments</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ResMut</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SnakeSegments</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">segments</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> SnakeSegments</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">vec!</span><span style="color:#ABB2BF;">[</span></span>
<span class="line"><span style="color:#E06C75;">        commands</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SpriteBundle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                sprite</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Sprite</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                    color</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">SNAKE_HEAD_COLOR</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                    ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">                },</span></span>
<span class="line"><span style="color:#ABB2BF;">                ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            })</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SnakeHead</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                direction</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Up</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            })</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SnakeSegment</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> })</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Size</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">square</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.8</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">id</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#61AFEF;">        spawn_segment</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">commands</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> }),</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建蛇的一个segment，也就是一个小方块</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> spawn_segment</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> commands</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Commands</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">position</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Entity</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    commands</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SpriteBundle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            sprite</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Sprite</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                color</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">SNAKE_SEGMENT_COLOR</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">                ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            },</span></span>
<span class="line"><span style="color:#ABB2BF;">            ..</span><span style="color:#61AFEF;">default</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SnakeSegment</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">position</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">insert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Size</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">square</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0.65</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">id</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>这里，最关键的是定义了 SnakeSegment Component 和 <code>SnakeSegments(Vec&lt;Entity&gt;)</code> 这个 Resource。我们把蛇的头和每一节身子小方块都视为一个 SnakeSegment，整条蛇由多个 SnakeSegment 组成，因此用 <code>SnakeSegments(Vec&lt;Entity&gt;)</code> 这个资源来维护这条蛇的结构。 <code>SnakeSegments(Vec&lt;Entity&gt;)</code> 里面需要存下每个 SnakeSegment 的 Entity id。</p><p>默认开始的时候，蛇有一节身子，位置在 (3, 2)。蛇的运动方向是向上的。蛇身小方块是 0.65 个网格单元大小。</p><p>你可以看一下这一步运行后的效果。</p><p><img src="`+b+`" alt=""></p><p>可以看到，这一节蛇身没有跟着头一起动。</p><h3 id="第-13-步-让蛇身跟着蛇的头一起运动" tabindex="-1">第 13 步：让蛇身跟着蛇的头一起运动 <a class="header-anchor" href="#第-13-步-让蛇身跟着蛇的头一起运动" aria-label="Permalink to &quot;第 13 步：让蛇身跟着蛇的头一起运动&quot;">​</a></h3><p>让蛇身跟着蛇头一起动，模型上其实就是让蛇身的每一节跟着蛇头的移动一起变换坐标就行了。我们看一下这一步的代码变化。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> snake_movement</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">    time</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Res</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Time</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> timer</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ResMut</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">BTimer</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;">    segments</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ResMut</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SnakeSegments</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> heads</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;(</span><span style="color:#E5C07B;">Entity</span><span style="color:#ABB2BF;">, &amp;</span><span style="color:#E5C07B;">SnakeHead</span><span style="color:#ABB2BF;">)&gt;,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> positions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> Position</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 不到0.2s立即返回</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#56B6C2;"> !</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.</span><span style="color:#61AFEF;">tick</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">time</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">delta</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">finished</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">head_entity</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> heads</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter_mut</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> segment_positions</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> segments</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">e</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> *</span><span style="color:#E06C75;">positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_mut</span><span style="color:#ABB2BF;">(*</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">collect</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;">&gt;&gt;();</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 处理蛇的头的位移</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> head_pos</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_mut</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">head_entity</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        match</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">.direction {</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Left</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                head_pos</span><span style="color:#ABB2BF;">.x </span><span style="color:#56B6C2;">-=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Right</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                head_pos</span><span style="color:#ABB2BF;">.x </span><span style="color:#56B6C2;">+=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Up</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                head_pos</span><span style="color:#ABB2BF;">.y </span><span style="color:#56B6C2;">+=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            Direction</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Down</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                head_pos</span><span style="color:#ABB2BF;">.y </span><span style="color:#56B6C2;">-=</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 处理蛇身每一段的位置变化</span></span>
<span class="line"><span style="color:#E06C75;">        segment_positions</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">zip</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">segments</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">skip</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">for_each</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">segment</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                *</span><span style="color:#E06C75;">positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_mut</span><span style="color:#ABB2BF;">(*</span><span style="color:#E06C75;">segment</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> *</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>这个算法的精华在这一句：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">        segment_positions</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">zip</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">segments</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">skip</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">for_each</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">segment</span><span style="color:#ABB2BF;">)</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                *</span><span style="color:#E06C75;">positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_mut</span><span style="color:#ABB2BF;">(*</span><span style="color:#E06C75;">segment</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> *</span><span style="color:#E06C75;">pos</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>意思就是，当蛇动一步的时候，第一节蛇身的坐标值填充蛇头的坐标值，第二节蛇身的坐标值填充第一节蛇身的坐标值，以此类推，直到遍历完整个蛇身。</p><p>可以看到，Rust 可以把问题表达得相当精练。</p><p>你看一下这一步运行后的效果。</p><p><img src="`+m+`" alt=""></p><h3 id="第-14-步-边吃边长大" tabindex="-1">第 14 步：边吃边长大 <a class="header-anchor" href="#第-14-步-边吃边长大" aria-label="Permalink to &quot;第 14 步：边吃边长大&quot;">​</a></h3><p>下面就该处理吃食物并长大的效果了。吃食物的原理就是当蛇头占据了那个食物的位置时，就在系统中注销掉那个食物，然后在蛇身的尾巴位置处添加一个小方块。</p><p>你看一下这一步变化的代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Event</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> GrowthEvent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Default</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Resource</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> LastTailPosition</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Option</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;">&gt;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 更新Update system集合</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">add_systems</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Update</span><span style="color:#ABB2BF;">, (</span></span>
<span class="line"><span style="color:#E06C75;">            snake_movement_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">before</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">snake_movement</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">            snake_movement</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            snake_eating</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            snake_growth</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            size_scaling</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            position_translation</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">last_tail_position</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> LastTailPosition</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Some</span><span style="color:#ABB2BF;">(*</span><span style="color:#E06C75;">segment_positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">last</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理蛇吃食物的system</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> snake_eating</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> commands</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Commands</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> growth_writer</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">EventWriter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">GrowthEvent</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;">    food_positions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;(</span><span style="color:#E5C07B;">Entity</span><span style="color:#ABB2BF;">, &amp;</span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">With</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Food</span><span style="color:#ABB2BF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#E06C75;">    head_positions</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">Position</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">With</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SnakeHead</span><span style="color:#ABB2BF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> head_pos</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> head_positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">ent</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">food_pos</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">in</span><span style="color:#E06C75;"> food_positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 通过遍历来判断有没有吃到一个食物</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> food_pos</span><span style="color:#56B6C2;"> ==</span><span style="color:#E06C75;"> head_pos</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                commands</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entity</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ent</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">despawn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">                growth_writer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">GrowthEvent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 处理蛇长大的system</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> snake_growth</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">    commands</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Commands</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    last_tail_position</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Res</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">LastTailPosition</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> segments</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ResMut</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SnakeSegments</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> growth_reader</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">EventReader</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">GrowthEvent</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 通过事件机制来解耦蛇长大的逻辑</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> growth_reader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">is_some</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E06C75;">        segments</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">spawn_segment</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">commands</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">last_tail_position</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>我们添加了 <code>LastTailPosition(Option&lt;Position&gt;)</code> 这个蛇尾的位置坐标作为资源来实时更新，好知道蛇长长的时候，应该在哪个位置添加 segment。然后新增了 <code>snake_eating</code> 和 <code>snake_growth</code> 两个 system。</p><p>我们新定义了 GrowthEvent 长大的事件。</p><p><code>snake_eating system</code> 处理吃食物的业务，就是当蛇头的位置与食物位置重合时，就调用 <code>commands.entity(ent).despawn()</code> 将食物给注销掉。然后用 <code>growth_writer.send(GrowthEvent)</code> 向系统总线发送一个“长大”的事件。</p><p><code>snake_growth system</code> 处理蛇长大的业务，通过 <code>EventReader&lt;GrowthEvent&gt;</code> 定义的 growth_reader，读取系统中的长大事件，使用 <code>spawn_segment()</code> 和 <code>segments.push()</code> 把尾巴添加到蛇的全局维护资源中去。</p><p><code>snake_eating</code> 和 <code>snake_growth</code> 在每一帧更新时都会执行。</p><p>可以看到，通过这样的事件总线，Bevy 系统把业务解耦得相当漂亮。每个 system 就专注于处理一件“小”事情就行了。这样对于构建复杂的游戏系统来说，大大减轻了我们的心智负担。</p><p>你可以看一下这一步执行后的效果。</p><p><img src="`+u+`" alt=""></p><h3 id="第-15-步-撞墙和自身-game-over" tabindex="-1">第 15 步：撞墙和自身 Game Over <a class="header-anchor" href="#第-15-步-撞墙和自身-game-over" aria-label="Permalink to &quot;第 15 步：撞墙和自身 Game Over&quot;">​</a></h3><p>好了，我们的贪吃蛇的主体功能基本实现好了，下面需要加入撞墙和撞自身死的判断。你看一下这一步变化的代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Event</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> GameOverEvent</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 注册事件到world中</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">add_event</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">GameOverEvent</span><span style="color:#ABB2BF;">&gt;()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">add_systems</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Update</span><span style="color:#ABB2BF;">, (</span></span>
<span class="line"><span style="color:#E06C75;">            snake_movement_input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">before</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">snake_movement</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">            snake_movement</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            game_over</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">after</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">snake_movement</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">            snake_eating</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            snake_growth</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            size_scaling</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">            position_translation</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 判断撞墙的逻辑</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> head_pos</span><span style="color:#ABB2BF;">.x </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#56B6C2;">            ||</span><span style="color:#E06C75;"> head_pos</span><span style="color:#ABB2BF;">.y </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0</span></span>
<span class="line"><span style="color:#56B6C2;">            ||</span><span style="color:#E06C75;"> head_pos</span><span style="color:#ABB2BF;">.x </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> u32</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> ARENA_WIDTH</span></span>
<span class="line"><span style="color:#56B6C2;">            ||</span><span style="color:#E06C75;"> head_pos</span><span style="color:#ABB2BF;">.y </span><span style="color:#C678DD;">as</span><span style="color:#E5C07B;"> u32</span><span style="color:#56B6C2;"> &gt;=</span><span style="color:#D19A66;"> ARENA_HEIGHT</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#E06C75;">            game_over_writer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">GameOverEvent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 判断撞自己身子的逻辑</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#E06C75;"> segment_positions</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">head_pos</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">            game_over_writer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">GameOverEvent</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// game over 子system</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> game_over</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> commands</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Commands</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    mut</span><span style="color:#E06C75;"> reader</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">EventReader</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">GameOverEvent</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;">    segments_res</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ResMut</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SnakeSegments</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E06C75;">    food</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Entity</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">With</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Food</span><span style="color:#ABB2BF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#E06C75;">    segments</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Query</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Entity</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">With</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">SnakeSegment</span><span style="color:#ABB2BF;">&gt;&gt;,</span></span>
<span class="line"><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> reader</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">is_some</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#E06C75;"> ent</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> food</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">chain</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">segments</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">iter</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E06C75;">            commands</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entity</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ent</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">despawn</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#61AFEF;">        spawn_snake</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">commands</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">segments_res</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>撞墙这个只需要判断有没有超出 grid 边界就可以了。撞自身判断用 <code>segment_positions.contains(&amp;head_pos)</code> 看所有蛇身的 segment 的 position Vec 里有没有包含蛇头的位置。</p><p>我们添加了 <code>GameOverEvent</code> 事件和 <code>game_over system</code>，也是用的异步事件的方式。当收到 <code>GameOverEvent</code> 的时候，把所有的蛇的 entity 和食物的 entity 全部清理（despawn）掉。注意这里用了两个迭代器的 <code>.chain()</code> 方法，让清理工作表达得更紧凑，你可以体会一下。</p><p>清理完后，再重新创建蛇，游戏重新开始。到这一步，游戏已经基本能玩了，还写什么代码，先玩几把吧。</p><p><img src="`+C+'" alt=""></p><p>目前为止，整个代码不过 330 行左右。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这节课我们通过自己动手编写一个贪吃蛇小游戏，学习了 Rust 游戏开发引擎 Bevy 的基本使用方式。Bevy 游戏引擎充分利用 Rust 语言的无忧并发和强大的表达能力，让开发游戏变得跟游戏一样好玩。整个过程下来，心情愉快、舒畅。你可以跟着我一步一步敲代码，体会这种感觉。</p><p>Bevy 的核心是一套 ECS 系统，ECS 本质上来说是一套编程范式，不仅限于在游戏中使用，它也可以在其他的业务系统中使用。你有必要多花点时间查阅相关资料去理解它。后面有机会我也会继续出相关的研究内容。</p><p>写 Bevy 代码的时候，我们要理解 Bevy 是一种 Runtime，我们写的代码实际会被这个 Runtime 托管运行。我们要做的就是按照 ECS 规范定义 Component、Resource、Event 等，实现 system 添加到这个 Runtime 中。底层那些脏活累活 Bevy 全帮我们做了，我们只需要专心抽象模型、定义结构、处理业务。</p><p>然后，通过这节课的内容我们可以体会到，写小游戏其实也是一种相当好的建模能力的训练，我们可以通过这种有趣的方法提升自己在这方面的能力。</p><p><img src="'+E+'" alt=""></p><p>本讲源代码： <a href="https://github.com/miketang84/jikeshijian/tree/master/27-bevy_snake" target="_blank" rel="noreferrer">https://github.com/miketang84/jikeshijian/tree/master/27-bevy_snake</a></p><p>必读的两个 Bevy 资料：</p><ul><li><a href="https://bevyengine.org/learn/book/introduction/" target="_blank" rel="noreferrer">https://bevyengine.org/learn/book/introduction/</a></li><li><a href="https://bevy-cheatbook.github.io/introduction.html" target="_blank" rel="noreferrer">https://bevy-cheatbook.github.io/introduction.html</a></li></ul><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>这节课的代码还有个问题，就是食物有可能在已经产生过的地方产生，也有可能在蛇身上产生，请问如何处理这个 Bug？欢迎你把你的处理思路和实现代码分享出来，我们一起探讨，如果你觉得这节课对你有帮助的话，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>',162)]))}const w=n(d,[["render",D]]);export{S as __pageData,w as default};
