import{_ as n,c as a,o as p,ag as l}from"./chunks/framework.D2WelYEY.js";const o="/tanggang_rust/assets/41cf986d8da00cce53436aba30e89e8d.CizjlYIu.jpg",b=JSON.parse('{"title":"03 ｜所有权（下）：Rust 中借用与引用的规则是怎样的？","description":"","frontmatter":{},"headers":[],"relativePath":"Document/03｜所有权（下）：Rust中借用与引用的规则是怎样的？.md","filePath":"Document/03｜所有权（下）：Rust中借用与引用的规则是怎样的？.md","lastUpdated":1740766764000}'),e={name:"Document/03｜所有权（下）：Rust中借用与引用的规则是怎样的？.md"};function r(c,s,t,y,B,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_03-所有权-下-rust-中借用与引用的规则是怎样的" tabindex="-1">03 ｜所有权（下）：Rust 中借用与引用的规则是怎样的？ <a class="header-anchor" href="#_03-所有权-下-rust-中借用与引用的规则是怎样的" aria-label="Permalink to &quot;03 ｜所有权（下）：Rust 中借用与引用的规则是怎样的？&quot;">​</a></h1><p>你好，我是 Mike。今天我们继续探讨 Rust 中所有权这一关键设计。</p><p>上节课我们了解了计算机内存结构知识，理解了 Rust 在内存资源管理上特立独行的设计——所有权，也知道了 Rust 准备采用所有权来重构整个软件体系。那么这节课我们继续学习所有权的相关内容——借用与引用，学完这节课我们就会对 Rust 语言的所有权方案有一个相对完整的认知了。</p><p>这节课我会用一些精心设计的示例，让你体会 Rust 引用的独特之处。</p><h2 id="借用与引用" tabindex="-1">借用与引用 <a class="header-anchor" href="#借用与引用" aria-label="Permalink to &quot;借用与引用&quot;">​</a></h2><p>我们来复习一下上一节课最后一个例子。我们想在函数 <code>foo</code> 执行后继续使用字符串 s1，我们通过把字符串的所有权转移出来，来达到我们的目的。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{s}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    s</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I am a superman.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s1</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{s1}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这样可以是可以，不过很麻烦。一是会给程序员造成一些心智负担，还得想着把值传回来再继续使用。如果代码中到处都是所有权传来传去，会让代码显得相当冗余，毕竟很多时候函数返回值是要用作其他类型的返回的。为了解决这个问题，Rust 引入了借用的概念。</p><p>借用概念也是实际生活中思维的映射。比如你有一样东西，别人想用一下，可以从你这里借，你可以借出。那“引用”概念又是什么呢？其实在 Rust 中， <strong>借用和引用是一体两面</strong>。你把东西借给别人用，也就是别人持有了对你这个东西的引用。这里你理解就好，后面我们会混用这两个词。</p><p>在 Rust 中，变量前用“&amp;”符号来表示引用，比如 <code>&amp;x</code>。</p><p>其实 <strong>引用也是一种值，并且是固定尺寸的值</strong>，一般来说，与机器 CPU 位数一致，比如 64 位或 32 位。因为是值，所以就可以赋给另一个变量。同时它又是固定的而且是小尺寸的值，那其实赋值的时候，就可以直接复制一份这个引用。</p><p>让我们来看一下如何使用引用。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">// b是变量a的一级引用</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> &amp;&amp;&amp;&amp;</span><span style="color:#ABB2BF;">&amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// c是变量a的多级引用</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">// d是变量a的间接引用</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> e</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;         </span><span style="color:#7F848E;font-style:italic;">// 引用b再赋值给e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{a}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{c}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{d}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{e}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#D19A66;">10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>从上面示例中可以看出，Rust 识别了我们一般情况下的意图，不会打印出引用的内存地址什么的，而是打印出了被引用对象的值。示例中的 c 实际是 a 的 5 次引用，但是打印时仍然正确获取到了 a 的值。d 是 a 的间接引用，但是仍然正确获取到了 a 的值。这里我们可以看出 Rust 与 C 这种纯底层语言的显著区别，Rust 对程序员更友好，它会更多地面向业务。因为人们还是普遍关注最终那个值的部分，而不是中间过程的内存地址。</p><p>上面示例中，b 和 e 都是对 a 的一级引用。由于引用是固定尺寸的值， <code>let e = b</code> 做的就是引用的复制操作，并没有再复制一份 a 的值。</p><p>那对字符串来说会怎样呢？我们改一下上面的示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I am a superman.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s2</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s3</span><span style="color:#56B6C2;"> =</span><span style="color:#56B6C2;"> &amp;&amp;&amp;&amp;</span><span style="color:#ABB2BF;">&amp;</span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s4</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">s2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s5</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> s2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{s1}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{s2}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{s3}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{s4}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{s5}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#E06C75;"> am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> superman</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#E06C75;"> am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> superman</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#E06C75;"> am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> superman</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#E06C75;"> am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> superman</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#E06C75;"> am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> superman</span><span style="color:#ABB2BF;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>结果符合我们的期望。同样，这些引用都没有导致堆中的字符串资源被复制一份或多份。字符串的所有权仍然在 s1 那里，s2、s3、s4、s5 都是对这个所有权变量的引用。从这里开始，我们可以将变量按一个新的维度划分为 <strong>所有权型变量</strong> 和 <strong>引用型变量</strong>。</p><p>也可以看出，在 Rust 中，一个所有权型变量（如 s1）带有值和类型的信息，一个引用型变量（如 s2、s3、s4、s5）也带有值和类型的信息，不然它没法正确回溯到最终的值。这些信息是 Rust 编译器帮我们维护的。</p><h2 id="不可变引用、可变引用" tabindex="-1">不可变引用、可变引用 <a class="header-anchor" href="#不可变引用、可变引用" aria-label="Permalink to &quot;不可变引用、可变引用&quot;">​</a></h2><p>上一节课，我们看到 Rust 的变量具有可变性。那么同样的规则，是不是可以施加到引用上来呢？当然可以。这正是 Rust 语言设计一致性的体现。</p><p>实际上默认 <code>&amp;x</code> 指的是不可变引用。而要获取到可变引用，需要使用 <code>&amp;mut</code> 符号，如 <code>&amp;mut x</code>。</p><p>好家伙，我们一下子又引入了两个新概念：不可变引用和可变引用。让我们好好来消化一下它们。</p><ul><li>引用分成不可变引用和可变引用。</li><li><code>&amp;x</code> 是对变量 x 的不可变引用。</li><li><code>&amp;mut x</code> 是对变量 x 的可变引用。</li></ul><p>你应该发现了，这里 mut 和 x 中间有个空格，为什么呢？很简单，就是为了避免和 <code>&amp;mutx</code> 混淆。</p><p>不可变引用和可变引用对应的现实概念也是很容易理解的。比如，你把你的书借给别人，并且嘱咐，只能阅读，不能在书上记笔记。这就相当于不可变引用。如果你允许他在书上面写写划划，那就相当于可变引用。</p><p>为什么会有可变引用的存在呢？这个事情是这样的。到目前为止，如果要对一个变量内容进行修改，我们必须拥有所有权型变量才行。而很多时候，我们没法拥有那个资源的所有权，比如你引用一个别人的库，它没有把所有权类型暴露出来，但是确实又有更新其内部状态的需求。因此需要一个东西，它既是一种引用，又能够修改指向资源的内容。于是就引入了 <strong>可变引用</strong>。</p><p>我们前面举的引用的例子，实际只是访问（打印）变量的值，没有修改它们，所以没问题。现在我们再来看一下，如果要使用引用修改变量的值，应该怎么做。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>提示：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0596</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">cannot</span><span style="color:#E06C75;"> borrow</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#C678DD;">as</span><span style="color:#E06C75;"> mutable</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">as</span><span style="color:#E06C75;"> it</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> declared</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> mutable</span></span>
<span class="line"><span style="color:#ABB2BF;">  --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">19</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">13</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span></span>
<span class="line"><span style="color:#D19A66;">19</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span><span style="color:#56B6C2;">             ^^^^^^</span><span style="color:#E06C75;"> cannot</span><span style="color:#E06C75;"> borrow</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> mutable</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span></span>
<span class="line"><span style="color:#E06C75;">help</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">consider</span><span style="color:#E06C75;"> changing</span><span style="color:#E06C75;"> this</span><span style="color:#E06C75;"> to</span><span style="color:#E06C75;"> be</span><span style="color:#E06C75;"> mutable</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span></span>
<span class="line"><span style="color:#D19A66;">18</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span><span style="color:#ABB2BF;">         +++</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>报错了。怎么回事呢？</p><p>前面我们说过，要修改一个变量的值，变量名前要加 <code>mut</code> 修饰符，我们忘加了（不要害羞，这是很正常的事情），Rust 编译器给我们指出来了。</p><p>现在我们加上。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#D19A66;">20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接下来改动一下例子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{a}&quot;</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 这里多打印了一行a</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#D19A66;">20</span></span>
<span class="line"><span style="color:#D19A66;">20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>正确输出了修改后的值。</p><p>我们再换一下两个打印语句的位置试试。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{a}&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 这一句移到前面来</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编译居然报错了！</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">   Compiling</span><span style="color:#E06C75;"> playground</span><span style="color:#E06C75;"> v0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;"> (/</span><span style="color:#E06C75;">playground</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0502</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">cannot</span><span style="color:#E06C75;"> borrow</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#C678DD;">as</span><span style="color:#E06C75;"> immutable</span><span style="color:#E06C75;"> because</span><span style="color:#E06C75;"> it</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> also</span><span style="color:#E06C75;"> borrowed</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> mutable</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">15</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">             ------ </span><span style="color:#E06C75;">mutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#D19A66;">6</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{a}&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 这一句移到的前面来</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">               ^^^</span><span style="color:#E06C75;"> immutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 提示说这里发生了不可变借用</span></span>
<span class="line"><span style="color:#D19A66;">7</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">               --- </span><span style="color:#E06C75;">mutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> later</span><span style="color:#E06C75;"> used</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在这后面使用了可变借用</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> note</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">this</span><span style="color:#E06C75;"> error</span><span style="color:#E06C75;"> originates</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> the</span><span style="color:#C678DD;"> macro</span><span style="color:#ABB2BF;"> \`$</span><span style="color:#C678DD;">crate</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">format_args_nl</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">which</span><span style="color:#E06C75;"> comes</span><span style="color:#E06C75;"> from</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> expansion</span><span style="color:#E06C75;"> of</span><span style="color:#E06C75;"> the</span><span style="color:#C678DD;"> macro</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">println</span><span style="color:#ABB2BF;">\` (</span><span style="color:#C678DD;">in</span><span style="color:#E5C07B;"> Nightly</span><span style="color:#E06C75;"> builds</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">run</span><span style="color:#E06C75;"> with</span><span style="color:#ABB2BF;"> -</span><span style="color:#E5C07B;">Z</span><span style="color:#C678DD;"> macro</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">backtrace</span><span style="color:#C678DD;"> for</span><span style="color:#E06C75;"> more</span><span style="color:#E06C75;"> info</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>只是移动了一下打印语句，就会导致程序编译不通过。什么道理！我能充分理解你初学 Rust 的心情。</p><p>那这到底是为什么呢？我们先总结一下观察到的事情。</p><ul><li>打印语句 <code>println!</code> 中，不管是传所有权型变量还是引用型变量，都能打印出预期的值。实际上 <code>println!</code> 中默认会对所有权变量做不可变借用操作（对应代码里的第 6 行）。</li><li>可变引用调用的时机（对应代码里的第 7 行）和不可变引用调用的时机（对应代码里的第 6 行），好像有顺序要求。目前我们尚不清楚这种机制是什么。</li></ul><p>为了让问题暴露得更加明显，我又设计了另外一个例子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;      </span><span style="color:#7F848E;font-style:italic;">// 在利用b更新了a的值后，c再次借用a</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这个代码是可以顺利编译的。但是加了一句打印就又不行了！</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;       </span><span style="color:#7F848E;font-style:italic;">// 在利用b更新了a的值后，c再次借用a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 加了一句打印语句</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>提示：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">   Compiling</span><span style="color:#E06C75;"> playground</span><span style="color:#E06C75;"> v0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;"> (/</span><span style="color:#E06C75;">playground</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0502</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">cannot</span><span style="color:#E06C75;"> borrow</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#C678DD;">as</span><span style="color:#E06C75;"> immutable</span><span style="color:#E06C75;"> because</span><span style="color:#E06C75;"> it</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> also</span><span style="color:#E06C75;"> borrowed</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> mutable</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 不能将a借用为不可变的，因为它已经被可变借用了</span></span>
<span class="line"><span style="color:#ABB2BF;">  --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">13</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">             ------ </span><span style="color:#E06C75;">mutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可变借用发生在这里</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> |</span><span style="color:#ABB2BF;">     *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">             ^^</span><span style="color:#E06C75;"> immutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 不可变借用发生在这里</span></span>
<span class="line"><span style="color:#D19A66;">6</span><span style="color:#56B6C2;"> |</span></span>
<span class="line"><span style="color:#D19A66;">7</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 加了一句打印语句</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">               --- </span><span style="color:#E06C75;">mutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> later</span><span style="color:#E06C75;"> used</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可变借用在这里使用了</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>怎么回事呢？</p><p>我们试着改一下打印语句。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{c}&quot;</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 不打印b了，换成打印c</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#D19A66;">20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这下编译通过了，打印出 20。</p><p>我们尝试一下把变量 c 的定义移到前面一些，结果又不能编译了。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">// c的定义移到这里来了</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{c}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>提示：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">   Compiling</span><span style="color:#E06C75;"> playground</span><span style="color:#E06C75;"> v0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;"> (/</span><span style="color:#E06C75;">playground</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0502</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">cannot</span><span style="color:#E06C75;"> borrow</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#C678DD;">as</span><span style="color:#E06C75;"> mutable</span><span style="color:#E06C75;"> because</span><span style="color:#E06C75;"> it</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> also</span><span style="color:#E06C75;"> borrowed</span><span style="color:#C678DD;"> as</span><span style="color:#E06C75;"> immutable</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">13</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;        </span><span style="color:#7F848E;font-style:italic;">// c的定义移到这里来了</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">             -- </span><span style="color:#E06C75;">immutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">             ^^^^^^</span><span style="color:#E06C75;"> mutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#D19A66;">7</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{c}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">               --- </span><span style="color:#E06C75;">immutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> later</span><span style="color:#E06C75;"> used</span><span style="color:#E06C75;"> here</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>你有没有感觉 Rust 就像一头发疯的野牛！不听使唤。而我们现在要做的就是摸清它的脾气，驯服它！</p><p>再尝试修改代码，又编译通过了。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;           </span><span style="color:#7F848E;font-style:italic;">// c的定义移到这里来了</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);      </span><span style="color:#7F848E;font-style:italic;">// 这里打印的变量换成b</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>到这里为止，我们已经积累了不少素材了，从这些素材中你有没有发现什么规律？ <strong>引用的最后一次调用时机很关键</strong>。</p><p>前面我们讲过，一个所有权型变量的作用域是从它定义时开始到花括号结束。而引用型变量的作用域不是这样， <strong>引用型变量的作用域是从它定义起到它最后一次使用时结束。</strong> 比如上面的示例中，所有权型变量 a 的作用域是 2~8 行；不可变引用 c 的作用域只有第 3 行，它定义了，但并没有被使用，所以它的作用域就只有那一行；可变引用 b 的作用域是 4~7 行。</p><p>同时，我们发现还存在一条规则： <strong>一个所有权型变量的可变引用与不可变引用的作用域不能交叠</strong>，也可以说不能同时存在。我们用这条规则分析前面的示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{c}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>所有权型变量 a 的作用域是 2~8 行，不可变引用 c 的作用域是 3~7 行，可变引用 b 的作用域是 4~5 行。b 和 c 的作用域交叠了，因此无法编译通过。</p><p>后面你可以采用我的这种分析方法来分析每一个例子。</p><p>接下来我们再看一个例子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{d}&quot;</span><span style="color:#ABB2BF;">);      </span><span style="color:#7F848E;font-style:italic;">// 打印d</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#D19A66;">20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这个例子打印出 20。那我们尝试打印 b 试试。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);      </span><span style="color:#7F848E;font-style:italic;">// 打印b</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>编译不通过，提示：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">   Compiling</span><span style="color:#E06C75;"> playground</span><span style="color:#E06C75;"> v0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;"> (/</span><span style="color:#E06C75;">playground</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0499</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">cannot</span><span style="color:#E06C75;"> borrow</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#C678DD;">as</span><span style="color:#E06C75;"> mutable</span><span style="color:#E06C75;"> more</span><span style="color:#E06C75;"> than</span><span style="color:#E06C75;"> once</span><span style="color:#E06C75;"> at</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> time</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在一个时刻不能把\`a\`以可变借用形式借用超过一次</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">13</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">             ------ </span><span style="color:#E06C75;">first</span><span style="color:#E06C75;"> mutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> |</span><span style="color:#ABB2BF;">     *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">             ^^^^^^</span><span style="color:#E06C75;"> second</span><span style="color:#E06C75;"> mutable</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#D19A66;">6</span><span style="color:#56B6C2;"> |</span></span>
<span class="line"><span style="color:#D19A66;">7</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">               --- </span><span style="color:#E06C75;">first</span><span style="color:#E06C75;"> borrow</span><span style="color:#E06C75;"> later</span><span style="color:#E06C75;"> used</span><span style="color:#E06C75;"> here</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>编译器抱怨：“在一个时刻不能把 a 以可变借用形式借用超过一次”。分析代码后，我们发现确实这两个可变借用的作用域交叠了！b 的作用域是 3 ～ 7 行，d 的作用域是第 5 行，难怪会报错。于是我们又学到了一条经验： <strong>同一个所有权型变量的可变借用之间的作用域也不能交叠</strong>。</p><p>然后，让我们继续看。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> r1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{r1}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>编译报错：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">   Compiling</span><span style="color:#E06C75;"> playground</span><span style="color:#E06C75;"> v0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;"> (/</span><span style="color:#E06C75;">playground</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0506</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">cannot</span><span style="color:#E06C75;"> assign</span><span style="color:#E06C75;"> to</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">because</span><span style="color:#E06C75;"> it</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> borrowed</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 不能给a赋值，因为它被借用了</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">5</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> r1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">              -- \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">is</span><span style="color:#E06C75;"> borrowed</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;">     a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">     ^^^^^^</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">is</span><span style="color:#E06C75;"> assigned</span><span style="color:#E06C75;"> to</span><span style="color:#E06C75;"> here</span><span style="color:#E06C75;"> but</span><span style="color:#E06C75;"> it</span><span style="color:#E06C75;"> was</span><span style="color:#E06C75;"> already</span><span style="color:#E06C75;"> borrowed</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> |</span></span>
<span class="line"><span style="color:#D19A66;">6</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{r1}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">               ---- </span><span style="color:#E06C75;">borrow</span><span style="color:#E06C75;"> later</span><span style="color:#E06C75;"> used</span><span style="color:#E06C75;"> here</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>提示在有借用的情况下，不能对所有权变量进行更改值的操作（写操作）。</p><p>有可变借用存在的情况下也一样。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> r1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{r1}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>编译报错：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">   Compiling</span><span style="color:#E06C75;"> playground</span><span style="color:#E06C75;"> v0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;"> (/</span><span style="color:#E06C75;">playground</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0506</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">cannot</span><span style="color:#E06C75;"> assign</span><span style="color:#E06C75;"> to</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">because</span><span style="color:#E06C75;"> it</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> borrowed</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">5</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> r1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">              ------ \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">is</span><span style="color:#E06C75;"> borrowed</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;">     a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">     ^^^^^^</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">is</span><span style="color:#E06C75;"> assigned</span><span style="color:#E06C75;"> to</span><span style="color:#E06C75;"> here</span><span style="color:#E06C75;"> but</span><span style="color:#E06C75;"> it</span><span style="color:#E06C75;"> was</span><span style="color:#E06C75;"> already</span><span style="color:#E06C75;"> borrowed</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> |</span></span>
<span class="line"><span style="color:#D19A66;">6</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{r1}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">               ---- </span><span style="color:#E06C75;">borrow</span><span style="color:#E06C75;"> later</span><span style="color:#E06C75;"> used</span><span style="color:#E06C75;"> here</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>提示在有借用的情况下，不能对所有权变量进行更改值的操作（写操作）。</p><p>通过前面这么多例子的摸索，你是不是找到了一些规律？到此为止，我们可以做一下阶段性的总结，得出关于引用（借用）的一些规则。</p><ul><li>所有权型变量的作用域是从它定义时开始到所属那层花括号结束。</li><li>引用型变量的作用域是从它定义起到它最后一次使用时结束。</li><li>引用（不可变引用和可变引用）型变量的作用域不会长于所有权变量的作用域。这是肯定的，不然就会出现悬锤引用，这是典型的内存安全问题。</li><li>一个所有权型变量的不可变引用可以同时存在多个，可以复制多份。</li><li>一个所有权型变量的可变引用与不可变引用的作用域不能交叠，也可以说不能同时存在。</li><li>某个时刻对某个所有权型变量只能存在一个可变引用，不能有超过一个可变借用同时存在，也可以说，对同一个所有权型变量的可变借用之间的作用域不能交叠。</li><li>在有借用存在的情况下，不能通过原所有权型变量对值进行更新。当借用完成后（借用的作用域结束后），物归原主，又可以使用所有权型变量对值做更新操作了。</li></ul><p>下面我们再来试试可变引用能否被复制。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> r1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> r2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> r1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{r1}&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>出错了，提示：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0382</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">borrow</span><span style="color:#E06C75;"> of</span><span style="color:#E06C75;"> moved</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">: \`</span><span style="color:#E06C75;">r1</span><span style="color:#ABB2BF;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">16</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">3</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> r1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">         -- </span><span style="color:#C678DD;">move</span><span style="color:#E06C75;"> occurs</span><span style="color:#E06C75;"> because</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">r1</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">has</span><span style="color:#C678DD;"> type</span><span style="color:#ABB2BF;"> \`&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> u32</span><span style="color:#ABB2BF;">\`, </span><span style="color:#E06C75;">which</span><span style="color:#E06C75;"> does</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> implement</span><span style="color:#E06C75;"> the</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Copy</span><span style="color:#ABB2BF;">\` </span><span style="color:#C678DD;">trait</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> r2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> r1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">              -- </span><span style="color:#E06C75;">value</span><span style="color:#E06C75;"> moved</span><span style="color:#E06C75;"> here</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> |</span></span>
<span class="line"><span style="color:#D19A66;">6</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{r1}&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">                ^^</span><span style="color:#E06C75;"> value</span><span style="color:#E06C75;"> borrowed</span><span style="color:#E06C75;"> here</span><span style="color:#E06C75;"> after</span><span style="color:#C678DD;"> move</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>它说 r1 的值移动给了 r2，因此 r1 不能再被使用了。</p><p>我们修改一下例子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> r1</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> r2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> r1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{r2}&quot;</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 打印r2</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#D19A66;">10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>成功打印。</p><p>从这个例子可以看出，可变引用的再赋值，会执行移动操作。赋值后，原来的那个可变引用变量就不能用了。这有点类似于所有权的转移，因此 <strong>一个所有权型变量的可变引用也具有所有权特征</strong>，它可以被理解为那个所有权变量的独家代理，具有 <strong>排它性</strong>。</p><h2 id="多级引用" tabindex="-1">多级引用 <a class="header-anchor" href="#多级引用" aria-label="Permalink to &quot;多级引用&quot;">​</a></h2><p>我们来看剩下的一些语言细节。下面这段代码展示了 <code>mut</code> 修饰符， <code>&amp;mut</code> 和 <code>&amp;</code> 同时出现的情况。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a1</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a2</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 15</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>下面我们再来看一个多级可变引用的例子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a1</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    **</span><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;          </span><span style="color:#7F848E;font-style:italic;">// 多级解引用操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{c}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#D19A66;">30</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>假如我们解引用错误会怎样，来看看。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a1</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    *</span><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;            </span><span style="color:#7F848E;font-style:italic;">// 这里对二级可变引用只使用一级解引用操作</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{c}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>哦！会报错。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">   Compiling</span><span style="color:#E06C75;"> playground</span><span style="color:#E06C75;"> v0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">0.1</span><span style="color:#ABB2BF;"> (/</span><span style="color:#E06C75;">playground</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0308</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">mismatched</span><span style="color:#E06C75;"> types</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">10</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">7</span><span style="color:#56B6C2;"> |</span><span style="color:#ABB2BF;">     *</span><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">     --   </span><span style="color:#56B6C2;">^^</span><span style="color:#E06C75;"> expected</span><span style="color:#ABB2BF;"> \`&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> u32</span><span style="color:#ABB2BF;">\`, </span><span style="color:#E06C75;">found</span><span style="color:#E06C75;"> integer</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">     |</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#E06C75;">     expected</span><span style="color:#E06C75;"> due</span><span style="color:#E06C75;"> to</span><span style="color:#E06C75;"> the</span><span style="color:#C678DD;"> type</span><span style="color:#E06C75;"> of</span><span style="color:#E06C75;"> this</span><span style="color:#E06C75;"> binding</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#E06C75;">help</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">consider</span><span style="color:#E06C75;"> dereferencing</span><span style="color:#E06C75;"> here</span><span style="color:#E06C75;"> to</span><span style="color:#E06C75;"> assign</span><span style="color:#E06C75;"> to</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> mutably</span><span style="color:#E06C75;"> borrowed</span><span style="color:#E06C75;"> value</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">7</span><span style="color:#56B6C2;"> |</span><span style="color:#ABB2BF;">     **</span><span style="color:#E06C75;">c</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">     +</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>它正确识别到了中间引用的类型为 <code>&amp;mut u32</code>，而我们却要给它赋值为 <code>u32</code>，一定是代码写错了，然后还给我们建议了正确的写法。强大！</p><p>我们再来看一个例子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a1</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> d</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> c</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    ***</span><span style="color:#E06C75;">d</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{d}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>提示：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0594</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">cannot</span><span style="color:#E06C75;"> assign</span><span style="color:#E06C75;"> to</span><span style="color:#ABB2BF;"> \`***</span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">\`, </span><span style="color:#E06C75;">which</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> behind</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> \`&amp;\` </span><span style="color:#E06C75;">reference</span></span>
<span class="line"><span style="color:#ABB2BF;">  --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">21</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">5</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span></span>
<span class="line"><span style="color:#D19A66;">21</span><span style="color:#56B6C2;"> |</span><span style="color:#ABB2BF;">     ***</span><span style="color:#E06C75;">d</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 30</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">   |</span><span style="color:#56B6C2;">     ^^^^^^^^^</span><span style="color:#E06C75;"> cannot</span><span style="color:#E06C75;"> assign</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">For</span><span style="color:#E06C75;"> more</span><span style="color:#E06C75;"> information</span><span style="color:#E06C75;"> about</span><span style="color:#E06C75;"> this</span><span style="color:#E06C75;"> error</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E06C75;">rustc</span><span style="color:#ABB2BF;"> --</span><span style="color:#E06C75;">exrust</span><span style="color:#E5C07B;"> E0594</span><span style="color:#ABB2BF;">\`.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>提示：不能这样更新目标的值，因为目标躲在一个 <code>&amp;</code> 引用后面。</p><p>这里，我们又可以发现 Rust 中三条关于引用的知识点。</p><ul><li>对于多级可变引用，要利用可变引用去修改目标资源的值的时候，需要做正确的多级解引用操作，比如例子中的 <code>**c</code>，做了两级解引用。</li><li>只有全是多级可变引用的情况下，才能修改到目标资源的值。</li><li>对于多级引用（包含可变和不可变），打印语句中，可以自动为我们解引用正确的层数，直到访问到目标资源的值，这很符合人的直觉和业务的需求。</li></ul><h2 id="用引用改进函数的定义" tabindex="-1">用引用改进函数的定义 <a class="header-anchor" href="#用引用改进函数的定义" aria-label="Permalink to &quot;用引用改进函数的定义&quot;">​</a></h2><p>有了引用这个设施，我们可以改进前面将字符串所有权传进函数，然后又传出来的例子。第一个例子是将字符串的不可变引用传进函数参数。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;in fn foo: {s}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I am a superman.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    foo</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 注意这里传的是字符串的引用 &amp;s1</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{s1}&quot;</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 这里可以打印s1的值了</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>可以看到，打印出了正确的结果。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">in</span><span style="color:#C678DD;"> fn</span><span style="color:#E06C75;"> foo</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">I</span><span style="color:#E06C75;"> am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> superman</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#E06C75;"> am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> superman</span><span style="color:#ABB2BF;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后我们试试将字符串的可变引用传进函数，并修改字符串的内容。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push_str</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot; You are batman.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> s1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I am a superman.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{s1}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    foo</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> s1</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 注意这里传的是字符串的可变引用 &amp;mut s1</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{s1}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>输出：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">I</span><span style="color:#E06C75;"> am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> superman</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">I</span><span style="color:#E06C75;"> am</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> superman</span><span style="color:#ABB2BF;">. </span><span style="color:#E5C07B;">You</span><span style="color:#E06C75;"> are</span><span style="color:#E06C75;"> batman</span><span style="color:#ABB2BF;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>与我们的期望一致。我们成功地使用引用，来改进函数的传参过程以及函数的定义，我们这里的 <code>foo</code> 函数，不再需要费力地把所有权再传回来了。</p><p>从代码中可以看到，这里 Rust 的代码 <code>&amp;s1</code> 和 <code>&amp;mut s1</code> 留下了清晰的足迹。如果一个函数参数接受的是可变引用或所有权参数，那么它里面的逻辑一般都会对其引用的资源进行修改。如果一个函数参数只接受不可变引用，那么它里面的逻辑，就一定不会修改被引用的资源。简单的一个参数的签名形式，就将函数的意图初步划分出来了。就是这么清晰，非常利于代码的阅读。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这节课我带着你摸了一遍 Rust 这头野牛的怪脾气，现在已经大致清楚了。下面我们一起来总结一下这节课的主要内容。</p><p>在同一时刻，同一个所有权变量的不可变引用和可变引用两者不能同时存在，不可变引用可以同时存在多个。可变引用具有排它性，只能同时存在一个。</p><p>借用结束后，原本的所有权变量会重新恢复可读可写的状态。不可变引用可以被任意复制多份，但是可变引用不能被复制，只能转移，这也体现了 <strong>可变引用具有一定的所有权特征</strong>。所有权和引用模型是 Rust 语言编写高可靠和高性能代码的基础，理解这些模型有助于优化程序的效率，提高代码质量。</p><p><img src="`+o+`" alt=""></p><p>本文通过探索性的方式尝试遍历不可变引用与可变引用的各种形式和可能的组合，由此揭开了 Rust 中引用的各种性质以及同所有权的关系，并总结出了多条相关规则。看起来略显繁琐，但每个示例其实非常简单，理解起来并不困难。请一定记住， <strong>不要死记硬背那些条条框框，请你亲自敲上面的代码示例，编译并运行它，在实践中去理解它们</strong>。久而久之，就会形成一种思维习惯，觉得 Rust 中的这种设计是理所当然的了。</p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>1.请思考，为何在不可变引用存在的情况下（只是读操作），原所有权变量也无法写入？</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> &amp;</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>2.请回答，可变引用复制的时候，为什么不允许 copy，而是 move？</p><p>欢迎你把你思考后的答案分享到评论区，和我一起讨论，也欢迎你把这节课分享给需要的朋友，邀他一起学习，我们下节课再见！</p>`,135)]))}const u=n(e,[["render",r]]);export{b as __pageData,u as default};
