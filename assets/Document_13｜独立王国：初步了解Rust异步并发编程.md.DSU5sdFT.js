import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D2WelYEY.js";const o="/tanggang_rust/assets/cb7a4be8f0ae2f99f99967e2b8398b68.TkyMEX2b.png",e="/tanggang_rust/assets/8d8befc6fc1fb09b5f496489b3bb3611.C8flCWyH.jpg",d=JSON.parse('{"title":"13 ｜独立王国：初步了解 Rust 异步并发编程","description":"","frontmatter":{},"headers":[],"relativePath":"Document/13｜独立王国：初步了解Rust异步并发编程.md","filePath":"Document/13｜独立王国：初步了解Rust异步并发编程.md","lastUpdated":1740766764000}'),t={name:"Document/13｜独立王国：初步了解Rust异步并发编程.md"};function r(c,s,i,B,y,u){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_13-独立王国-初步了解-rust-异步并发编程" tabindex="-1">13 ｜独立王国：初步了解 Rust 异步并发编程 <a class="header-anchor" href="#_13-独立王国-初步了解-rust-异步并发编程" aria-label="Permalink to &quot;13 ｜独立王国：初步了解 Rust 异步并发编程&quot;">​</a></h1><p>你好，我是 Mike。从今天开始，我们会用几节课的时间系统学习 Rust 异步并发编程。</p><p>和其他语言不大一样的是，异步 Rust（async Rust）相当于 Rust 世界里的一块儿新的王国，这个王国有一定的独立性，有它突出的特点。当然，独立并不代表封闭，我们前面所有的知识和经验仍然能顺利地在这个王国里发挥作用。</p><h2 id="async-rust" tabindex="-1">async rust <a class="header-anchor" href="#async-rust" aria-label="Permalink to &quot;async rust&quot;">​</a></h2><p>从 Rust v1.39 版本以后，Rust 引入了 async 关键字，用于支持异步编程的工程学体验，使程序员可以用已经习惯了的同步代码书写方式来编写异步代码。</p><p>如果你了解过早期的 JavaScript 语言，你可能会对回调模式以及“回调地狱”有所了解。感兴趣的话，你可以搜索“回调地狱”这个关键词，看看它是如何产生的，以及可以用什么方式去解决。</p><p>JavaScript 在 ECMAScript 2017 版本中引入了 <code>async/await</code> 关键字组合，用于改进 JavaScript 中异步编程体验，从此以后程序员可以用顺序的逻辑书写方式来写出异步执行的代码，而不是那种用回调方式把一段连续的逻辑切割成一小块一小块的。</p><p>Rust 其实也差不多，它用类似的方式引入了 <code>async/.await</code> 关键字对。如果你对 Mozilla 公司有所了解的话，就不会感觉奇怪了，Mozilla 是互联网标准组织的重要成员，JavaScript 之父就在 Mozilla 公司，参与了 JavaScript 标准制定的全过程。同时，Mozilla 还推出了 Rust 语言以及 WebAssembly 字节码规范。</p><h3 id="async-函数和块-代码片段" tabindex="-1">async 函数和块（代码片段） <a class="header-anchor" href="#async-函数和块-代码片段" aria-label="Permalink to &quot;async 函数和块（代码片段）&quot;">​</a></h3><p>在 Rust 中，用上 async 的函数长这样：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>也就是在原来的 fn 前加上 async 修饰。另外，还有所谓的 async 块，也就是直接在 async 后面加花括号。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 这就是async块</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    async</span><span style="color:#C678DD;"> move</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 加move，类似闭包，明确标识把用到的环境变量移动进来</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面的函数是可以编译通过的，但是这样写本身会有一些问题。</p><p>提示：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">futures</span><span style="color:#C678DD;"> do</span><span style="color:#E06C75;"> nothing</span><span style="color:#E06C75;"> unless</span><span style="color:#E06C75;"> you</span><span style="color:#ABB2BF;"> \`.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">or</span><span style="color:#E06C75;"> poll</span><span style="color:#E06C75;"> them</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>翻译出来就是：futures 不做任何事情，除非你用 <code>.await</code> 或轮询它们。</p><p>Rust 中，async 函数或块会被视作一个 Future 对象，类似于 JS 里的 Promise，async 关键字只是用来定义这个 Future 对象，定义好的这片异步代码并不会自动执行，而是需要和 async 配对的 <code>.await</code> 去驱动它才会执行。</p><p>比如像下面这样：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;            </span><span style="color:#7F848E;font-style:italic;">// 用.await驱动异步块</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 或者更紧凑的写法</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    async</span><span style="color:#ABB2BF;"> {}.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>但是，上述代码是没办法通过编译的，会报这个错。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0728</span><span style="color:#ABB2BF;">]: \`</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">is</span><span style="color:#E06C75;"> only</span><span style="color:#E06C75;"> allowed</span><span style="color:#E06C75;"> inside</span><span style="color:#ABB2BF;"> \`</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">functions</span><span style="color:#E06C75;"> and</span><span style="color:#E06C75;"> blocks</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>它提示说， <code>await</code> 关键字只能在 async 块或函数里使用。</p><p>于是得改成这样才行：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里我们看到两条规则。</p><ol><li>用 async 定义异步代码，用 <code>.await</code> 驱动执行。</li><li>但是 <code>.await</code> 又只能在 async 块中调用。</li></ol><p>细心的你可能一下子就推理出来了，这不就是鸡和蛋的问题吗？那么第一个最外层的 async 代码块或函数如何被调用呢？</p><p>我们知道，Rust 的程序都是从 main 函数开始执行的。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>即使是异步代码，也不能破坏这个规则。</p><p>我们试着这样写：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {      </span><span style="color:#7F848E;font-style:italic;">// 在main函数前加一个async修饰</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>会报错：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0752</span><span style="color:#ABB2BF;">]: \`</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">function</span><span style="color:#E06C75;"> is</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> allowed</span><span style="color:#E06C75;"> to</span><span style="color:#E06C75;"> be</span><span style="color:#ABB2BF;"> \`</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;">\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Rust 明确规定了，main 函数前不能加 async 修饰。也就是说，只能写成这种形式。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E06C75;">    a</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>但是前面又说过了， <code>.await</code> 只能写在 async 代码块或函数里。我们进入了一个两难的境地。如果就在目前这个体系里面寻找解决方案的话，那只能原地打转。</p><p><strong>这里必然要引入一种外部驱动机制</strong>。比如，有一个辅助函数，它可以接收 Future，并驱动它，而不需要使用 <code>.await</code>。像下面这样就行了。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> async</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#61AFEF;">    block_on</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 辅助驱动函数 block_on</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>那么，这个 <code>block_on()</code> 到底是什么呢？</p><p><strong>这个 <code>block_on()</code> 可不是一个普通的函数，它必须是一个运行时（Runtime）的入口。在它下面，蕴藏着一整套运行时机制。</strong></p><p>到目前为止，我们已经知道，仅仅利用我们之前学到的 Rust 知识，还驱动不了异步代码，必须要借助于一种新的叫做运行时（Runtime）的机制才能处理。</p><p>目前 Rust 标准库中还没有内置一个官方的异步 Runtime，不过 Rust 生态中有很多第三方的 Runtime 实现库，比如 tokio、async-std 等。而其中 tokio 应用最为广泛。 <strong>通过几年的时间，tokio 在第三方异步 Runtime 的激烈竞争中胜出，可以说它现在已经成为了 Rust 生态中异步运行时事实上的标准。</strong></p><p>我们下面就开始讲解这个运行时机制。</p><h3 id="异步运行时是什么" tabindex="-1">异步运行时是什么？ <a class="header-anchor" href="#异步运行时是什么" aria-label="Permalink to &quot;异步运行时是什么？&quot;">​</a></h3><p>异步运行时是一个库，这个库包含一个响应器（reactor）和一个或多个执行器（executor）。它需要处理哪些事情呢？</p><ol><li>执行异步代码。</li><li>遇到 <code>.await</code> 的时候，判断能不能获取到结果。如果不能，CPU 不会一直阻塞等，而是缓存当前任务的状态，然后将当前任务挂起，放到内部一个任务池中，同时向 OS 注册要监听等待的外部事件。</li><li>询问或执行其他任务。如果所有任务都暂时没有进展，就会进入一个空闲（idle）状态，不会使 CPU 忙等待。</li><li>只要某个任务对应所监听到的信号来了，也就是说有结果返回了，就会把对应的任务重新捡起来，并从缓存中恢复暂停前的状态，继续往下执行。从代码上看，就是从上一个 <code>.await</code> 后面的代码继续往下执行。</li><li>遇到下一个 <code>.await</code>，就重复第 1 步～第 4 步。</li><li>直到这个异步代码（函数）执行完毕，完成操作或返回结果。</li></ol><p>总结起来，就是这 6 项任务。</p><ol><li>异步代码的执行；</li><li>任务的暂停；</li><li>状态的缓存；</li><li>外部事件的监听注册；</li><li>外部信号来了后，唤醒对应的任务，恢复任务状态；</li><li>多个任务间的调度。</li></ol><p>总之，Rust 异步运行时要干的事情还不少。要设计一个高效的异步运行时是一件相当有技术挑战的工作。后面我们会以 tokio 为例来介绍 Rust 中的异步编程。</p><h2 id="tokio-异步编程" tabindex="-1">tokio 异步编程 <a class="header-anchor" href="#tokio-异步编程" aria-label="Permalink to &quot;tokio 异步编程&quot;">​</a></h2><p>下面我们来熟悉一下基于 tokio runtime 的代码范例。</p><h3 id="引入依赖" tabindex="-1">引入依赖 <a class="header-anchor" href="#引入依赖" aria-label="Permalink to &quot;引入依赖&quot;">​</a></h3><p>首先，你得在 Cargo.toml 中引入 tokio 依赖。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">tokio</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">version</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">features</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;full&quot;</span><span style="color:#ABB2BF;">] }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="main-函数" tabindex="-1">main 函数 <a class="header-anchor" href="#main-函数" aria-label="Permalink to &quot;main 函数&quot;">​</a></h3><p>然后，我们把 tokio 提供的一个属性宏标注在 main 函数上面，这样 main 函数前就可以加 async 修饰了。</p><p>像下面这样：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[tokio::main]      </span><span style="color:#7F848E;font-style:italic;">// 这个是tokio库里面提供的一个属性宏标注</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {   </span><span style="color:#7F848E;font-style:italic;">// 注意 main 函数前面有 async</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello world&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这个 <code>#[tokio::main]</code> 做的事情其实就是把用 async 修饰的 main 函数展开，展开会类似下面这个样子：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">runtime</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new_multi_thread</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">enable_all</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">block_on</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {              </span><span style="color:#7F848E;font-style:italic;">// 注意这里block_on，里面是异步代码</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello world&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>也就是在 main 函数里构建一个 Runtime 实例，第二行代码的意思是 tokio 库下 Runtime 模块的 Builder 类型里的 <code>new_multi_thread()</code> 函数，整个路径用 <code>::</code> 号连接， <code>::</code> 也叫路径符。这个函数创建的是多线程版本的 Runtime 实例。</p><p><code>.enable_all()</code> 用于打开默认所有配置， <code>.build()</code> 用于真正创建实例，它返回一个用 Result 包起来的结果， <code>.unwrap()</code> 把这个 Result 解开，把 Runtime 实例拿出来，然后在这个实例上调用 <code>.block_on()</code> 函数。整个过程用的是 <strong>链式调用风格</strong>，这个风格在其他语言中也很普遍，只要遵循前一个函数调用返回自身或者新的对象即可。</p><p><code>block_on()</code> 会执行异步代码，这样就把异步代码给加载到这个 Runtime 实例上并驱动起来了。</p><p>tokio 还可以基于当前系统线程创建单线程的 Runtime，你可以看一下示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[tokio::main(flavor </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;current_thread&quot;</span><span style="color:#ABB2BF;">)]  </span><span style="color:#7F848E;font-style:italic;">// 属性标注里面配置参数</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello world&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>展开后，是这个样子的：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">runtime</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Builder</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new_current_thread</span><span style="color:#ABB2BF;">()  </span><span style="color:#7F848E;font-style:italic;">// 注意这一句</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">enable_all</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">block_on</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">            println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello world&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>单线程的 Runtime 由 <code>Builder::new_current_thread()</code>  函数创建，代码的其他部分和多线程 Runtime 都一样。</p><h3 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h3><p>这里，我们先看几个例子，来了解一下基于 tokio 的代码长什么样子。</p><h4 id="文件写" tabindex="-1">文件写 <a class="header-anchor" href="#文件写" aria-label="Permalink to &quot;文件写&quot;">​</a></h4><p>下面的例子展示了如何基于 tokio 做文件的写操作。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">AsyncWriteExt</span><span style="color:#ABB2BF;">;     </span><span style="color:#7F848E;font-style:italic;">// 引入AsyncWriteExt trait</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> doit</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;()&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;foo.txt&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 创建文件</span></span>
<span class="line"><span style="color:#E06C75;">    file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write_all</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">b&quot;hello, world!&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();        </span><span style="color:#7F848E;font-style:italic;">// 写入内容</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> doit</span><span style="color:#ABB2BF;">().</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;   </span><span style="color:#7F848E;font-style:italic;">// 注意这里的.await</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="文件读" tabindex="-1">文件读 <a class="header-anchor" href="#文件读" aria-label="Permalink to &quot;文件读&quot;">​</a></h4><p>下面的例子展示了如何基于 tokio 做文件的读操作。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">AsyncReadExt</span><span style="color:#ABB2BF;">;   </span><span style="color:#7F848E;font-style:italic;">// 引入AsyncReadExt trait</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> doit</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;()&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;foo.txt&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 打开文件</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> contents</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 将文件内容读到contents动态数组里面，注意传入的是可变引用</span></span>
<span class="line"><span style="color:#E06C75;">    file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read_to_end</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> contents</span><span style="color:#ABB2BF;">).</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;len = {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">contents</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> doit</span><span style="color:#ABB2BF;">().</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;  </span><span style="color:#7F848E;font-style:italic;">// 注意这里的.await</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // process</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>可以看到，Rust 的异步代码和 JavaScript 的异步代码非常类似，只不过 JavaScript 的 await 关键字是放在语句前面的。</p><h4 id="定时器操作" tabindex="-1">定时器操作 <a class="header-anchor" href="#定时器操作" aria-label="Permalink to &quot;定时器操作&quot;">​</a></h4><p>下面的例子展示了如何基于 tokio 做定时器操作。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::time;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">time</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 创建Interval实例</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> interval</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> time</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">interval</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Duration</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_millis</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 滴答，立即执行</span></span>
<span class="line"><span style="color:#E06C75;">    interval</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tick</span><span style="color:#ABB2BF;">().</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 滴答，这个滴答完成后，10ms过去了</span></span>
<span class="line"><span style="color:#E06C75;">    interval</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tick</span><span style="color:#ABB2BF;">().</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 滴答，这个滴答完成后，20ms过去了</span></span>
<span class="line"><span style="color:#E06C75;">    interval</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tick</span><span style="color:#ABB2BF;">().</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面示例里的时间段， <code>Duration::from_millis(10)</code> 表示创建一个 10ms 的时间段，我们在其他语言中更多是习惯直接传入一个数字，比如传 10000 进去，默认单位是 us。但是前面我们说过，Rust 中会尽可能地类型化，因此这里定义了一个 Duration 类型，它可以接收来自 s、ms、us 等单位的数值来构造时间段。在这点上，Java 和 Rust 是比较像的。</p><h3 id="tokio-组件" tabindex="-1">tokio 组件 <a class="header-anchor" href="#tokio-组件" aria-label="Permalink to &quot;tokio 组件&quot;">​</a></h3><p>tokio 发展到现在，已经是一个功能丰富、机制完善的 Runtime 框架了。它针对异步场景把 Rust 标准库里对应的类型和设施都重新实现了一遍。具体包含 6 个部分。</p><ul><li>Runtime 设施组件：你可以自由地配置创建基于系统单线程的 Runtime 和多线程的 Runtime。</li><li>轻量级任务 task：你可以把它理解成类似 Go 语言中的 Goroutine 这种轻量级线程，而不是操作系统层面的线程。</li><li>异步输入输出（I/O）：网络模块 net、文件操作模块 fs、signal 模块、process 模块等。</li><li>时间模块：定时器 Interval 等。</li><li>异步场景下的同步原语：channel、Mutex 锁等等。</li><li>在异步环境下执行计算密集型任务的方案 <code>spawn_blocking</code> 等等。</li></ul><p>通过对这些基础设施的重新实现，tokio 为 Rust 异步编程的生态打下了坚实的基础，通过几年的发展，一些上层建筑蓬勃发展起来了。比如：</p><ul><li>Hyper：HTTP 协议 Server 和 Client 的实现</li><li>Axum：Web 开发框架</li><li>async-graphql：GraphQL 开发框架</li><li>tonic：gRPC 框架的 Rust 实现</li><li>……</li></ul><h3 id="tokio-底层机制" tabindex="-1">tokio 底层机制 <a class="header-anchor" href="#tokio-底层机制" aria-label="Permalink to &quot;tokio 底层机制&quot;">​</a></h3><p>下面我们来看一下 tokio 的底层魔法到底是什么？</p><p><img src="`+o+`" alt=""></p><p>最底层是硬件、CPU 等。在其上是操作系统，Linux、Windows、macOS 等。不同的操作系统会提供不同的异步抽象机制，比如 Linux 下有 epoll，macOS 下有 kqueue。</p><p>Tokio 的异步 Runtime 能力实际正是建立在操作系统的这些异步机制上的。Tokio 的 reactor 用来接收从操作系统的异步框架中传回的消息事件，然后通知 tokio waker 把对应的任务唤醒，放回 tokio executor 中执行。每一个任务会被抽象成一个 Future 来独立处理，而每一个 Future 在 Rust 中会被处理成一个结构体，用状态机的方式来管理。Tokio 中还实现了对这些任务的安排调度机制。</p><p>注：官方的 <a href="https://rust-lang.github.io/async-book/" target="_blank" rel="noreferrer">async book</a> 有对这个专题更深入的讲解：不过这本异步书写得偏难，并不适合新手，有兴趣的话可以翻阅一下。</p><h3 id="task-轻量级线程" tabindex="-1">task：轻量级线程 <a class="header-anchor" href="#task-轻量级线程" aria-label="Permalink to &quot;task：轻量级线程&quot;">​</a></h3><p>tokio 提供了一种合作式（而非抢占式）的任务模型：每个任务 task 都可以看作是一个轻量级的线程，与操作系统线程相对。操作系统默认的线程机制需要消耗比较多的资源，一台普通服务器上能启动的总线程数一般最多也就几千个。而 tokio 的轻量级线程可以在一台普通服务器上创建上百万个。</p><h4 id="m-n-模型" tabindex="-1">M：N 模型 <a class="header-anchor" href="#m-n-模型" aria-label="Permalink to &quot;M：N 模型&quot;">​</a></h4><p>tokio 的这个模型是一种 M：N 模型，M 表示轻量级线程的数量，N 表示操作系统线程的数量。也就是说，它实际是将所有的轻量级线程映射到具体的 N 个操作系统线程上来执行，相当于在操作系统线程之上抽象了一层，这层抽象是否高效正是衡量一个 Runtime 好坏的核心标准。其中，操作系统线程数量 N 是可以由开发者自行配置的，最常用的默认配置是一个机器上有多少 CPU 逻辑处理器核，N 就等于多少。</p><h4 id="合作式" tabindex="-1">合作式 <a class="header-anchor" href="#合作式" aria-label="Permalink to &quot;合作式&quot;">​</a></h4><p>同时，tokio 的轻量级线程之间的关系是一种合作式的。合作式的意思就是同一个 CPU 核上的任务大家是配合着执行（不同 CPU 核上的任务是并行执行的）。我们可以设想一个简单的场景，A 和 B 两个任务被分配到了同一个 CPU 核上，A 先执行，那么，只有在 A 异步代码中碰到 <code>.await</code> 而且不能立即得到返回值的时候，才会触发挂起，进而切换到任务 B 执行。</p><p>当任务 B 碰到 <code>.await</code> 时，又会回去检查一下任务 A 所 await 的那个值回来没有，如果回来了就唤醒任务 A，从之前那个 <code>.await</code> 后面的语句继续执行；如果没回来就继续等待，或者看看能不能从其他核上拿点任务过来执行，因为此时任务 A 和任务 B 都在等待 await 的值回来。任何一个 task 里 await 的值回来后（会由操作系统向 tokio 通知一个事件），tokio 就会唤醒对应的 task 继续往下执行。</p><p>也就是说，在一个 task 没有遇到 <code>.await</code> 之前，它是不会主动交出这个 CPU 核的，其他 task 也不能主动来抢占这个 CPU 核。所以 tokio 实现的这个模型叫做合作式的。和它相对的，Go 语言自带的 Runtime 实现的 Goroutine 是一种抢占式的轻量级线程。</p><h4 id="非阻塞" tabindex="-1">非阻塞 <a class="header-anchor" href="#非阻塞" aria-label="Permalink to &quot;非阻塞&quot;">​</a></h4><p>从前面代码的示范及讲解可以看到，在程序员这个视角看来，代码层面的效果是一个 task（一段异步代码）遇到 <code>.await</code> 时，看起来就好像是被阻塞住了，会等待请求结果的返回。而从 tokio 底层的运行和调度机制来看，它又是非阻塞的。非阻塞的意思是，一个轻量级线程 task 的“卡住”，不会把用来承载它的操作系统线程给真正地卡住，OS 线程被调度了新的任务执行。这样，CPU 资源就没有被浪费。</p><p>这个 task 之间的调度工作是在 tokio 内部自动完成的，对程序员来说是不可见的。这样就带来了巨大的好处，程序员写异步并发代码，就跟之前写同步代码基本一样，顺着将逻辑写下去就行了。而不会因为去适应异步回调而把代码逻辑打碎分散到文件的各个地方。所以，tokio 的 task 在真正执行的时候是非阻塞的，不会对系统资源造成浪费。</p><p>下面我们来看一下如何创建 tokio task，这需要使用 <code>task::spawn()</code> 函数。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::task;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 在这里执行异步任务</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在这个示例里，main 函数里面创建了一个新的 task，用来执行具体的任务。我们需要知道，tokio 管理下的 <code>async fn main() {}</code> 本身就是一个 task，相当于在 main task 中，创建了一个新的 task 来执行。这里，main task 就是父 task，新创建的这个 task 是子 task。</p><p>那聪明的你可能要问了，这两个 task 之间的生存关系是怎样的呢？它们其实是没有关系的。在 tokio 中，子 task 的生存期有可能超过父 task 的生存期，也就是父 task 执行结束了，但子 task 还在执行。如果在父 task 里要等待子 task 执行完，再结束自己，保险的做法是用 JoinHandler。</p><p>注：在 main 函数中有更多细节，如果 main 函数所在的 task 先结束了，会导致整个程序进程退出，有可能会强制杀掉那些新创建的子 task。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::task;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 在这里执行异步任务</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#98C379;">        &quot;hello world!&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 等待子任务结束，返回结果</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> task_a</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">    assert_eq!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">result</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;hello world!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>JoinHandler 是什么意思呢？这个新概念跟 task 的管理相关。我们在 main task 中里创建一个新 task 后， <code>task::spawn()</code> 函数实际有一个返回值，它返回一个 handler，这个 handler 可以让我们在 main task 里管理新创建的 task。这个 handler 也可以用来指代这个新的 task，相当于给这个 task 取了一个名字。比如示例里，我们就把这个新的任务命名为 task_a，它的类型是 JoinHandler。在用 <code>spawn()</code> 创建 task_a 后，这个新任务就 <strong>立即执行</strong>。</p><p><code>task_a.await</code> 会返回一个 Result，所以上面代码中，需要加一个 <code>unwrap()</code> 把 task_a 真正的返回内容解包出来。至于对 task 的 <code>.await</code> 为什么会返回一个 Result，而不是直接返回异步任务的返回值本身，是因为 task 里有可能会发生 panic。你可以看一下例子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::task;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> task_a</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> task</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        panic!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;something bad happened!&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 当task_a里面panic时，对task handler进行.await，会得到Err</span></span>
<span class="line"><span style="color:#61AFEF;">    assert!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task_a</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is_err</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>由于 task 可能会 panic，所以就得对 task 的返回值用 Result 包一层，这样方便在上一层的 task 里处理这种错误。 <strong>在 Rust 中，只要过程中有可能返回错误，那就果断用 Result 包一层作为返回值，这是典型做法。</strong></p><p>有了 JoinHandler，我们可以方便地创建一批新任务，并等待它们的返回值。你可以看一下示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> tokio</span><span style="color:#ABB2BF;">::task;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> my_background_op</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Starting background task {}.&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    s</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[tokio::main]</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ops</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> tasks</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_capacity</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ops</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> op</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> ops</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 任务创建后，立即开始运行，我们用一个Vec来持有各个任务的handler</span></span>
<span class="line"><span style="color:#E06C75;">        tasks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">tokio</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">my_background_op</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">op</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> outputs</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">with_capacity</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">tasks</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">len</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">    for</span><span style="color:#E06C75;"> task</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> tasks</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        outputs</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task</span><span style="color:#ABB2BF;">.</span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{:?}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">outputs</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">Starting</span><span style="color:#E06C75;"> background</span><span style="color:#E06C75;"> task</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">Starting</span><span style="color:#E06C75;"> background</span><span style="color:#E06C75;"> task</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">.</span></span>
<span class="line"><span style="color:#E5C07B;">Starting</span><span style="color:#E06C75;"> background</span><span style="color:#E06C75;"> task</span><span style="color:#D19A66;"> 3</span><span style="color:#ABB2BF;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>上面示例里，我们用 tasks 这个动态数组持有 3 个异步任务的 handler， <strong>它们是并发执行的</strong>。然后对 tasks 进行迭代，等待每个 task 执行完成，并且搜集任务的结果放到 outputs 动态数组里。最后打印出来。</p><p>可以看到，在 tokio 中创建一批任务并发执行非常简单，循环调用 <code>task::spawn()</code> 就行了，并且还能对创建的任务进行管理。</p><h3 id="哪些操作要加-await" tabindex="-1">哪些操作要加 <code>.await</code>？ <a class="header-anchor" href="#哪些操作要加-await" aria-label="Permalink to &quot;哪些操作要加 \`.await\`？&quot;">​</a></h3><p>到目前为止，我们已经初步感知到了 tokio 的强大能力，确实很好用，也很直观。但是我们还有一个疑惑，在写异步代码的时候，我怎么知道哪些地方该加 <code>.await</code>，哪些地方不该加呢？</p><p>一个总体的原则是， <strong>涉及到 I/O 操作的，都可以加</strong>，因为 tokio 已经帮我们实现了一份异步的对应于 Rust 标准库的 I/O 实现。最常见的 I/O 操作就是网络 I/O、磁盘 I/O 等等。具体来说，有几大模块。</p><ul><li>net 模块：网络操作；</li><li>fs 模块：文件操作；</li><li>定时器操作：Interval、sleep 等函数；</li><li>channel：四种管道 oneshot、mpsc、watch、broadcast；</li><li>signal 模块：系统信号处理；</li><li>process 模块：调用系统命令等。</li></ul><p>具体可以查看 <a href="https://docs.rs/tokio/1.32.0/tokio/index.html" target="_blank" rel="noreferrer">tokio API</a>。在查看 API 文档的时候，只要那个接口前面有 async 关键字修饰，那么使用的时候就需要加 <code>.await</code>。比如， <code>tokio::fs::read()</code> 的定义就是这样的：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> AsRef</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Path</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt;&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>而像其他的一些数据结构的基本操作，比如 <code>Vec&lt;T&gt;</code>、 <code>HashMap&lt;K, V&gt;</code> 的操作等，由于它们都是在内存里执行，它们的接口前面也没有 async 关键字修饰，所以不需要也不能加 <code>.await</code>。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这节课我们一起学习了 Async Rust 和 tokio 相关的基本概念。Async Rust 在整个 Rust 的体系中，相对于 std Rust 来讲是一片新的领地。</p><p><img src="`+e+'" alt=""></p><p>Rust 中的 async 代码具有 <strong>传染性</strong>，也就是说一个函数如果要调用一个 async 函数的话，它本身也需要是 async 函数。Rust 在语言层面提供了 <code>async/.await</code> 语法的支持，但是其并没有提供一个官方的异步运行时，来对异步代码的执行进行驱动。而 tokio 是整个 Rust 生态中经历过激烈竞争后的异步运行时胜出者，具有强大的功能、丰富的特性和广泛的使用度。</p><p>tokio 提供了一套轻量级线程模型，方便程序员使用 Rust 进行大规模并发程序开发，特别适合高性能 Web 服务器领域，也适合处理一般的异步业务。</p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>为什么我们要把 async Rust 叫做“独立王国”呢？欢迎你把自己的思考分享到评论区，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>',133)]))}const F=n(t,[["render",r]]);export{d as __pageData,F as default};
