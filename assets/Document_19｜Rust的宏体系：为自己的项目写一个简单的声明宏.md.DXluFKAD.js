import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D2WelYEY.js";const e="/tanggang_rust/assets/4bc66a9c6a378c89cd119e0acc189ee8.BcmmSUGd.png",o="/tanggang_rust/assets/10317a770528e280a4176d0fbd877c03.CeHmWvhl.jpg",d=JSON.parse('{"title":"19 ｜ Rust 的宏体系：为自己的项目写一个简单的声明宏","description":"","frontmatter":{},"headers":[],"relativePath":"Document/19｜Rust的宏体系：为自己的项目写一个简单的声明宏.md","filePath":"Document/19｜Rust的宏体系：为自己的项目写一个简单的声明宏.md","lastUpdated":1740766764000}'),r={name:"Document/19｜Rust的宏体系：为自己的项目写一个简单的声明宏.md"};function c(t,s,i,B,y,u){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_19-rust-的宏体系-为自己的项目写一个简单的声明宏" tabindex="-1">19 ｜ Rust 的宏体系：为自己的项目写一个简单的声明宏 <a class="header-anchor" href="#_19-rust-的宏体系-为自己的项目写一个简单的声明宏" aria-label="Permalink to &quot;19 ｜ Rust 的宏体系：为自己的项目写一个简单的声明宏&quot;">​</a></h1><p>你好，我是 Mike，今天我们一起来学习 Rust 语言中有关宏的知识。</p><p>宏是一套预处理设施。它的输入是代码本身，对代码进行变换然后输出新的代码。一般来说，输出的新代码必须是合法的当前语言的代码，用来喂给当前语言的编译器进行编译。</p><p>宏不是一门语言的必备选项，Java、Go 等语言就没有宏，而 C、CPP、Rust 等语言有宏，而且它们的宏工作方式不一样。</p><p>在 Rust 语言中，宏也属于语言的外围功能，用来增强 Rust 语言的核心功能，让 Rust 语言变得更方便好用。宏不属于 Rust 语言的核心，但这并不是说宏在 Rust 中不重要。其实在 Rust 代码中，宏随处可见，掌握宏的原理和用法，有助于我们编写更高效的 Rust 代码。</p><p>在 Rust 中，宏的解析和执行是在 Rust 代码的编译阶段之前。你可以理解成，在 Rust 代码编译之前有一个宏展开的过程，这个过程的输出结果就是完整版的 Rust 代码，然后 Rust 编译器再来编译这个输出的代码。</p><h2 id="rust-语言中的宏" tabindex="-1">Rust 语言中的宏 <a class="header-anchor" href="#rust-语言中的宏" aria-label="Permalink to &quot;Rust 语言中的宏&quot;">​</a></h2><p>当前版本的 Rust 中有两大类宏：声明宏（declarative macro）和过程宏（procedure macro），而过程宏又细分成三种：派生宏、属性宏和函数宏。</p><p>下面我们分别介绍一下它们。</p><h3 id="声明宏" tabindex="-1">声明宏 <a class="header-anchor" href="#声明宏" aria-label="Permalink to &quot;声明宏&quot;">​</a></h3><p>声明宏是用 <code>macro_rules!</code> 定义的宏，我们常见的 <code>println!()</code>、 <code>vec![]</code> 都是这种宏。比如 <code>vec![]</code> 是按类似下面这种方式定义的：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[macro_export]</span></span>
<span class="line"><span style="color:#61AFEF;">macro_rules!</span><span style="color:#61AFEF;"> vec</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ( $( $</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">expr</span><span style="color:#ABB2BF;"> ),* ) =&gt; {</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> temp_vec</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            $(</span></span>
<span class="line"><span style="color:#E06C75;">                temp_vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">($</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">            )*</span></span>
<span class="line"><span style="color:#E06C75;">            temp_vec</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>注：代码来自官方 The Book，这是一个演示版的定义，实际的 <code>vec!</code> 的定义比这个要复杂得多。</p><p>这是什么代码？完全看不懂，不是正常的 Rust 代码吧？是的，为了对 Rust 代码本身进行操作，需要重新定义一套语法形式，而这种语法形式，只在 <code>macro_rules!</code> 里有效。</p><p>宏整体上来说，使用了一种 <strong>代码匹配 + 生成机制</strong> 来生成新的代码。上面代码里的 <code>$()</code> 用来匹配代码条目。 <code>$x:expr</code> 表示匹配的是一个表达式，匹配后的条目用 <code>$x</code> 代替。 <code>*</code> 表示前面这个模式可以重复 0 次或者 1 次以上，这个模式就是 <code>$( $x:expr ),</code>，注意 <code>$()</code> 后面有个 <code>，</code> 号，这个逗号也是这个模式中的一部分，在匹配的时候是一个可选项，有就匹配，遇到最后一个匹配项的时候，就忽略它。 <code>=&gt;</code> 前面是起匹配作用的部分， <code>=&gt;</code> 后面是生成代码的部分。</p><p>在生成代码的部分中， <code>$()</code> 号和 <code>=&gt;</code> 前面那个 <code>$()</code> 的作用差不多，就是表明被包起来的这块代码是可重复的。紧跟的 <code>*</code> 表示这个代码块可以重复 0 次到多次。具体次数等于 <code>=&gt;</code> 号前面的 <code>*</code> 号所代表的次数，两个一致。下面我们创建一个拥有三个整数元素的 Vec。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> v</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>代码展开后实际就是：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> temp_vec</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    temp_vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    temp_vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    temp_vec</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">    temp_vec</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>你可以看到， <code>temp_vec.push();</code> 重复了 3 次，这是因为 <code>1,2,3</code> 匹配 <code>$x: expr</code>，匹配了 3 次，分别匹配出 1、2、3 三个整数。然后就生成了三行 <code>temp_vec.push();</code>。</p><p>你可能会问， <code>vec![]</code> 这对中括号哪里去了？其实在 Rust 中，你用 ()、[]、{} 都可以，比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> vec!</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>不过也确实存在一些习惯性的表述，比如对于 Vec 这种列表，用 [] 显得更地道，其他语言也多用 []，这样能够和程序员的习惯保持一致。对于类函数式的调用，使用 () 更地道。对于构建结构体之类的宏或者存在大段代码输入的情况，用 {} 更合适。</p><p>现在你是不是能读懂一点了？</p><p>上面代码里的 expr 表示要匹配的 item 是个表达式。常见的匹配方式有 7 种。</p><ul><li>expr：匹配表达式</li><li>ty：匹配类型</li><li>stmt：匹配语句</li><li>item：匹配一个 item</li><li>ident：匹配一个标识符</li><li>path：匹配一个 path</li><li>tt：匹配一个 token tree</li></ul><p>完整的说明，你可以看我给出的参考 <a href="https://doc.rust-lang.org/stable/reference/macros-by-example.html" target="_blank" rel="noreferrer">链接</a>。</p><p>常见的重复符号有 3 个。</p><ul><li><code>*</code> 表示重复 0 到多次。</li><li><code>+</code> 表示重复 1 到多次。</li><li><code>?</code> 表示重复 0 次或 1 次。</li></ul><p>利用刚刚学到的知识，我们可以自己动手写一个声明宏。</p><h3 id="自己动手写一个声明宏" tabindex="-1">自己动手写一个声明宏 <a class="header-anchor" href="#自己动手写一个声明宏" aria-label="Permalink to &quot;自己动手写一个声明宏&quot;">​</a></h3><p><strong>目标：</strong> 实现一个加法宏 <code>add!(1,2)</code>，输出结果 3。</p><p>你可以看一下示例代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">macro_rules!</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 第一个分支，匹配两个元素的加法</span></span>
<span class="line"><span style="color:#ABB2BF;">    ($</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">expr</span><span style="color:#ABB2BF;">, $</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">expr</span><span style="color:#ABB2BF;">)=&gt;{</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            $</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">+$</span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 第二个分支：当只有一个元素时，也应该处理，这是边界情况</span></span>
<span class="line"><span style="color:#ABB2BF;">    ($</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">expr</span><span style="color:#ABB2BF;">)=&gt;{</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            $</span><span style="color:#E06C75;">a</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> add!</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 调用宏</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> add!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>通过示例我们可以看到，声明宏里面可以写多个匹配分支，Rust 会根据匹配到的模式自动选择适配的分支进行套用。</p><p>我们可以用 <code>cargo expand</code> 来展开这个代码。</p><p><img src="`+e+`" alt=""></p><p>展开后实际是下面这个样子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#![feature(prelude_import)]</span></span>
<span class="line"><span style="color:#ABB2BF;">#[prelude_import]</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">prelude</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">rust_2021</span><span style="color:#ABB2BF;">::*;</span></span>
<span class="line"><span style="color:#ABB2BF;">#[macro_use]</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#C678DD;"> crate</span><span style="color:#ABB2BF;"> std;</span></span>
<span class="line"><span style="color:#61AFEF;">macro_rules!</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ($</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> : </span><span style="color:#E06C75;">expr</span><span style="color:#ABB2BF;">, $</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> : </span><span style="color:#E06C75;">expr</span><span style="color:#ABB2BF;">) =&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            $</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> + $</span><span style="color:#E06C75;">b</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 第一个分支，匹配两个元素的加法</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    } ; ($</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> : </span><span style="color:#E06C75;">expr</span><span style="color:#ABB2BF;">) =&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#ABB2BF;">            $</span><span style="color:#E06C75;">a</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 第二个分支：当只有一个元素时，也应该处理，这是边界情况</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> }; </span><span style="color:#7F848E;font-style:italic;">// 调用宏</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>请你仔细对比展开前后的代码，好好理解一下。不过，仅仅是两个元素的相加，写个宏好像多此一举了。下面我们把它扩展到多个数字的加法。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">macro_rules!</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ( $($</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">expr</span><span style="color:#ABB2BF;">),* ) =&gt; {</span></span>
<span class="line"><span style="color:#ABB2BF;">       {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         // 开头要有个0，处理没有任何参数传入的情况</span></span>
<span class="line"><span style="color:#D19A66;">         0</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         // 重复的块</span></span>
<span class="line"><span style="color:#ABB2BF;">         $( + $</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> )*</span></span>
<span class="line"><span style="color:#ABB2BF;">       }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> add!</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> add!</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>你可以看一下它展开后的样子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#![feature(prelude_import)]</span></span>
<span class="line"><span style="color:#ABB2BF;">#[prelude_import]</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">prelude</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">rust_2021</span><span style="color:#ABB2BF;">::*;</span></span>
<span class="line"><span style="color:#ABB2BF;">#[macro_use]</span></span>
<span class="line"><span style="color:#C678DD;">extern</span><span style="color:#C678DD;"> crate</span><span style="color:#ABB2BF;"> std;</span></span>
<span class="line"><span style="color:#61AFEF;">macro_rules!</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    ($($</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> : </span><span style="color:#E06C75;">expr</span><span style="color:#ABB2BF;">), *) =&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    {</span></span>
<span class="line"><span style="color:#ABB2BF;">        {</span></span>
<span class="line"><span style="color:#D19A66;">            0</span><span style="color:#ABB2BF;"> $(+ $</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">) *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 开头要有个0，处理没有任何参数传入的情况</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 重复的块</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() { </span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> }; </span><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> { </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> + </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> }; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>可以看到，经过简单的改造，我们的 <code>add!()</code> 宏现在能处理无限多的相加项了。如果有时间，你可以进一步考虑如何处理总和溢出的问题。</p><p>我们可以先从这种简单的宏入手，边写边展开看效果，实现一个声明宏并不难。</p><h3 id="macro-export" tabindex="-1">macro_export <a class="header-anchor" href="#macro-export" aria-label="Permalink to &quot;macro_export&quot;">​</a></h3><p>在一个模块中写好声明宏后，想要提供给其他模块使用的话，你得使用 <code>#[macro_export]</code> 导出，比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">mod</span><span style="color:#ABB2BF;"> inner {</span></span>
<span class="line"><span style="color:#E5C07B;font-style:italic;">    super</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">m!</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    crate</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">m!</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">mod</span><span style="color:#ABB2BF;"> toexport {</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[macro_export]    </span><span style="color:#7F848E;font-style:italic;">// 请注意这一句，把m!()导出到当前crate root下了</span></span>
<span class="line"><span style="color:#61AFEF;">    macro_rules!</span><span style="color:#61AFEF;"> m</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        () =&gt; {};</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">    self</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">m!</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// main函数在当前crate根下，可这样调用m!()</span></span>
<span class="line"><span style="color:#61AFEF;">    m!</span><span style="color:#ABB2BF;">();        </span><span style="color:#7F848E;font-style:italic;">// 直接调用也是可以的</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><code>#[macro_export]</code> 可以把你定义的宏导出到当前 crate 根下，这样在 crate 里可以用 <code>crate::macro_name!</code> 访问（例子里的第 3 行 <code>crate::m!()</code>），在其他 crate 中可以使用 <code>use crate_name::macro_name</code> 导入。比如，我们假设上面代码里 crate 的名字是 mycrate，在另一个程序里可以这样导入这个宏。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> mycrate</span><span style="color:#ABB2BF;">::m;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> bar</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    m!</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="macro-use" tabindex="-1">macro_use <a class="header-anchor" href="#macro-use" aria-label="Permalink to &quot;macro_use&quot;">​</a></h3><p>前面我们使用了 <code>use mycrate::m</code> 这种精确的路径来导入 mycrate 中的 <code>m!()</code> 宏。如果一个 crate 里的宏比较多，我们想一次性全部导入，可以使用 <code>#[macro_use]</code> 属性，一次导入一个 crate 中所有已导出的宏，像下面这种写法：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[macro_use] </span><span style="color:#C678DD;">extern</span><span style="color:#C678DD;"> crate</span><span style="color:#ABB2BF;"> rocket;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>不过这种写法算是 Rust 早期的遗留写法了，更推荐的还是用到哪个宏就引入哪个宏。有些代码库中还会有这种写法出现，你看到了需要知道是什么意思。</p><h3 id="认识过程宏之派生宏" tabindex="-1">认识过程宏之派生宏 <a class="header-anchor" href="#认识过程宏之派生宏" aria-label="Permalink to &quot;认识过程宏之派生宏&quot;">​</a></h3><p>常见的结构体上的 derive 标注，就是派生宏。比如我们 <a href="https://time.geekbang.org/column/article/729009?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">上一节课</a> 讲到的 thiserror 提供的 Error 派生宏。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> thiserror</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]  </span><span style="color:#7F848E;font-style:italic;">// 派生宏</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> DataStoreError</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[error(</span><span style="color:#98C379;">&quot;data store disconnected&quot;</span><span style="color:#ABB2BF;">)]  </span><span style="color:#7F848E;font-style:italic;">// 属性宏</span></span>
<span class="line"><span style="color:#61AFEF;">    Disconnect</span><span style="color:#ABB2BF;">(#[from] </span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">),       </span><span style="color:#7F848E;font-style:italic;">// 属性宏</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[error(</span><span style="color:#98C379;">&quot;the data for key \`{0}\` is not available&quot;</span><span style="color:#ABB2BF;">)]  </span><span style="color:#7F848E;font-style:italic;">// 属性宏</span></span>
<span class="line"><span style="color:#61AFEF;">    Redaction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[error(</span><span style="color:#98C379;">&quot;invalid header (expected {expected:?}, found {found:?})&quot;</span><span style="color:#ABB2BF;">)]  </span><span style="color:#7F848E;font-style:italic;">// 属性宏</span></span>
<span class="line"><span style="color:#E5C07B;">    InvalidHeader</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        expected</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        found</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[error(</span><span style="color:#98C379;">&quot;unknown data store error&quot;</span><span style="color:#ABB2BF;">)]   </span><span style="color:#7F848E;font-style:italic;">// 属性宏</span></span>
<span class="line"><span style="color:#E5C07B;">    Unknown</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>上面示例中的 Debug 和 Error 就是派生宏。Debug 宏由 std 提供，Error 由 thiserror crate 提供。使用的时候，我们先使用 use 将宏导入到当前 crate 的 scope。然后在 <code>#[derive()]</code> 中使用它。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>它会作用在下面紧跟着的 enum DataStoreError 这个类型上面，对这个类型进行某种代码变换操作。最后的实现效果就是帮助我们实现了 <code>std::error::Error</code> 这个 trait，以及对应的 Debug、Display 等 trait。在我们看来，写上这一句话，就好像 Rust 自动帮我们完成了那些实现，给我们省了很多力气。</p><p>想看它到底在 enum DataStoreError 类型上施加了哪些魔法，只需要运行 <code>cargo expand</code> 展开它就可以了。你可以自己动手做一下实验。</p><p>在这个 enum DataStoreError 里的变体上，我们还可以看到另外两个宏 <code>#[error()]</code> 和 <code>#[from]</code>，它们不是派生宏，而是过程宏中的属性宏。</p><h3 id="认识过程宏之属性宏" tabindex="-1">认识过程宏之属性宏 <a class="header-anchor" href="#认识过程宏之属性宏" aria-label="Permalink to &quot;认识过程宏之属性宏&quot;">​</a></h3><p>Rust 编译器提供了一些属性（Attributes），属性是施加在模块、crate 或 item 上的元数据。这些元数据可用于很多地方。</p><ul><li>代码条件编译；</li><li>设置 crate 名字，版本号和类型（是二进制程序还是库）；</li><li>禁止代码提示；</li><li>开启编译器特性（宏、全局导入等）；</li><li>链接到外部库；</li><li>标记函数为单元测试；</li><li>标记函数为性能评测的一部分；</li><li>属性宏；</li><li>……</li></ul><p>要把属性施加到整个 crate，语法是在 crate 入口，比如在 lib.rs 或 main.rs 的第一行写上 <code>#![crate_attribute]</code>。</p><p>如果只想把属性施加到某个模块或者 item 上，就把 <code>!</code> 去掉。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[item_attribute]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>属性上面还可以携带参数，可以写成下面几种形式：</p><ul><li><code>#[attribute = &quot;value&quot;]</code></li><li><code>#[attribute(key = &quot;value&quot;)]</code></li><li><code>#[attribute(value)]</code></li></ul><p>我们来看一下具体的例子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 声明这个 crate 为 lib，是全局性的属性</span></span>
<span class="line"><span style="color:#ABB2BF;">#![crate_type </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;lib&quot;</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 声明下面这个函数为单元测试函数，这个属性只作用在test_foo()函数上</span></span>
<span class="line"><span style="color:#ABB2BF;">#[test]</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> test_foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 条件编译属性，这块深入下去细节非常多</span></span>
<span class="line"><span style="color:#ABB2BF;">#[cfg(target_os </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;linux&quot;</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">mod</span><span style="color:#ABB2BF;"> bar {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /* ... */</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 正常来说，Rust中的类型名需要是Int8T这种写法，下面这个示例让编译器不要发警告</span></span>
<span class="line"><span style="color:#ABB2BF;">#[allow(non_camel_case_types)]</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E06C75;"> int8_t</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> i8</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 作用在整个函数内部，对未使用的变量不要报警</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> some_unused_variables</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  #![allow(unused_variables)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> x</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ();</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> y</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ();</span></span>
<span class="line"><span style="color:#C678DD;">  let</span><span style="color:#E06C75;"> z</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> ();</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>如果你开始写原型代码的时候，经常出现变量或函数未使用的情况，Rust 编译器会提示一堆，有时看着心烦，你可以在 crate 入口文件头写上两行内容。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#![allow(unused_variables)]</span></span>
<span class="line"><span style="color:#ABB2BF;">#![allow(dead_code)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>它会压制 Rust 编译器，让 Rust 编译器“放放水”。你可以试着把前面两行注释掉，看看 Rust 编译器会提示什么。但是对于一个严肃的项目来说，应该尽可能地消除这些“未使用”的警告，所以项目写到一定程度，就要把这种全局属性去掉。</p><p>Rust 中有非常丰富的属性，它们给 Rust 编译器提供了非常强大的配置能力。要掌握它们，需要花费大量的时间，你可以看一下 <a href="https://doc.rust-lang.org/reference/attributes.html#attributes" target="_blank" rel="noreferrer">Attributes</a> 相关资料。这也印证了 Rust 的适用面极其广泛。即使一个熟练的程序员，也没必要掌握全部，只需要了解其中的常见属性就可以。然后在遇到一些具体的场景时，再深入研究那些配置。</p><p>而如果我们要定义自己的“属性”，就需要通过属性宏来实现。这属于偏高级而且用得比较少的内容，需要的时候再去学习也来得及。具体的实现可以参考我给出的链接。</p><ul><li><a href="https://earthly.dev/blog/rust-macros/" target="_blank" rel="noreferrer">https://earthly.dev/blog/rust-macros/</a></li><li><a href="https://doc.rust-lang.org/beta/reference/procedural-macros.html" target="_blank" rel="noreferrer">https://doc.rust-lang.org/beta/reference/procedural-macros.html</a></li></ul><p>比如著名的 Web 开发框架 Rocket，就使用属性宏来配置 URL mapping。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">#[macro_use] </span><span style="color:#C678DD;">extern</span><span style="color:#C678DD;"> crate</span><span style="color:#ABB2BF;"> rocket;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[get(</span><span style="color:#98C379;">&quot;/&lt;name&gt;/&lt;age&gt;&quot;</span><span style="color:#ABB2BF;">)]      </span><span style="color:#7F848E;font-style:italic;">// 属性宏</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> hello</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">    format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello, {} year old named {}!&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[launch]      </span><span style="color:#7F848E;font-style:italic;">// 属性宏</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> rocket</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    rocket</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">mount</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/hello&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">routes!</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">hello</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以看到，有了属性宏的加持，Rust 代码在结构上变得相当紧凑而有美感，跟 Java 的 Spring 框架有点相似了。</p><h3 id="认识过程宏之函数宏" tabindex="-1">认识过程宏之函数宏 <a class="header-anchor" href="#认识过程宏之函数宏" aria-label="Permalink to &quot;认识过程宏之函数宏&quot;">​</a></h3><p>在某些特定的情况下，函数宏能更好地表达业务需求，比如写 SQL 语句。我们在 Rust 中撰写 SQL 语句，必须符合 Rust 的语法，因此，一般使用字符串来构造和传递 SQL 语句，比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> sql</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;select title, content from article where id=&#39;1111111&#39;;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其实就不是那么方便，还容易出错。如果用函数宏来实现的话，可以做到如下效果：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这是伪代码</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> sql_macros</span><span style="color:#ABB2BF;">::sqlbuilder;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    sqlbuilder!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">select</span><span style="color:#E06C75;"> title</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">content</span><span style="color:#E06C75;"> from</span><span style="color:#E06C75;"> article</span><span style="color:#C678DD;"> where</span><span style="color:#E06C75;"> id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&#39;1111111&#39;</span><span style="color:#ABB2BF;">;);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样写，就好像在一个在 SQL 编辑器里面写 SQL 语句一样，非常自然，而不是把 SQL 语句写成字符串的形式了。也就是说，可以在 Rust 代码中写非 Rust 语法的代码，有没有感觉很神奇。当你想自己造一个 DSL（领域特定语言 Domain Specific Language ）时，函数宏就可以派上用场了。</p><p>函数宏是过程宏的一种，也使用过程宏的方式来实现，相关信息可参考我给出的 <a href="https://veykril.github.io/tlborm/proc-macros/methodical/function-like.html" target="_blank" rel="noreferrer">链接</a>。目前社区中关于过程宏完整而细致的教程并不多，后面我会出一系列这方面的专题教程。</p><h2 id="宏的应用" tabindex="-1">宏的应用 <a class="header-anchor" href="#宏的应用" aria-label="Permalink to &quot;宏的应用&quot;">​</a></h2><p>综上，我们可以看到，利用宏可以做到以下几方面的事情。</p><ol><li>减少重复代码。如果有大量的样板代码，可以使用声明宏或派生宏让代码变得更简洁、紧凑。</li><li>为类型添加额外能力。这是派生宏和属性宏的强大威力。</li><li>创建 DSL。可以自己创建一种新的语言，利用 Rust 编译器在 Rust 中编译运行，而不需要你自己再去写一个单独的编译器或解释器了。</li><li>变换代码实现任意自定义目标。本质上来说，宏就是对代码的变换，并且是在真正的编译阶段之前完成的，因此你可以用宏实现任意天马行空的想法。</li></ol><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p><img src="`+o+'" alt=""></p><p>宏在 Rust 里无处不在，我们学习的第一步是要认识它们，知道它们的作用，熟悉常见宏的意义和用法。然后要初步掌握写简单的声明宏的写法，这样能有效地提升你精简业务代码的能力。但同时也要注意，使用宏不能过度，宏的缺点是比较难调试，IDE 对它的支持可能也不完美。滥用宏会导致代码难以理解。</p><p>过程宏的能力非常强，书写的难度也比较大，我们目前不需要掌握它的写法。当你遇到一个过程宏的时候，你可以先查阅文档，知道它的作用，做到会用。等遇到需要的场景的时候，再去深入钻研。</p><p>这节课我们还提到了一个用来展开宏代码的工具 cargo expand，经常使用它，对你学习宏会有很大帮助。</p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>学完这节课的内容，你可以查阅一下相关资料，说一说 <code>allow</code>、 <code>warn</code>、 <code>deny</code>、 <code>forbid</code> 几个属性的意义和用法。欢迎你把查阅到的内容分享到评论区，如果觉得有收获的话，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>',98)]))}const m=n(r,[["render",c]]);export{d as __pageData,m as default};
