import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D2WelYEY.js";const o="/tanggang_rust/assets/4096cd69a1d25d1a4bbceac9827f9bac.CxajG4Hq.jpg",u=JSON.parse('{"title":"18 ｜错误处理系统：错误的构建、传递和处理","description":"","frontmatter":{},"headers":[],"relativePath":"Document/18｜错误处理系统：错误的构建、传递和处理.md","filePath":"Document/18｜错误处理系统：错误的构建、传递和处理.md","lastUpdated":1740766764000}'),e={name:"Document/18｜错误处理系统：错误的构建、传递和处理.md"};function r(t,s,c,B,y,i){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_18-错误处理系统-错误的构建、传递和处理" tabindex="-1">18 ｜错误处理系统：错误的构建、传递和处理 <a class="header-anchor" href="#_18-错误处理系统-错误的构建、传递和处理" aria-label="Permalink to &quot;18 ｜错误处理系统：错误的构建、传递和处理&quot;">​</a></h1><p>你好，我是 Mike。今天我们一起来学习 Rust 语言中的错误表示、传递及处理相关的知识。Rust 的错误处理很重要，也很系统。所以话不多说，我们直接进入正题。</p><h2 id="错误的分类" tabindex="-1">错误的分类 <a class="header-anchor" href="#错误的分类" aria-label="Permalink to &quot;错误的分类&quot;">​</a></h2><p>错误是需要分类的，不同类型的错误可能有不同的处理策略。总的来看错误分成可恢复型错误和不可恢复型错误，下面我们具体来看看这两种类型。</p><h3 id="不可恢复型错误" tabindex="-1">不可恢复型错误 <a class="header-anchor" href="#不可恢复型错误" aria-label="Permalink to &quot;不可恢复型错误&quot;">​</a></h3><p>有些错误，我们碰到了后需要及早退出程序，或者直接不启动程序，而是打出错误信息。</p><p>Rust 中，对这些错误的支持设施有 4 个。</p><ul><li>panic!：让程序直接崩掉，退出程序，同时可选择是否打印出栈回溯信息。</li><li>todo!：常用于功能还未实现，执行到这里直接退出程序，并提示说这个功能处于准备做的状态。</li><li>unimplemented!：常用于功能还未实现，执行到这里直接退出程序，并提示说这个功能处于未实现的状态。</li><li>unreachable!：用于写在一些原则上不可能执行到的语句，比如一个 <code>loop {}</code> 死循环的后面，执行到那里的话，就表示肯定出错了，直接退出程序。</li></ul><h3 id="可恢复型错误" tabindex="-1">可恢复型错误 <a class="header-anchor" href="#可恢复型错误" aria-label="Permalink to &quot;可恢复型错误&quot;">​</a></h3><p>可恢复型错误指的是那一类错误，在遇到后，不应该让整个程序直接停止运行，而是在代码逻辑中分析可能的错误原因，要么尝试恢复性的处理方案，要么给用户返回自定义的错误信息，让用户明白任务未达到预期的原因。</p><p>在 Rust 中，一般使用 <code>Result&lt;T, E&gt;</code> 来承载可能会出错的函数返回值。 <code>Result&lt;T, E&gt;</code> 中的 T 代表正常情况下的返回类型，E 代表出错情况下的返回类型。如何方便地构造 E 的实例，是一个重要的课题。</p><p>不可恢复型错误和可恢复型错误在某些时候界限不是那么清晰，在同一个地方，你既可以把它设计成可恢复型错误，也可以把它处理成不可恢复型错误。因此从本质上来说，是由业务逻辑来确定你要把它当成哪一类错误来处理。</p><h2 id="错误相关的基础设施" tabindex="-1">错误相关的基础设施 <a class="header-anchor" href="#错误相关的基础设施" aria-label="Permalink to &quot;错误相关的基础设施&quot;">​</a></h2><h3 id="result-t-e" tabindex="-1"><code>Result&lt;T, E&gt;</code> <a class="header-anchor" href="#result-t-e" aria-label="Permalink to &quot;\`Result&lt;T, E&gt;\`&quot;">​</a></h3><p>Rust 中主要通过 Result 类型（实例）来包裹错误类型（实例），包裹后，Result 可以通过函数返回值返回到上一层调用者函数中，再由上一层函数中的逻辑来决定是在这一层用某些逻辑处理这个错误，还是继续把这个错误抛到更上一层函数进行处理，我们也可以把包裹错误的 <code>Result&lt;T, E&gt;</code> 转换成 <code>panic!()</code> 或者在 match 的 Err 分支调用 <code>panic!()</code> 来中止程序的运行。</p><p>我们前面讲到过 <code>Result&lt;T, E&gt;</code> 解包的两个函数： <code>unwrap()</code> 和 <code>expect()</code>，起的作用就是把错误 Result 值转换成 <code>panic!()</code>，这两个方法的区别仅在于 <code>expect()</code> 可以为我们提供更多的信息，让我们知道这个 panic 的精确位置，前提是这个提示信息要独一无二，特别是在调用栈层次非常深的情况下，提供准确的 panic 位置信息非常重要。</p><p>从以上对函数中错误处理的描述中，我们可以知道，错误处理本身是一项系统性的工作，其中包含：</p><ol><li>错误的表示和构造；</li><li>错误的传递；</li><li>错误的处理。</li></ol><p>据调查，一个软件项目发展到成熟阶段，用于错误处理的代码可能会占所有代码的三分之一以上。而 Rust 从语法和标准库层面，对错误处理做了根本上的原生支持，它要求我们必须对程序的健壮性负责，使得我们没法偷懒。在非要偷懒的情况下，也会留下明显足迹。</p><p>比如下面这个例子演示了在我们想偷懒的情况下，勤奋的 Rustc 小助手是如何提醒我们的。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;abc&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    foo</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 这里Rustc小助手会警告你</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在其他语言中，如果我们像上面示例中那样调用 <code>foo()</code> 函数，而忽略了它的返回值，一般是没问题的。但是在 Rust 的地盘，Rustc 小助手会提醒我们，这里有一个 Result 没有被使用，你必须要处理一下，并给出了处理建议。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">warning</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">unused</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">that</span><span style="color:#E06C75;"> must</span><span style="color:#E06C75;"> be</span><span style="color:#E06C75;"> used</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">5</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> |</span><span style="color:#61AFEF;">     foo</span><span style="color:#ABB2BF;">();  </span><span style="color:#7F848E;font-style:italic;">// 这里Rustc小助手会警告你</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">     ^^^^^</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> note</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">this</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">may</span><span style="color:#E06C75;"> be</span><span style="color:#E06C75;"> an</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Err</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">variant</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">which</span><span style="color:#E06C75;"> should</span><span style="color:#E06C75;"> be</span><span style="color:#E06C75;"> handled</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> note</span><span style="color:#ABB2BF;">: \`#[warn(unused_must_use)]\` </span><span style="color:#E06C75;">on</span><span style="color:#E06C75;"> by</span><span style="color:#E06C75;"> default</span></span>
<span class="line"><span style="color:#E06C75;">help</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">use</span><span style="color:#ABB2BF;"> \`</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> _ </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> ...\` to ignore the resulting value</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#ABB2BF;">5 </span><span style="color:#56B6C2;">|</span><span style="color:#C678DD;">     let</span><span style="color:#ABB2BF;"> _ </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> foo();  </span><span style="color:#7F848E;font-style:italic;">// 这里Rustc小助手会警告你</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">     +++++++</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>由此可见，小助手不会让我们放过任何一个可能的错误。</p><h3 id="error-trait" tabindex="-1">Error trait <a class="header-anchor" href="#error-trait" aria-label="Permalink to &quot;Error trait&quot;">​</a></h3><p>Rust 中定义了一个抽象的 Error trait，任何实现了这个 trait 的类型都被 Rust 生态认为是一个错误类型。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> trait</span><span style="color:#E5C07B;"> Error</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;"> + </span><span style="color:#E5C07B;">Display</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看到，一个类型要实现 Error，必须同时为这个类型实现 Debug 和 Display trait。前面提到过，Debug trait 可以使用 derive 宏由 Rust 自动为你的类型实现，而 Display trait 需要你自己手动 impl 实现。</p><p>实现 Error trait 是 Rust 生态中的一种规范，也就是说如果你想在你的这层 module 里定义一种错误类型的话，为它实现 Debug、Display、Error 后，生态就会把你的这个类型认成一种错误类型。这里就体现了 trait 作为一种社区协议的作用。</p><p>一个重要的点是，实现了 Error trait 的类型，可以被代入到 dyn Error 这个 trait object 里使用，而生态中很多库支持接受 <code>&amp;dyn Error</code> 或 <code>Box&lt;dyn Error&gt;</code> 类型，这样你的代码就能和那些库无缝集成了。比如，让你自定义的错误类型从下面的函数中返回。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> Error</span><span style="color:#ABB2BF;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 可返回一个由Box包起来的自定义错误类型。</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然，这并不是说，对于 <code>std::result::Result&lt;T, E&gt;</code> 这个类型，这里面的 E 就一定要实现 Error trait，这是两码事。 <code>Result&lt;T, E&gt;</code> 中的 E 可以是任意类型。我们再复习一下标准库里 <code>Result&lt;T, E&gt;</code> 的定义。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">    Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>从这个 enum 可以看到，对 E 没有任何约束。因此，即使你的类型不实现 Error trait，它还是能被代入 <code>Result&lt;T, E&gt;</code> 中作为错误类型而使用。请注意这点区别。</p><p>小提示， <code>Result&lt;T, E&gt;</code> 的变体 Ok 和 Err 已经被加入到 <code>pub std::prelude</code> 里了，因此在代码中可以直接使用，不需要在前面加 Result 前缀。</p><h3 id="std-中的错误类型" tabindex="-1">std 中的错误类型 <a class="header-anchor" href="#std-中的错误类型" aria-label="Permalink to &quot;std 中的错误类型&quot;">​</a></h3><p>Rust 标准库里已经定义了一些错误类型，我们来看一下常用的几个。</p><h4 id="std-io-error" tabindex="-1">std::io:Error <a class="header-anchor" href="#std-io-error" aria-label="Permalink to &quot;std::io:Error&quot;">​</a></h4><p>io Error，被定义成一个结构体，负责表示标准库里 I/O 相关场景的错误类型。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> struct</span><span style="color:#E5C07B;"> Error</span><span style="color:#ABB2BF;"> { </span><span style="color:#7F848E;font-style:italic;">/* private fields */</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>常见的 I/O 操作指的是标准输入输出、网络读写、文件读写等。在 std::io 模块中，对这种 I/O 上的读写做了统一的抽象，而类型 io::Error 也是这个抽象里的一部分。</p><p>我们可以用 <code>new()</code> 函数像下面这样创建一个 io::Error 实例， <code>new()</code> 函数第一个参数是 ErrorKind 枚举，第二个参数是具体的错误内容。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ErrorKind</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 错误可以从字符串中构造</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> custom_error</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Error</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ErrorKind</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Other</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;oh no!&quot;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中 <a href="https://doc.rust-lang.org/std/io/enum.ErrorKind.html" target="_blank" rel="noreferrer">ErrorKind</a> 是一个枚举，目前包含 40 种变体，基本上把在标准库中能遇到的 I/O 错误都详尽地定义了。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> ErrorKind</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    NotFound</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    PermissionDenied</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    ConnectionRefused</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    ConnectionReset</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    HostUnreachable</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    NetworkUnreachable</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    ConnectionAborted</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    NotConnected</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    AddrInUse</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    AddrNotAvailable</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    NetworkDown</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    BrokenPipe</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    AlreadyExists</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    WouldBlock</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    NotADirectory</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    IsADirectory</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    DirectoryNotEmpty</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    ReadOnlyFilesystem</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    FilesystemLoop</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    StaleNetworkFileHandle</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    InvalidInput</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    InvalidData</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    TimedOut</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    WriteZero</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    StorageFull</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    NotSeekable</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    FilesystemQuotaExceeded</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    FileTooLarge</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    ResourceBusy</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    ExecutableFileBusy</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Deadlock</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    CrossesDevices</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    TooManyLinks</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    InvalidFilename</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    ArgumentListTooLong</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Interrupted</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Unsupported</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    UnexpectedEof</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    OutOfMemory</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Other</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>虽然很多，但这也仅限于标准库中 I/O 模块可能出现的错误类型，它远远不能覆盖全部，因此这个 ErrorKind 仅用于标准库 I/O 模块相关的错误类型。</p><h4 id="parseerror" tabindex="-1">parseError <a class="header-anchor" href="#parseerror" aria-label="Permalink to &quot;parseError&quot;">​</a></h4><p>标准库中定义了一组 parse 相关的错误类型。</p><ul><li>std::num::ParseIntError</li><li>std::num::ParseFloatError</li><li>std::char::ParseCharError</li><li>std::str::ParseBoolError</li><li>std::net::AddrParseError</li></ul><p>这些错误类型是与 FromStr trait 相关的，也就是在把字符串解析到其他类型的时候可能会出现的错误类型，比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">net</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">IpAddr</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> s</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;100eee&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> s</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">&gt;() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // e 这里是 ParseIntError</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Failed conversion to i32: {e}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> addr</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;127.0.0.1:8080&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">IpAddr</span><span style="color:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> addr</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // e 这里是 AddrParseError</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Failed conversion to IpAddr: {e}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E5C07B;">Failed</span><span style="color:#E06C75;"> conversion</span><span style="color:#E06C75;"> to</span><span style="color:#E5C07B;"> i32</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">invalid</span><span style="color:#E06C75;"> digit</span><span style="color:#E06C75;"> found</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> string</span></span>
<span class="line"><span style="color:#E5C07B;">Failed</span><span style="color:#E06C75;"> conversion</span><span style="color:#E06C75;"> to</span><span style="color:#E5C07B;"> IpAddr</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">invalid</span><span style="color:#D19A66;"> IP</span><span style="color:#E06C75;"> address</span><span style="color:#E06C75;"> syntax</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="用枚举定义错误" tabindex="-1">用枚举定义错误 <a class="header-anchor" href="#用枚举定义错误" aria-label="Permalink to &quot;用枚举定义错误&quot;">​</a></h3><p>下面我们来看在 Rust 中使用 Result 作为函数返回值，在上层中处理的典型方式。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义自己的错误类型，一般是一个枚举，因为可能有多种错误</span></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> HereError</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Error1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Error2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Error3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 一个函数返回Err</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> bar</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">HereError</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">HereError</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#61AFEF;"> bar</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) =&gt; {}</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#C678DD;">match</span><span style="color:#E06C75;"> err</span><span style="color:#ABB2BF;"> {  </span><span style="color:#7F848E;font-style:italic;">// 在上层中通过match进行处理</span></span>
<span class="line"><span style="color:#E5C07B;">            HereError</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error1</span><span style="color:#ABB2BF;"> =&gt; {}</span></span>
<span class="line"><span style="color:#E5C07B;">            HereError</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error2</span><span style="color:#ABB2BF;"> =&gt; {}</span></span>
<span class="line"><span style="color:#E5C07B;">            HereError</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error3</span><span style="color:#ABB2BF;"> =&gt; {}</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>通常我们会在当前模块中定义错误类型，一般是枚举类型，因为错误种类往往不止一个。如果某个接口返回了这个错误类型，在上层就需要 match 这个枚举类型进行错误处理。</p><p>到目前为止我们并没有给我们自定义的错误类型 HereError 实现 Debug、Display 和 Error trait，所以我们的错误类型还仅限于自己玩，为了把它纳入 Rust 生态体系，我们需要给它实现这 3 个 trait。但是我们没必要自己手动去实现，社区中已经有很好的工具 crate: thiserror 可以帮助我们实现这个目的，继续往下看，待会儿就会讲到。</p><h2 id="错误的传递" tabindex="-1">错误的传递 <a class="header-anchor" href="#错误的传递" aria-label="Permalink to &quot;错误的传递&quot;">​</a></h2><p>前面我们介绍了错误类型的定义和处理的基本方式，接下来，我们开始系统性地介绍错误的传递。</p><h3 id="函数返回-result-t-e" tabindex="-1">函数返回 <code>Result&lt;T, E&gt;</code> <a class="header-anchor" href="#函数返回-result-t-e" aria-label="Permalink to &quot;函数返回 \`Result&lt;T, E&gt;\`&quot;">​</a></h3><p>前面已经讲过，在 Rust 中只要一个函数中可能有出错的情况发生，那么它的返回值就默认约定为 Result。在继续讲之前，我们先对比一下其他语言中是怎么处理的。</p><p>C 语言中，一般用同一种类型的特殊值表示异常。比如一个函数返回一个有符号整数，可以用 0 表示正常情况下的返回，用-1 或其他负数值表示异步情况下的返回。但是这个约定并不是普遍共识，因此你可以在 C 语言中看到，大部分情况下函数返回 0 表示正常，但在一些特定情况下，返回 0 又表示不正确。缺乏强制约束给整个生态带来了混乱。</p><p>Java 这种语言，提供强大的 try-catch-throw，在语言层面捕获异常。这种形式虽然方便，但实际上会给语言 Runtime 带来负担，因为语言的 Runtime 要负责捕获代码中的异常，会有额外的性能损失。另外，由于 try-catch-throw 使用很方便，有时会看到程序员为了偷懒，将一大段代码全部包在 try-catch-throw 中的情况，无疑这会大大降低代码的质量，整个程序没办法对错误情况做精细地处理。</p><p>而 Rust 采取的方式是把异常情况独立出来一个维度，放在 <code>Result&lt;T, E&gt;</code> 的 Err 变体中。也就是说，错误在类型上就是以独立的维度存在的。比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> num</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello world!&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;I&#39;m wrong!&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上述代码中的错误类型部分被定义为 String 类型，实际上你可以定义成任意类型，比如下面我们把错误定义成 u32 类型。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> num</span><span style="color:#56B6C2;"> ==</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello world!&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">())</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>有时一个函数中的错误情况可能不止一种，这时候该怎样定义返回类型呢？惯用办法就是使用 enum，前面其实已经见过了，这里再看一个示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> MyError</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Error1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Error2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Error3</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">MyError</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D19A66;">        10</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello world!&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">()),</span></span>
<span class="line"><span style="color:#D19A66;">        20</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MyError</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error1</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#D19A66;">        30</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MyError</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error2</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">        _</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MyError</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error3</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这里 Result 的 E 部分，类型就是我们自定义的 MyError。</p><p>另一种常用的办法是让函数返回 <code>Result&lt;_, Box&lt;dyn Error&gt;&gt;</code>，比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::fmt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> MyError</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> fmt</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Display</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> MyError</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> fmt</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> fmt</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Formatter</span><span style="color:#ABB2BF;">&lt;&#39;</span><span style="color:#E5C07B;">_</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#E5C07B;">fmt</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        write!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Error</span><span style="color:#C678DD;"> for</span><span style="color:#E5C07B;"> MyError</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> Error</span><span style="color:#ABB2BF;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E06C75;"> num</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#D19A66;">        10</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Hello world!&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">()),</span></span>
<span class="line"><span style="color:#E06C75;">        _</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> my_error</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> MyError</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">my_error</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>可以看到，一旦把错误独立到另一个维度来处理后，我们得到了相当大的灵活性和安全性：可以借助类型系统来帮助检查正常情况与异常情况的不同返回，大大减少了编码出错的机率。</p><p>有了这套优秀的错误处理底层设施后，整个 Rust 生态上层建筑逐渐结构性地构建起来了，大家都遵从这个约定，用同样的方式来传递和处理错误，形成了一个健康良好的生态。</p><h3 id="map-err-转换错误类型" tabindex="-1">map_err 转换错误类型 <a class="header-anchor" href="#map-err-转换错误类型" aria-label="Permalink to &quot;map_err 转换错误类型&quot;">​</a></h3><p>我们常常使用 Result 上的 <code>map_err</code> 方法手动转换错误类型。比如下面这个示例：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Read</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> read_file</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E5C07B;"> File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;example.txt&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">err</span><span style="color:#56B6C2;">|</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error opening file: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">        Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> file</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> contents</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            match</span><span style="color:#E06C75;"> file</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">read_to_string</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> contents</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">err</span><span style="color:#56B6C2;">|</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error reading file: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span></span>
<span class="line"><span style="color:#E5C07B;">                Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#E5C07B;">Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">contents</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">                Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>我们要在 <code>read_file()</code> 中打开一个文件，并读取文件全部内容到字符串中。整个过程中，有可能出现两个 I/O 错误：打开文件错误和读取文件错误。可以看到在示例中我们使用 <code>map_err</code> 将这两个 I/O 错误的类型都转换成了 String 类型，来和函数返回类型签名相匹配。然后，对两个操作的 Result 进行了 match 匹配。这个函数里的两个文件操作可能的错误都是 std::io::Error 类型的。</p><p>很多时候同一个函数中会产生不同的错误类型，这时仍然可以使用 <code>map_err</code> 显式地把不同的错误类型转换成我们需要的同一种错误类型。</p><h3 id="result-链式处理" tabindex="-1">Result 链式处理 <a class="header-anchor" href="#result-链式处理" aria-label="Permalink to &quot;Result 链式处理&quot;">​</a></h3><p>除了每次对 Result 进行 match 处理外，Rust 中还流行一种方式，就是对 Result 进行链式处理。我们可以将上面打开文件并读取内容的例子改写成链式调用的风格。</p><p>代码如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Read</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> read_file</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;example.txt&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">err</span><span style="color:#56B6C2;">|</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error opening file: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">and_then</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> contents</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">            file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read_to_string</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> contents</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">err</span><span style="color:#56B6C2;">|</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error reading file: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">_</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;"> contents</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        })</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#61AFEF;"> read_file</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#E5C07B;">        Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#61AFEF;">println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>可以明显看到，使用链式风格改写的示例比前面用 match 进行处理的示例简洁很多。这里用到了 <code>map_err</code>、 <code>and_then</code>、 <code>map</code> 三种链式操作，它们可以在不解开 Result 包的情况下直接对里面的内容进行处理。关于这几个方法的详细内容，你可以参考 <a href="https://time.geekbang.org/column/article/722702" target="_blank" rel="noreferrer">第 8 讲</a>。</p><p>这里需要说明的是，在第 5 行 <code>File::open()</code> 执行完，如果产生的 Result 是 Err，那么在第 6 行 <code>map_err()</code> 后，不会再走 <code>and_then()</code> 操作，而是直接从 <code>read_file()</code> 函数中返回这个 Result 了。如果第 5 行的操作产生的 Result 是 Ok，就会跳过第 6 行，进入第 7 行执行。</p><p>进入第 7 行后，会消解前面产生的 Result，把 file 对象传进来使用。然后我们再去看第 9 行产生的 Result，如果这个 Result 实例是 Err，那么执行完第 10 行后，就直接从闭包返回了，返回的是 Err 值，这个值会进一步作为 <code>read_file()</code> 函数的返回值返回。而如果 Result 实例是 Ok，就会跳过第 10 行，执行第 11 行，第 11 行将 contents 字符串 move 进来作为内层闭包的返回值，并进一步以 <code>Ok(contents)</code> 的形式作为 <code>read_file()</code> 函数的返回值返回。</p><p>你可能会惊叹，这种链式处理比前面的 match 操作优美太多，但是理解起来也困难太多。这是正常的，开始的时候我们对这种链式写法会比较陌生，不过没关系，可以多写写，慢慢理解，这就是一个熟能生巧的事情，本身其实并不复杂。</p><h3 id="问号操作符" tabindex="-1">? 问号操作符 <a class="header-anchor" href="#问号操作符" aria-label="Permalink to &quot;? 问号操作符&quot;">​</a></h3><p>另一方面，前面的 match 写法，有没有办法简化呢？因为看上去好像有很多样板代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Read</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> read_file</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    match</span><span style="color:#E5C07B;"> File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;example.txt&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">err</span><span style="color:#56B6C2;">|</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error opening file: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#E5C07B;">        Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> file</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> contents</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            match</span><span style="color:#E06C75;"> file</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">read_to_string</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> contents</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">err</span><span style="color:#56B6C2;">|</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error reading file: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">            {</span></span>
<span class="line"><span style="color:#E5C07B;">                Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#E5C07B;">Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">contents</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">                Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">                    return</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>比如上面代码中的第 13 ～ 15 行和第 18 ～ 20 行，都是把错误 <code>Err(e)</code> 返回到上一层。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">  Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) =&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Rust 中有一个 <code>？</code> 操作符，可以用来简化这种场景。我们把前面代码用 <code>？</code> 操作符改造一下。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Read</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> read_file</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">        File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;example.txt&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">err</span><span style="color:#56B6C2;">|</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error opening file: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">))?;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> contents</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read_to_string</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> contents</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">map_err</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">|</span><span style="color:#E06C75;">err</span><span style="color:#56B6C2;">|</span><span style="color:#61AFEF;"> format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error reading file: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">))?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">contents</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>哇，神奇不？怎么行数缩短了这么多。</p><p>具体来说， <code>？</code> 操作符大体上等价于一个 match 语句。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a_result</span><span style="color:#ABB2BF;">?;</span></span>
<span class="line"><span style="color:#ABB2BF;">等价于</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> ret</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> match</span><span style="color:#E06C75;"> a_result</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#E06C75;">ret</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">) =&gt; </span><span style="color:#C678DD;">return</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">),   </span><span style="color:#7F848E;font-style:italic;">// 注意这里有一个return语句。</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>也就是说，如果 result 的值是 Ok，就解包；如果是 Err，就提前从此函数中返回这个 Err。这实际是一种 <strong>防御式编程</strong>，遇到了错误，就提前返回。防御式编程能让函数体中的代码大大简化，可以减少很多层括号，相信你已经从上面的示例对比中感受到了。</p><p>细心的你可能已经发现了，这里的 e 是这个 <code>a_result</code> 里 <code>Err(e)</code> 中的 e。这个实例的类型是什么呢？使用 return 语句返回它的话，那么它是不是一定和函数中定义的返回类型中的错误类型一致呢？这个问题其实很重要。从上面的示例来看，我们明确地用 <code>map_err</code> 把 io::Error 转换成了 String 这种类型，所以是没问题的。我们可以来做个实验，把 <code>map_err</code> 去掉试试。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Read</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> read_file</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">        File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;example.txt&quot;</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> contents</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read_to_string</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> contents</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">contents</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>编译器报错了：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0277</span><span style="color:#ABB2BF;">]: \`?\` </span><span style="color:#E06C75;">couldn</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">t</span><span style="color:#E06C75;"> convert</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> error</span><span style="color:#E06C75;"> to</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">lib</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">34</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> read_file</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">                   ---------------------- </span><span style="color:#E06C75;">expected</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">because</span><span style="color:#E06C75;"> of</span><span style="color:#E06C75;"> this</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#D19A66;">6</span><span style="color:#56B6C2;"> |</span><span style="color:#E5C07B;">         File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;example.txt&quot;</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">                                  ^</span><span style="color:#E06C75;"> the</span><span style="color:#C678DD;"> trait</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt;\` </span><span style="color:#E06C75;">is</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> implemented</span><span style="color:#C678DD;"> for</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">\`</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> note</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">the</span><span style="color:#E06C75;"> question</span><span style="color:#E06C75;"> mark</span><span style="color:#E06C75;"> operation</span><span style="color:#ABB2BF;"> (\`?\`) </span><span style="color:#E06C75;">implicitly</span><span style="color:#E06C75;"> performs</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> conversion</span><span style="color:#E06C75;"> on</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> error</span><span style="color:#E06C75;"> value</span><span style="color:#E06C75;"> using</span><span style="color:#E06C75;"> the</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">From</span><span style="color:#ABB2BF;">\` </span><span style="color:#C678DD;">trait</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> help</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">the</span><span style="color:#E06C75;"> following</span><span style="color:#E06C75;"> other</span><span style="color:#E06C75;"> types</span><span style="color:#E06C75;"> implement</span><span style="color:#C678DD;"> trait</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;\`:</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">char</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">&gt;&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Cow</span><span style="color:#ABB2BF;">&lt;&#39;</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">&gt;&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> note</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">required</span><span style="color:#C678DD;"> for</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;\` </span><span style="color:#E06C75;">to</span><span style="color:#E06C75;"> implement</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">FromResidual</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Infallible</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt;&gt;\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0277</span><span style="color:#ABB2BF;">]: \`?\` </span><span style="color:#E06C75;">couldn</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">t</span><span style="color:#E06C75;"> convert</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> error</span><span style="color:#E06C75;"> to</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">\`</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">lib</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">39</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> read_file</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#ABB2BF;">                   ---------------------- </span><span style="color:#E06C75;">expected</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">because</span><span style="color:#E06C75;"> of</span><span style="color:#E06C75;"> this</span></span>
<span class="line"><span style="color:#ABB2BF;">...</span></span>
<span class="line"><span style="color:#D19A66;">8</span><span style="color:#56B6C2;"> |</span><span style="color:#E06C75;">     file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read_to_string</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> contents</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">                                       ^</span><span style="color:#E06C75;"> the</span><span style="color:#C678DD;"> trait</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt;\` </span><span style="color:#E06C75;">is</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> implemented</span><span style="color:#C678DD;"> for</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">\`</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> note</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">the</span><span style="color:#E06C75;"> question</span><span style="color:#E06C75;"> mark</span><span style="color:#E06C75;"> operation</span><span style="color:#ABB2BF;"> (\`?\`) </span><span style="color:#E06C75;">implicitly</span><span style="color:#E06C75;"> performs</span><span style="color:#E06C75;"> a</span><span style="color:#E06C75;"> conversion</span><span style="color:#E06C75;"> on</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> error</span><span style="color:#E06C75;"> value</span><span style="color:#E06C75;"> using</span><span style="color:#E06C75;"> the</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">From</span><span style="color:#ABB2BF;">\` </span><span style="color:#C678DD;">trait</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> help</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">the</span><span style="color:#E06C75;"> following</span><span style="color:#E06C75;"> other</span><span style="color:#E06C75;"> types</span><span style="color:#E06C75;"> implement</span><span style="color:#C678DD;"> trait</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;\`:</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">char</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">&gt;&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Cow</span><span style="color:#ABB2BF;">&lt;&#39;</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">&gt;&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E5C07B;"> str</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">String</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> note</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">required</span><span style="color:#C678DD;"> for</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;\` </span><span style="color:#E06C75;">to</span><span style="color:#E06C75;"> implement</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">FromResidual</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Infallible</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt;&gt;\`</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>提示说， <code>?</code> 操作符不能把错误类型转换成 String 类型。这也是初学者在使用 ？操作符时的一个常见错误，容易遇到错误类型不一致的问题。并且遇到这种错误时完全不知道发生了什么，更不知道怎么解决。</p><p>我们继续看错误提示，它说， <code>？</code> 操作符利用 From trait 尝试对错误类型做隐式转换，并列出了几种已经实现了的可以转换到 String 的错误类型。也就是说，Rust 在处理 <code>？</code> 操作符的时候，会尝试对错误类型进行转换，试着看能不能自动把错误类型转换到函数返回类型中的那个错误类型上去。如果不行，就会报错。你可以参考 <a href="https://time.geekbang.org/column/article/724942" target="_blank" rel="noreferrer">第 11 讲</a>，回顾一下如何使用 <code>From&lt;T&gt; trait</code>。我们按照要求对 std::io::Error 实现一下这个转换就好了。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Read</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">for</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> from</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> read_file</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">        File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;example.txt&quot;</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> contents</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read_to_string</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> contents</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">contents</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>咦，不通过，提示：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0117</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">only</span><span style="color:#E06C75;"> traits</span><span style="color:#E06C75;"> defined</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> current</span><span style="color:#C678DD;"> crate</span><span style="color:#E06C75;"> can</span><span style="color:#E06C75;"> be</span><span style="color:#E06C75;"> implemented</span><span style="color:#C678DD;"> for</span><span style="color:#E06C75;"> types</span><span style="color:#E06C75;"> defined</span><span style="color:#E06C75;"> outside</span><span style="color:#E06C75;"> of</span><span style="color:#E06C75;"> the</span><span style="color:#C678DD;"> crate</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">lib</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">4</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;"> impl</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">for</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;"> ^^^^^</span><span style="color:#ABB2BF;">--------------------</span><span style="color:#56B6C2;">^^^^^</span><span style="color:#ABB2BF;">------</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;"> |</span><span style="color:#56B6C2;">    |</span><span style="color:#56B6C2;">                        |</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;"> |</span><span style="color:#56B6C2;">    |</span><span style="color:#ABB2BF;">                        \`</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">is</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> defined</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> current</span><span style="color:#C678DD;"> crate</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;"> |</span><span style="color:#ABB2BF;">    \`</span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">is</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> defined</span><span style="color:#C678DD;"> in</span><span style="color:#E06C75;"> the</span><span style="color:#E06C75;"> current</span><span style="color:#C678DD;"> crate</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#C678DD;"> impl</span><span style="color:#E06C75;"> doesn</span><span style="color:#ABB2BF;">&#39;</span><span style="color:#E5C07B;">t</span><span style="color:#C678DD;"> use</span><span style="color:#ABB2BF;"> only types from inside the current </span><span style="color:#C678DD;">crate</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#ABB2BF;"> note: define and implement a </span><span style="color:#C678DD;">trait</span><span style="color:#ABB2BF;"> or new </span><span style="color:#C678DD;">type</span><span style="color:#ABB2BF;"> instead</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>发现它违反了 <a href="https://time.geekbang.org/column/article/723496" target="_blank" rel="noreferrer">第 9 讲</a> 我们说过的 trait 孤儿规则。怎么解决呢？好办，重新定义一个自己的类型就可以了，你可以看一下修改后的代码。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Read</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> MyError</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 用newtype方法定义了一个新的错误类型</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> From</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#C678DD;">for</span><span style="color:#E5C07B;"> MyError</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> from</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Self</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#61AFEF;">        MyError</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">format!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">err</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> read_file</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">MyError</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> file</span><span style="color:#56B6C2;"> =</span></span>
<span class="line"><span style="color:#E5C07B;">        File</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;example.txt&quot;</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> contents</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read_to_string</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> contents</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">contents</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>这下就对了。</p><p>示例里，我们在第 4 行用 newtype 模式定义了一个自定义错误类型，里面包了 String 类型，然后在第 6 行对它实现 <code>From&lt;std::io::Error&gt;</code>，在第 8 行产生了错误类型实例。然后在第 12 行，把 <code>read_file()</code> 的返回类型改成了 <code>Result&lt;String, MyError&gt;</code>。</p><p>这样就可以了，如果出现打开文件错误或者读取文件错误， <code>？</code> 操作符会自动把 std::io::Error 类型转换到我们的 MyError 类型上去，并从 <code>read_file()</code> 函数里返回。不再需要我们每次手动写 <code>map_err</code> 转换错误类型了。整个代码结构看上去非常清爽，我们得到了一个非常不错的解决方案。</p><p>利用 <code>？</code> 操作符，我们可以在函数的嵌套调用中实现一种冒泡式的错误向上传递的效果。</p><h2 id="错误处理系统最佳实践" tabindex="-1">错误处理系统最佳实践 <a class="header-anchor" href="#错误处理系统最佳实践" aria-label="Permalink to &quot;错误处理系统最佳实践&quot;">​</a></h2><p>有了前面的铺垫，下面我们来讲一下 Rust 中的错误处理系统最佳实践是什么。</p><h3 id="错误的冒泡" tabindex="-1">错误的冒泡 <a class="header-anchor" href="#错误的冒泡" aria-label="Permalink to &quot;错误的冒泡&quot;">​</a></h3><p>通常我们编写的软件有很多依赖，在每个依赖甚至每个模块中，可能都有对应的错误子系统设计。一般会以一个 crate 为边界暴露出对象的错误类型及可能相关的处理接口。因此，如果我们从依赖树的角度来看，你编写的软件的错误系统也是以树的形式组织起来的，是一个层级系统。</p><p>在层级错误系统中，某一层出现的错误有的会在那一层处理，但有的也不一定会在那一层处理掉，而是采用类似冒泡的方式传递到更上层来处理。前面讲到的 ？操作符就是用于编写冒泡错误处理范式的便捷设施。</p><p>那么从下层传上来的错误，具体应该在哪个层次进行处理呢？这个问题没有统一的答案，是由具体的软件架构设计决定的。一般来说，一个软件它本身的架构也是在不断演进的，很可能开始的时候，你会在中间某一层给出一个处理方案，但是随着架构演化，可能最后会往上抛，甚至抛到界面层，抛给你的用户来处理。情况千变万化，需要具体问题具体分析。</p><p>那么，有没有最佳实践呢？经过 Rust 社区几年的探索，目前确实有一些实践经验得到了较高的评价，我们这里就来介绍一下。</p><p>前面讲过，一个完整的错误系统包括：错误的构造和表示、错误的传递、错误的处理。首先就是在错误的构造和表示上，目前 Rust 生态中有一个很棒的库： <a href="https://docs.rs/thiserror/" target="_blank" rel="noreferrer">thiserror</a>。</p><h3 id="错误的表示最佳实践" tabindex="-1">错误的表示最佳实践 <a class="header-anchor" href="#错误的表示最佳实践" aria-label="Permalink to &quot;错误的表示最佳实践&quot;">​</a></h3><p>前面我们讲过，我们定义的错误类型得实现 std::error::Error 这个 trait，才是一个在生态意义上来讲合格的错误类型。但是要靠自己完整地手动去实现这个 Error，需要写不少重复的冗余代码。因为对于一个可靠的应用来说，每一个模块都可能会有其错误类型。</p><p>所以一个完整的软件，就会有非常多的错误类型，每次都写同样的样板代码，大家都不会喜欢。于是就出现了这样一个库 thiserror，它能为我们一体化标注式地生成那些样板代码。</p><p>使用 thiserror 的方式如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> thiserror</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// 引入宏</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">)]  </span><span style="color:#7F848E;font-style:italic;">// 这里derive Error宏</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> enum</span><span style="color:#E5C07B;"> DataStoreError</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[error(</span><span style="color:#98C379;">&quot;data store disconnected&quot;</span><span style="color:#ABB2BF;">)]  </span><span style="color:#7F848E;font-style:italic;">// 属性标注</span></span>
<span class="line"><span style="color:#61AFEF;">    Disconnect</span><span style="color:#ABB2BF;">(#[from] </span><span style="color:#E5C07B;">io</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">),       </span><span style="color:#7F848E;font-style:italic;">// 属性标注</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[error(</span><span style="color:#98C379;">&quot;the data for key \`{0}\` is not available&quot;</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#61AFEF;">    Redaction</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[error(</span><span style="color:#98C379;">&quot;invalid header (expected {expected:?}, found {found:?})&quot;</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#E5C07B;">    InvalidHeader</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        expected</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        found</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">    #[error(</span><span style="color:#98C379;">&quot;unknown data store error&quot;</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#E5C07B;">    Unknown</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>利用 thiserror，我们可以直接在枚举上 drive Error 宏。这就方便得多了。在这一个大宏的下面，还可以利用 <code>#[error(&quot;&quot;)]</code>、 <code>#[from]</code> 等属性宏对枚举的变体做更多的配置。</p><p>通过这样的标注，我们把目标类型转换成了一个合格的被 Rust 生态认识的错误类型。</p><h3 id="错误的传递最佳实践" tabindex="-1">错误的传递最佳实践 <a class="header-anchor" href="#错误的传递最佳实践" aria-label="Permalink to &quot;错误的传递最佳实践&quot;">​</a></h3><p>前面我们已经多次提到过，在 Rust 中使用 <code>？</code> 操作符就能方便地进行错误的冒泡传递。不过需要注意的是， <code>？</code> 返回的错误类型可能与函数返回值定义的错误类型不一样，遇到这种情况，就要手动做 <code>map_err</code>，手动实现 <code>From&lt;T&gt; trait</code>，或者利用 thiserror 里提供的 <code>#[from]</code> 属性宏标注。</p><h3 id="错误处理最佳实践" tabindex="-1">错误处理最佳实践 <a class="header-anchor" href="#错误处理最佳实践" aria-label="Permalink to &quot;错误处理最佳实践&quot;">​</a></h3><p>错误处理指的是要对传过来的错误进行处理。Rust 生态中有一个 anyhow crate，非常好用。</p><p>anyhow 这个 crate，提供了一套方便的功能，让我们可以快速（无脑）地接收和处理错误。你可以统一使用 <code>Result&lt;T, anyhow::Error&gt;</code> 或等价的 <code>anyhow::Result&lt;T&gt;</code> 作为一个函数的返回类型，担当错误的接收者。</p><p>这意味着什么呢？以前你需要自己定义一个模块级的 Result，才能简写 std::result::Result。模块层级多了后，光维护这些 Result 类型，都是一件头痛的事情。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> MyError</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">MyError</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在你不需要自定义一个 Result type 了。直接使用 <code>anyhow::Result&lt;T&gt;</code> 就可以。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> foo</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">anyhow</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt; {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这有什么好处呢？实际是又在一个更高的层次上定义了一种错误接收协议——你写的任何模块，都可以用这同一种定义，而不需要在不同的模块中定义不同的 Result 类型。不同的人也不需要定义各自的 Result 类型，大家都一样的，使用 anyhow::Result 就行了，这样交流起来就更方便。</p><p>使用 <code>anyhow::Result&lt;T&gt;</code> 作函数返回值，你在函数中可以使用 ？操作符来把错误向上传递，只要这个错误类型实现了 std::error::Error 这个 trait 就行了。而我们前面讲过，这个 trait 是 std 标准库中的一个标准类型，如果你想让自己的错误类型融入社区，都应该实现这个 trait。而前面的 thiserror 也是方便实现这个 trait 的一个工具库。这样是不是一下子就串起来了。std、anyhow 和 thiseror 可以无缝配合起来使用。</p><p>这样就产生了一个什么样的效果呢？你不用再为错误类型的不一致，也就是向上传递的错误类型与函数返回值的错误类型不一致，而头痛了。所以我们可以无脑写出下面的代码：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> anyhow</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> get_cluster_info</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">ClusterMap</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> config</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fs</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">read_to_string</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;cluster.json&quot;</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> map</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ClusterMap</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> serde_json</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_str</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>注意，上面第 4 行返回的错误类型和第 5 行返回的错误类型是不同的，但是都能无脑地扔给 anyhow::Result，因为它们都实现了 std::error::Error trait。</p><p>当你使用 <code>anyhow::Result&lt;T&gt;</code> 接收到错误实例之后，下一步就是处理错误。可以使用 match 结合 downcast 系列函数进行处理。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">match</span><span style="color:#E06C75;"> root_cause</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">downcast_ref</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">DataStoreError</span><span style="color:#ABB2BF;">&gt;() {</span></span>
<span class="line"><span style="color:#E5C07B;">    Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">DataStoreError</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">Censored</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">)) =&gt; </span><span style="color:#E5C07B;">Ok</span><span style="color:#ABB2BF;">(..),</span></span>
<span class="line"><span style="color:#E5C07B;">    None</span><span style="color:#ABB2BF;"> =&gt; </span><span style="color:#E5C07B;">Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>因为 <code>anyhow::Result&lt;T&gt;</code> 定义的是统一的错误类型接收载体，所以在实际处理的时候，需要把错误还原成原来的类型，分别进行处理，这也是为什么需要 downcast 的原因，语法就和上面的示例差不多。这里也隐含了一个知识点，就是 anyhow::Error 其实保留了错误实例的原始类型信息，有了这些信息后面我们才能做正确的错误处理分派。</p><p>除此之外，anyhow 还提供了几个辅助宏，用于简化错误实例的生成。其中一个是 anyhow! 宏，它可以快速地构造出一次性的能被 <code>anyhow::Result&lt;T&gt;</code> 接收的错误。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">return</span><span style="color:#E5C07B;"> Err</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">anyhow!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Missing attribute: {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">missing</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看到，anyhow 这个 crate 直接把 Rust 的错误处理的体验提升了一个档次，让我们可以以一种统一的形式设计项目的错误处理系统。std、anyhow 和 thiserror 它们一起构成了 Rust 语言错误处理的最佳实践。</p><blockquote><p>注：更多 anyhow 的资料，请查阅 <a href="https://docs.rs/anyhow/" target="_blank" rel="noreferrer">链接</a>。</p></blockquote><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这节课我们系统性地介绍了 Rust 语言的错误处理相关的知识，同时也介绍了目前 Rust 生态中已经探索出来的错误处理的最佳实践。</p><p>Rust 本身只提供了一些基础设施， <code>Result&lt;T, E&gt;</code>、 <code>std::error::Error trait</code>、 <code>map_err</code>、 <code>？</code> 表达式、 <code>From&lt;T&gt; trait</code>、 <code>panic!</code> 系列宏等等。这些设施已经非常好了，但是在构建中大型工程的错误系统的时候，会比较繁琐，标准也没办法统一。</p><p>因此在这些基础设施之上，社区通过实践摸索出了 thiserror、anyhow 等优秀的 crate，使 Rust 语言错误处理的工程体验提升了一个层次，达到了既好用又优美的状态。这两个库充分展现了 Rust 语言强大的表达能力，anyhow 主要通过 Rust 强大的类型系统实现，thiserror 主要通过 Rust 强大的宏能力实现，而宏正是我们下节课要讲到的内容。</p><p>错误处理是软件中非常重要的组成部分，是软件稳定性和安全性的根源所在。Rust 语言强迫我们必须做完善的错误处理，这也是 Rust 语言与众不同的地方。希望你足够重视，多实践，总结出自己的心得。</p><p><img src="`+o+'" alt=""></p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><ul><li>请你查阅 Rust std 资料，并说说对 std::error::Error 的理解。</li><li>请说明 anyhow::Error 与自定义枚举类型用作错误的接收时的区别。</li></ul><p>欢迎你把你的思考和理解分享到评论区，和我一起讨论，如果你觉得有收获的话，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>',157)]))}const F=n(e,[["render",r]]);export{u as __pageData,F as default};
