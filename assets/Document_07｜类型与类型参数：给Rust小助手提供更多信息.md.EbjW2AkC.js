import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D2WelYEY.js";const o="/tanggang_rust/assets/4f0c8b5269e3e03e086ca762802860be.CmEVD6pL.png",e="/tanggang_rust/assets/a8b0ab1fabe5c6138f55d1effd4c7bdb.FzYTQWAq.jpg",t="/tanggang_rust/assets/e7a9844641dd3fedeb43e5ce7d2558de.DIrwAtDN.jpg",r="/tanggang_rust/assets/0315a018c95a61cd6d54bde9cace8ee9.BmUQPCyN.jpg",c="/tanggang_rust/assets/5005yy9ef73f713e299e5a322f301d6f.BXBzaKmx.jpg",d=JSON.parse('{"title":"07 ｜类型与类型参数：给 Rust 小助手提供更多信息","description":"","frontmatter":{},"headers":[],"relativePath":"Document/07｜类型与类型参数：给Rust小助手提供更多信息.md","filePath":"Document/07｜类型与类型参数：给Rust小助手提供更多信息.md","lastUpdated":1740766764000}'),B={name:"Document/07｜类型与类型参数：给Rust小助手提供更多信息.md"};function y(i,s,b,u,C,A){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="_07-类型与类型参数-给-rust-小助手提供更多信息" tabindex="-1">07 ｜类型与类型参数：给 Rust 小助手提供更多信息 <a class="header-anchor" href="#_07-类型与类型参数-给-rust-小助手提供更多信息" aria-label="Permalink to &quot;07 ｜类型与类型参数：给 Rust 小助手提供更多信息&quot;">​</a></h1><p>你好，我是 Mike。今天我们一起来学习 Rust 中类型相关的知识。</p><p>这块儿知识在其他大部分语言入门材料中讲得不多，但是对于 Rust 而言，却是非常重要而有趣的。我们都知道，计算机硬件执行的代码其实是二进制序列。而 <strong>对一个二进制值来说，正是类型赋予了它意义</strong>。</p><p>比如 01100001 这个二进制数字，同样的内存表示，如果是整数，就表示 97。如果是字符，就表示 <code>&#39;a&#39;</code> 这个 char。如果没有类型去赋予它额外的信息，当你看到这串二进制编码时，是不知道它代表什么的。</p><h2 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h2><p>《Programming.with.Types》2019 这本书里对类型做了一个定义，翻译出来是这样的：类型是对数据的分类，这个分类定义了这些数据的意义、被允许的值的集合，还有能在这些数据上执行哪些操作。编译器或运行时会检查类型化过程，以确保数据的完整性，对数据施加访问限制，以及把数据按程序员的意图进行解释。</p><p>有些情况下，我们会简化讨论，把操作部分忽略掉，所以我们可以简单地 <strong>把类型看作集合，这个集合表达了这个类型的实例能取到的所有可能的值</strong>。</p><h3 id="类型系统" tabindex="-1">类型系统 <a class="header-anchor" href="#类型系统" aria-label="Permalink to &quot;类型系统&quot;">​</a></h3><p>这本书里还定义了类型系统的概念。</p><p>书里是这样说的：类型系统是一套规则集——把类型赋予和施加到编程语言的元素上。这些元素可以是变量、函数和其他高阶结构。类型系统通过你在代码中提供的标注来给元素赋予类型，或者根据它的上下文隐式地推导某个元素的类型。类型系统允许在类型间做各种转换，同时禁止其他的一些转换。</p><p>举例来说，刚刚我们提到的类型的标注就像这种 <code>let a: u32 = 10;</code>。我们用 <code>: u32</code> 这种语法对变量 a 进行了标注，表明变量 a 的类型是 <code>u32</code> 类型。 <code>u32</code> 可以转换成 <code>u64</code>。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> u64</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>但是 <code>u32</code> 不能直接转换到 String 上去。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// 错误的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{b}&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="类型化的好处" tabindex="-1">类型化的好处 <a class="header-anchor" href="#类型化的好处" aria-label="Permalink to &quot;类型化的好处&quot;">​</a></h3><p>类型化有 5 大好处：正确性、不可变性、封装性、组合性、可读性。这 5 大好处中的每一个都是软件工程理论推崇的。</p><p>Rust 语言非常强调 <strong>类型化</strong>，它的类型系统非常严格，隐式转换非常少，在某些简单场景下甚至会引起初学者的不适。</p><p>比如下面这个代码：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1.0</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> * </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>编译错误，提示你不能将一个浮点数和一个整数相乘。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0277</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">cannot</span><span style="color:#E06C75;"> multiply</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">\` </span><span style="color:#E06C75;">by</span><span style="color:#ABB2BF;"> \`{</span><span style="color:#E06C75;">integer</span><span style="color:#ABB2BF;">}\`</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">15</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">5</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> * </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">               ^</span><span style="color:#E06C75;"> no</span><span style="color:#E06C75;"> implementation</span><span style="color:#C678DD;"> for</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;"> * {</span><span style="color:#E06C75;">integer</span><span style="color:#ABB2BF;">}\`</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> help</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">the</span><span style="color:#C678DD;"> trait</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Mul</span><span style="color:#ABB2BF;">&lt;{</span><span style="color:#E06C75;">integer</span><span style="color:#ABB2BF;">}&gt;\` </span><span style="color:#E06C75;">is</span><span style="color:#E06C75;"> not</span><span style="color:#E06C75;"> implemented</span><span style="color:#C678DD;"> for</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">\`</span></span>
<span class="line"><span style="color:#56B6C2;">  =</span><span style="color:#E06C75;"> help</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">the</span><span style="color:#E06C75;"> following</span><span style="color:#E06C75;"> other</span><span style="color:#E06C75;"> types</span><span style="color:#E06C75;"> implement</span><span style="color:#C678DD;"> trait</span><span style="color:#ABB2BF;"> \`</span><span style="color:#E5C07B;">Mul</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Rhs</span><span style="color:#ABB2BF;">&gt;\`:</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;&amp;&#39;</span><span style="color:#E5C07B;">a</span><span style="color:#E5C07B;"> f32</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> Mul</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;&amp;</span><span style="color:#E5C07B;">f32</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> Mul</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">f32</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> Mul</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">&gt;&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E5C07B;">f32</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> Mul</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>初学者遇到这种情况，往往会觉得 Rust 过于严苛，一个很自然的操作都不让我通过，烦死了，马上就想放弃了。</p><p>当遇到这种基础类型转换错误时，可以尝试使用 <strong>as 操作符</strong> 显式地将类型转成一致。</p><p>修改上述代码如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 1.0</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> f32</span><span style="color:#ABB2BF;">;    </span><span style="color:#7F848E;font-style:italic;">// 添加了 as f32</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> c</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;"> * </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这段代码就可以编译通过了。</p><p>这里其实展示出 Rust 的一个非常明显的特点： <strong>尽可能地显式化</strong>。显式化包含两层意思。</p><ol><li>不做自动隐式转换。</li><li>没有内置转换策略。</li></ol><p>不做自动隐式转换，可以这样来理解，比如前面的示例，当别人来看你的代码的时候，多了 <code>as f32</code> 这几个字符，他就明白你是在做类型转换，就会自然地警觉起来，分析上下文，估计出下面算出的结果是什么类型。这相当于由程序员为编译器明确地提供了一些额外的信息。</p><p>没有内置转换策略这一点，我们可以拿 JavaScript 社区中流传的一张梗图来对比说明。</p><p><img src="`+o+`" alt="图片"></p><p>取图里的一个示例，在 JavaScript 里， <code>9 + &quot;1&quot;</code> 计算出来的结果是 <code>&quot;91&quot;</code>。这其实就涉及两个不同类型之间相加如何处理的问题。在这个问题上，JavaScript 自己内置了策略，把两个不同类型的值加起来，硬生生算出了一个结果。而当遇到 <code>91- &quot;1&quot;</code> 时，策略又变了，算出了数字 90。这些就是内置类型转换策略的体现。</p><p>而在 Rust 中， <code>9+&quot;1&quot;</code> 是不可能通过编译的，更不要说计算出一个神奇的结果了。如果要写出类似的代码，在 Rust 中可以这样做。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> a</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 9</span><span style="color:#ABB2BF;"> + </span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#C678DD;"> as</span><span style="color:#E5C07B;"> u8</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> b</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 9.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">() + </span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>有没有觉得特别清晰！我们一眼就能推断出 a 和 b 的类型，a 为 u8 类型，b 为 String 类型。</p><p>这就是 Rust 的严谨，它有着严密的类型体系，在类型化上绝不含糊。它从底层到上层构建了一套完整严密的类型大厦。你的项目越大，使用 Rust 感觉也就越舒服，原因之一就是严谨的类型系统在为你保驾护航。</p><h2 id="类型作为一种约束" tabindex="-1">类型作为一种约束 <a class="header-anchor" href="#类型作为一种约束" aria-label="Permalink to &quot;类型作为一种约束&quot;">​</a></h2><p>前面提到，类型是变量所有可能取得的值的集合。换句话说，类型实际上限制或定义了变量的取值空间。因此， <strong>类型对于变量来说，也是一种约束</strong>。</p><p>实际上，Rust 中的 : （冒号）在语法层面上就是约束。</p><p>示例：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> a</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u8</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#E06C75;"> b</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">String</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;123&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上述示例中，变量 a 被限制为只能在 u8 这个类型的值空间取值，也就是 0 到 255 这 256 个整数里的一个，而 10 属于这个空间。变量 b 被限制为只能在字符串值空间内取值。不管字符串的值空间多大（其实是无限），这些值与 u8、u32 这些类型的值也是不同的。</p><p>关于 : 作为约束的体现，我们会在后面的课程中不断看到。</p><h2 id="多种类型如何表示" tabindex="-1">多种类型如何表示？ <a class="header-anchor" href="#多种类型如何表示" aria-label="Permalink to &quot;多种类型如何表示？&quot;">​</a></h2><p>前面我们讲到了，用一种类型来对变量的取值空间进行约束。这确实非常好，有利于程序的健壮性。但有时也会遇到这种方式不够用的场景。比如在 Rust 中，我们把整数分成 u8、u16、u32、u64。现在我想写一个函数，它的参数支持整数，也就是说要同时能接受 u8、u16、u32、u64 这几种类型的值，应该怎么办？如果只是采用前面的理论，这个需求是没法做到的。</p><p>再看另外一个实际的例子，我有一个日志函数，可以给这个函数传入数字、字符串等类型。这种需求很常见。如何让这一个日志函数同时支持数字和字符串作为参数呢？这就很头痛了。</p><p>这里实际提出了这样一个问题： <strong>在 Rust 语言中，有没有办法用某种方式来表示多种类型？</strong> 答案是有的。</p><h2 id="类型参数" tabindex="-1">类型参数 <a class="header-anchor" href="#类型参数" aria-label="Permalink to &quot;类型参数&quot;">​</a></h2><p>在 Rust 语言中定义类型的时候，可以使用 <strong>类型参数</strong>。比如标准库里常见的 <code> Vec&lt;T&gt;</code>，就带一个类型参数 T，它可以支持不同类型的列表，如 <code>Vec&lt;u8&gt;</code>、 <code>Vec&lt;u32&gt;</code>、 <code>Vec&lt;String&gt;</code> 等。这里这个 T 就表示一个类型参数，在定义时还不知道它具体是什么类型。只有在使用的时候，才会对这个 T 赋予一个具体的类型。</p><p>这里这个 <code>Vec&lt;T&gt;</code>，是一个类型整体，单独拆开来讲 Vec 类型是没有意义的。T 是 <code>Vec&lt;T&gt;</code> 中的类型参数，它其实也是信息，提供给 Rust 编译器使用。而带类型参数的类型整体（比如 <code>Vec&lt;T&gt;</code>）就叫做 <strong>泛型</strong>（generic type）。</p><h3 id="结构体中的类型参数" tabindex="-1">结构体中的类型参数 <a class="header-anchor" href="#结构体中的类型参数" aria-label="Permalink to &quot;结构体中的类型参数&quot;">​</a></h3><p>我们来看一个例子，自定义一个结构体 <code>Point&lt;T&gt;</code>。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这是一个二维平面上的点，由 x、y 两个坐标轴来定义。因为 x、y 的取值有可能是整数，也有可能是浮点数，甚至有可能是其他值，比如无穷精度的类型。所以我们定义一个类型参数 T，定义的时候需要把 T 放在结构体类型名字后面，用 <code>&lt;&gt;</code> 括起来，也就是 <code>struct Point&lt;T&gt;</code>。这里的 <code>Point&lt;T&gt;</code> 整体就成为了泛型。然后，标注 x 和 y 分量的类型都是 T。可以看到，T 占据了冒号后面定义类型的位置。所以说它是 <strong>占位类型</strong> 也没有问题。</p><p>对这个结构体的例子来说，其实还隐藏了一个很重要的细节：x 和 y 字段的类型都是 T，意味着 x 和 y 两个分量的类型是一样的。</p><p>我们来看这个 Point 结构体类型如何实例化。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> integer</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> };     </span><span style="color:#7F848E;font-style:italic;">// 一个整数point</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> float</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;"> };    </span><span style="color:#7F848E;font-style:italic;">// 一个浮点数point</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>符合我们预期，正常编译通过。那如果实例化的时候，给 x 和 y 赋予不同的类型值会怎样呢？我们来试试。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> wont_work</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#E06C75;">cargo</span><span style="color:#E06C75;"> run</span></span>
<span class="line"><span style="color:#E5C07B;">   Compiling</span><span style="color:#E06C75;"> chapter10</span><span style="color:#E06C75;"> v0</span><span style="color:#ABB2BF;">.</span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">file</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">///projects/chapter10)</span></span>
<span class="line"><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">E0308</span><span style="color:#ABB2BF;">]: </span><span style="color:#E06C75;">mismatched</span><span style="color:#E06C75;"> types</span></span>
<span class="line"><span style="color:#ABB2BF;"> --&gt; </span><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs:</span><span style="color:#D19A66;">7</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">38</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span></span>
<span class="line"><span style="color:#D19A66;">7</span><span style="color:#56B6C2;"> |</span><span style="color:#C678DD;">     let</span><span style="color:#E06C75;"> wont_work</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#56B6C2;">  |</span><span style="color:#56B6C2;">                                      ^^^</span><span style="color:#E06C75;"> expected</span><span style="color:#E06C75;"> integer</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">found</span><span style="color:#E06C75;"> floating</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">point</span><span style="color:#E06C75;"> number</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>编译器正确地指出了问题，说期望整数却收到了浮点数，所以不通过。</p><p>这里有个细节，那就是编译器对 <code>Point&lt;T&gt;</code> 中的 T 参数进行了推导，因为它首先遇到的是 x 的值 5，是一个整数类型，因此编译器就把 T 具体化成了整数类型（具体哪一种还没说，不过在这里不重要），当再收到 y 分量的值的时候，发现是浮点数类型，和刚才的整数类型不一致了。而 Point 中定义的时候，又要求 x 和 y 的类型是相同的，这个时候就产生了冲突，于是报错。</p><p>那么，如何解决这个问题呢？Rust 并没有限制我们只能定义一个类型参数呀！定义多个就好了，把 x 分量和 y 分量定义成不同的参数化类型。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> both_integer</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> both_float</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> integer_and_float</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>像这样，代码就可以顺利通过编译了。</p><p>再次强调，前面两个示例里的 <code>Point&lt;T&gt;</code> 和 <code>Point&lt;T, U&gt;</code> 都是一个类型整体。这个时候，你把 Point 这个符号本身单独拿出来是没有意义的。</p><p>在使用的时候，可以用 turbofish 语法 <code>::&lt;&gt;</code> 明确地给泛型，或者说是给 Rust 编译器提供类型参数信息，我们修改一下上面两个示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> integer</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">&gt; { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> float</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">&gt; { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> both_integer</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">&gt; { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> both_float</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">&gt; { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1.0</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> integer_and_float</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">&gt; { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">4.0</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>注意，使用时提供类型参数信息用的是 <code>::&lt;&gt;</code>，而定义类型参数的时候只用到 <code>&lt;&gt;</code>，注意它们的区别。Rust 把定义和使用两个地方通过语法明确地区分开了，而有的语言并没有区分这两个地方。</p><p>到这里，我们会体会到，类型参数存在两个过程， <strong>一个是定义时，一个是使用时</strong>。这两个过程的区分很重要。这里所谓的“使用时”，仍然是在编译期进行分析的，也就是分析你在代码的某个地方用到了这个带类型参数的类型，然后把这个参数具体化，从而形成一个最终的类型版本。</p><p>比如 <code>Point&lt;T&gt;</code> 类型的具化类型可能是 <code>Point&lt;u32&gt;</code>、 <code>Point&lt;f32&gt;</code> 等等； <code>Point&lt;T, U&gt;</code> 类型的具化类型可能是 <code>Point&lt;u32, u32&gt;</code>、 <code>Point&lt;u32, f32&gt;</code>、 <code>Point&lt;f32, u32&gt;</code>、 <code>Point&lt;f32, f32&gt;</code> 等等。到底有多少种具化版本，是看你在后面代码使用时，会用到多少种不同的具体类型。这个数目是由编译器自动帮我们计算展开的。</p><p>这种在编译期间完成的类型展开成具体版本的过程，被叫做 <strong>编译期单态化。</strong> 单态化的意思就是把处于混沌未知的状态具体化到一个单一的状态。</p><h3 id="在泛型上做-impl" tabindex="-1">在泛型上做 impl <a class="header-anchor" href="#在泛型上做-impl" aria-label="Permalink to &quot;在泛型上做 impl&quot;">​</a></h3><p>当类型是一个泛型时，要对其进行 impl 的话，需要处理类型参数，形式相比于我们在 <a href="https://time.geekbang.org/column/article/720991" target="_blank" rel="noreferrer">第 5 讲</a> 讲到的 impl 结构体，有一点变化。这里我们还是用 <code>Point&lt;T&gt;</code> 举例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {        </span><span style="color:#7F848E;font-style:italic;">// 注意这一行</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) {}      </span><span style="color:#7F848E;font-style:italic;">// 注意这一行</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在对 <code>Point&lt;T&gt;</code> 做 impl 的时候，需要在 impl 后面加一个 <code>&lt;T&gt;</code>，表示在 impl 的 block 中定义类型参数 T，供 impl block 中的元素使用，这些元素包括： <code>impl&lt;T&gt; Point&lt;T&gt;</code> 里 <code>Point&lt;T&gt;</code> 中的 T 和整个 impl 的花括号 body 中的代码，如 <code>play()</code> 函数的参数就用到了这个 T。</p><p>有一个细节需要注意： <code>struct Point&lt;T&gt;</code> 里 <code>Point&lt;T&gt;</code> 中的 T 是定义类型参数 T， <code>impl&lt;T&gt; Point&lt;T&gt;</code> 中的 <code>Point&lt;T&gt;</code> 中的 T 是使用类型参数 T，这个 T 是在 impl 后面那个尖括号中定义的。</p><p>在对泛型做了 impl 后，对其某一个具化类型继续做 impl 也是可以的，比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> play</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">&gt; {      </span><span style="color:#7F848E;font-style:italic;">// 这里，对具化类型 Point&lt;u32&gt; 继续做 impl</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> doit</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>下面我们来看具体场景中的类型参数的使用。</p><h3 id="枚举中的类型参数" tabindex="-1">枚举中的类型参数 <a class="header-anchor" href="#枚举中的类型参数" aria-label="Permalink to &quot;枚举中的类型参数&quot;">​</a></h3><p>前面讲过，枚举的变体可以挂载任意其他类型作为负载。因此每个负载的位置，都可以出现类型参数。比如最常见的两个枚举， <code>Option&lt;T&gt;</code> 与 <code>Result&lt;T, E&gt;</code>，就是泛型。</p><p><code>Option&lt;T&gt;</code> 用来表示有或无。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Option</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">    None</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>Result&lt;T, E&gt;</code> 用来表示结果，正确或错误。Ok 变体带类型参数 T，Err 变体带类型参数 E。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">    Err</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>我们后面会详细阐述 <code>Option&lt;T&gt;</code> 和 <code>Result&lt;T, E&gt;</code> 的用法。</p><p>现在再看一个更复杂的枚举中带类型参数的例子。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Aaa</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">    V1</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;),</span></span>
<span class="line"><span style="color:#61AFEF;">    V2</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">U</span><span style="color:#ABB2BF;">&gt;),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>我们来解释一下，枚举 <code>Aaa&lt;T, U&gt;</code> 的变体 V1 带了一个 <code>Point&lt;T&gt;</code> 的负载，变体 V2 带了一个 <code>Vec&lt;U&gt;</code> 的负载。由于出现了两个类型参数 T 和 U，所以需要在 Aaa 后面的尖括号里定义这两个类型参数。</p><p>实际上，类型参数也是一种复用代码的方式，可以让写出的代码更紧凑。下面我们来看具体的应用场景。</p><h3 id="函数中的类型参数" tabindex="-1">函数中的类型参数 <a class="header-anchor" href="#函数中的类型参数" aria-label="Permalink to &quot;函数中的类型参数&quot;">​</a></h3><p>需求是这样的：很多不同的类型，其实它们实现某个逻辑时，逻辑是一模一样的。因此如果没有类型参数，就得对每个具体的类型重新实现一次同样的逻辑，这样就显得代码很臃肿。重复的代码也不好维护，容易出错。</p><p>示例：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> PointU32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> PointF32</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">f32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> print_u32</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PointU32</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Point {}, {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">.x, </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">.y);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> print_f32</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">PointF32</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Point {}, {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">.x, </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">.y);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> PointU32</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">    print_u32</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> PointF32</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10.2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20.4</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">    print_f32</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>上面示例中，因为我们没有使用类型参数，那就得针对不同的字段类型（u32，f32）分别定义结构体（PointU32，PointF32）和对应的打印函数（print_u32，print_f32），并分别调用。</p><p>而有了类型参数的话，这样的需求代码只需要写一份，让编译器来帮我们分析到时候要应用到多少种不同的类型上。</p><p>上面的代码可以优化成这样：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> print</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fmt</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Display</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;) {</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Point {}, {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">.x, </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">.y);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10.2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20.4</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#61AFEF;">    print</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>是不是清爽多了！</p><p>实际上，清爽只是我们看到的样子。在编译的时候，Rust 编译器会帮助我们把这种泛型代码展开成前面那个示例的样子。这种脏活累活，Rust 编译器帮我们完成了。</p><p>细心的你可能发现了，print 函数的类型参数在定义的时候，多了一个东西。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> print</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">fmt</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Display</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;) {</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里 <code>T: std::fmt::Display</code> 的意思是要求 T 满足某些条件/约束。这里具体来说就是 T 要满足可以被打印的条件。因为我们这个函数的目的是把 x 和 y 分量打印出来，那么它确实要能被打印才行，比如得能转换成人类可见的某种格式。</p><p>关于这种约束，我们后面会详细讲述。</p><h3 id="方法中的类型参数" tabindex="-1">方法中的类型参数 <a class="header-anchor" href="#方法中的类型参数" aria-label="Permalink to &quot;方法中的类型参数&quot;">​</a></h3><p>结构体中可以有类型参数，函数中也可以有类型参数，它们组合起来，方法上当然也可以有类型参数。</p><p>示例：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; {          </span><span style="color:#7F848E;font-style:italic;">// 在impl后定义impl block中要用到的类型参数</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> x</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">) -&gt; &amp;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;"> {     </span><span style="color:#7F848E;font-style:italic;">// 这里，在方法的返回值上使用了这个类型参数</span></span>
<span class="line"><span style="color:#ABB2BF;">        &amp;</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.x</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p.x = {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">x</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">.x </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>上面的示例中， <code>Point&lt;T&gt;</code> 的方法 <code>x()</code> 的返回值类型就是 &amp;T，使用到了 <code>impl&lt;T&gt;</code> 这里定义的类型参数 T。</p><p>下面我们继续看更复杂的内容，方法中的类型参数和结构体中的类型参数可以不同。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">X1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Y1</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">    x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">X1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    y</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Y1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 这里定义了impl block中可以使用的类型参数X3, Y3，</span></span>
<span class="line"><span style="color:#C678DD;">impl</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">X3</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Y3</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">X3</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Y3</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 这里单独为mixup方法定义了两个新的类型参数 X2, Y2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 于是在mixup方法中，可以使用4个类型参数：X3, Y3, X2, Y2</span></span>
<span class="line"><span style="color:#C678DD;">    fn</span><span style="color:#61AFEF;"> mixup</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">X2</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Y2</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">other</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">X2</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Y2</span><span style="color:#ABB2BF;">&gt;) -&gt; </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">X3</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Y2</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">        Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            x</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">self</span><span style="color:#ABB2BF;">.x,</span></span>
<span class="line"><span style="color:#E06C75;">            y</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">other</span><span style="color:#ABB2BF;">.y,</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">10.4</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Hello&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;c&#39;</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> p3</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> p1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mixup</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">p2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;p3.x = {}, p3.y = {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p3</span><span style="color:#ABB2BF;">.x, </span><span style="color:#E06C75;">p3</span><span style="color:#ABB2BF;">.y);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#E06C75;">p3</span><span style="color:#ABB2BF;">.x </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">p3</span><span style="color:#ABB2BF;">.y </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>可以看到，我们在 <code>Point&lt;X3, Y3&gt;</code> 的方法 <code>mixup()</code> 上新定义了两个类型参数 X2、Y2，于是在 <code>mixup()</code> 方法中，可以同时使用 4 个类型参数：X2、Y2、X3、Y3。你可以品味一下这个示例，不过这种复杂情况，现在的你只需要了解就可以了。</p><p>接下来我们来聊一聊 Rust 里的类型体系构建方法。</p><h2 id="类型体系构建方法" tabindex="-1">类型体系构建方法 <a class="header-anchor" href="#类型体系构建方法" aria-label="Permalink to &quot;类型体系构建方法&quot;">​</a></h2><p>类型体系构建指的是如何从最底层的小砖块开始，通过封装、组合、集成，最后修建成一座类型上的摩天大楼。在 Rust 里，主要有四大基础设施参与这个搭建的过程。</p><ul><li>struct 结构体</li><li>enum 枚举</li><li>洋葱结构</li><li>type 关键字</li></ul><h3 id="struct-和-enum" tabindex="-1">struct 和 enum <a class="header-anchor" href="#struct-和-enum" aria-label="Permalink to &quot;struct 和 enum&quot;">​</a></h3><p>struct 是 Rust 里把简单类型组合起来的主要结构。struct 里的字段可以是基础类型，也可以是其他结构体或枚举等复合类型，这样就可以一层一层往上套。结构体 struct 表达的是一种元素间同时起作用的结构。</p><p>而枚举 enum 表达的是一种元素间在一个时刻只有一种元素起作用的结构。因此枚举类型特别适合做配置和类型聚合之类的工作。</p><p>你可以看一下下面的综合示例，它是对某个学校的数学课程建模的层级模型。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 定义点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Rectangle</span><span style="color:#ABB2BF;"> {  </span><span style="color:#7F848E;font-style:italic;">// 长方形由两个点决定</span></span>
<span class="line"><span style="color:#E06C75;">  p1</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  p2</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Triangle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 三角形由三个点组成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Circle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">u32</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 圆由点和半径组成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Shape</span><span style="color:#ABB2BF;"> {   </span><span style="color:#7F848E;font-style:italic;">// 由枚举把长方形，三角形和圆形聚合在一起</span></span>
<span class="line"><span style="color:#61AFEF;">  Rectangle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Rectangle</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">  Triangle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Triangle</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">  Circle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Circle</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Axes</span><span style="color:#ABB2BF;">;   </span><span style="color:#7F848E;font-style:italic;">// 定义坐标</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Geometry</span><span style="color:#ABB2BF;"> {    </span><span style="color:#7F848E;font-style:italic;">// 几何学由形状和坐标组成</span></span>
<span class="line"><span style="color:#E06C75;">  shape</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Shape</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  axes</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Axes</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> Algebra</span><span style="color:#ABB2BF;">;      </span><span style="color:#7F848E;font-style:italic;">// 定义代数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Level</span><span style="color:#ABB2BF;"> {         </span><span style="color:#7F848E;font-style:italic;">// 定义学校的级别</span></span>
<span class="line"><span style="color:#E5C07B;">  Elementary</span><span style="color:#ABB2BF;">,        </span><span style="color:#7F848E;font-style:italic;">// 小学</span></span>
<span class="line"><span style="color:#E5C07B;">  Secondary</span><span style="color:#ABB2BF;">,         </span><span style="color:#7F848E;font-style:italic;">// 初中</span></span>
<span class="line"><span style="color:#E5C07B;">  High</span><span style="color:#ABB2BF;">,              </span><span style="color:#7F848E;font-style:italic;">// 高中</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">enum</span><span style="color:#E5C07B;"> Course</span><span style="color:#ABB2BF;"> {          </span><span style="color:#7F848E;font-style:italic;">// 数学要学习几何和代数，由枚举来聚合</span></span>
<span class="line"><span style="color:#61AFEF;">  Geometry</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Geometry</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#61AFEF;">  Algebra</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Algebra</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> MathLesson</span><span style="color:#ABB2BF;"> {      </span><span style="color:#7F848E;font-style:italic;">// 定义数学课程，包括数学的科目和级别</span></span>
<span class="line"><span style="color:#E06C75;">  math</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Course</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">  level</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Level</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>请根据注释认真体会其中类型的层级结构。你甚至可以试着去编译一下上述代码，看看是不是可以编译通过。</p><p>偷偷告诉你答案：是可以通过的！</p><h3 id="newtype" tabindex="-1">newtype <a class="header-anchor" href="#newtype" aria-label="Permalink to &quot;newtype&quot;">​</a></h3><p>结构体还有一种常见的封装方法，那就是用单元素的元组结构体。比如定义一个列表类型 <code>struct List(Vec&lt;u8&gt;);</code>。它实际就是 <code>Vec&lt;u8&gt;</code> 类型的一个新封装，相当于给里面原来那种类型取了一个新名字，同时也把原类型的属性和方法等屏蔽起来了。</p><p>有时，你还可以看到没有具化类型参数的情形。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这种模式非常常见，于是业界给它取了个名字，叫做 newtype 模式，意思是用新的类型名字替换里面原来那个类型名字。</p><h3 id="洋葱结构" tabindex="-1">洋葱结构 <a class="header-anchor" href="#洋葱结构" aria-label="Permalink to &quot;洋葱结构&quot;">​</a></h3><p>Rust 中的类型还有另外一种构建方法——洋葱结构。我们来看一个示例，注意代码里的 type 关键字在这里的作用是把一个类型重命名，取了一个更短的名字。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 你可以试着编译这段代码</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">collections</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">HashMap</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> AAA</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt;&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> BBB</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">AAA</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> CCC</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">BBB</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> DDD</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">CCC</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> EEE</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">DDD</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>最后 EEE 展开就是这样的：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt;&gt;&gt;&gt;&gt;&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看到，尖括号的层数很多，像洋葱一样一层一层的，因此叫洋葱类型结构。只要你开心，你可以把这个层次无限扩展下去。</p><p>我们再来看一个结合 newtype 和 struct 的更复杂的示例。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">collections</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">HashMap</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> AAA</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt;);</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> BBB</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">  hashmap</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">AAA</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">struct</span><span style="color:#E5C07B;"> CCC</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">BBB</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> DDD</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">CCC</span><span style="color:#ABB2BF;">&gt;;</span></span>
<span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> EEE</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">DDD</span><span style="color:#ABB2BF;">&gt;&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">最后，EEE展开就类似下面这样（仅示意，无法编译通过）</span></span>
<span class="line"><span style="color:#E5C07B;">HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">CCC</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">BBB</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">hashmap</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">AAA</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt;&gt;&gt;})&gt;&gt;&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>可以看到，洋葱结构在嵌套层级多了之后，展开是相当复杂的。</p><h3 id="type-关键字" tabindex="-1">type 关键字 <a class="header-anchor" href="#type-关键字" aria-label="Permalink to &quot;type 关键字&quot;">​</a></h3><p>type 关键字很重要，它的作用是在洋葱结构表示太长了之后，把一大串类型的表达简化成一个简短的名字。在 Rust 中使用 type 关键字，可以使类型大厦的构建过程变得清晰可控。</p><p>type 关键字还可以处理泛型的情况，比如：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">type</span><span style="color:#E5C07B;"> MyType</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HashMap</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Vec</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;&gt;&gt;&gt;&gt;&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>因为最里面那个是类型 <code>Vec&lt;T&gt;</code>，T 类型参数还在。因此给这个洋葱类型重命名的时候，需要把这个 T 参数带上，于是就变成了 <code>MyType&lt;T&gt;</code>。</p><p>这种写法在标准库里很常见，最佳示例就是关于各种 <code>Result*</code> 的定义。</p><p>在 <code>std::io</code> 模块里，取了一个与 <code>std::result::Result&lt;T, E&gt;</code> 同名的 Result 类型，把 <code>std::result::Result&lt;T, E&gt;</code> 定义简化了，具化其 Error 类型为 <code>std::io::Error</code>，同时仍保留了第一个类型参数 T。于是得到了 <code>Result&lt;T&gt;</code>。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>刚开始接触 Rust 的时候，你可能会对这种表达方式产生疑惑，其实道理就在这里。以后你在阅读 Rust 生态中各种库的源码时，也会经常遇到这种封装方式，所以我们要习惯它。</p><p>关于这种定义更多的资料参见：</p><p><a href="https://doc.rust-lang.org/std/result/enum.Result.html" target="_blank" rel="noreferrer">https://doc.rust-lang.org/std/result/enum.Result.html</a></p><p><a href="https://doc.rust-lang.org/std/io/type.Result.html" target="_blank" rel="noreferrer">https://doc.rust-lang.org/std/io/type.Result.html</a></p><p><a href="https://doc.rust-lang.org/std/io/struct.Error.html" target="_blank" rel="noreferrer">https://doc.rust-lang.org/std/io/struct.Error.html</a></p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p><img src="`+e+'" alt=""></p><p>这节课我们对 Rust 中类型相关的知识做了一个专门的讲解。现代编程语言的趋势是越来越强调类型化，比如 TypeScript、Rust。一个成熟的类型系统对于编写健壮的程序来说至关重要。类型可以看作是对变量取值空间的一种约束。</p><p>在 Rust 中，有很多对多种类型做统一处理的需求，因此引入了类型参数和泛型的概念。它们实际是在类型化道路上的必然选择，因为单一的类型确实不方便，或者不能满足我们的需求。你要先克服对这种参数化设计的畏惧感，只要花一些时间熟悉这节课我们提到的那些形式，这些概念就不难掌握。</p><p>然后，这节课我们还讲解了 4 种类型体系建模方法，你可以在后面的实践过程中慢慢加深理解。</p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>如果你给某个泛型实现了一个方法，那么，还能为它的一个具化类型再实现同样的方法吗？</p><p>欢迎你把思考后的结果分享到评论区，也欢迎你把这节课的内容分享给需要的朋友，我们下节课再见！</p><h4 id="《programming-with-types》原文摘录" tabindex="-1">《Programming.with.Types》原文摘录 <a class="header-anchor" href="#《programming-with-types》原文摘录" aria-label="Permalink to &quot;《Programming.with.Types》原文摘录&quot;">​</a></h4><p><img src="'+t+'" alt="图片"></p><p><img src="'+r+'" alt="图片"></p><p><img src="'+c+'" alt="图片"></p>',163)]))}const E=n(B,[["render",y]]);export{d as __pageData,E as default};
