import{_ as a,c as n,o as l,ag as p}from"./chunks/framework.D2WelYEY.js";const e="/tanggang_rust/assets/3dc2525bf7768d62b0efaaa0332d0e2a.cn7sIhTn.jpg",m=JSON.parse('{"title":"28 ｜ Nom：用 Rust 写一个 Parser 解析器","description":"","frontmatter":{},"headers":[],"relativePath":"Document/28｜Nom：用Rust写一个Parser解析器.md","filePath":"Document/28｜Nom：用Rust写一个Parser解析器.md","lastUpdated":1740766764000}'),o={name:"Document/28｜Nom：用Rust写一个Parser解析器.md"};function r(t,s,c,B,i,y){return l(),n("div",null,s[0]||(s[0]=[p('<h1 id="_28-nom-用-rust-写一个-parser-解析器" tabindex="-1">28 ｜ Nom：用 Rust 写一个 Parser 解析器 <a class="header-anchor" href="#_28-nom-用-rust-写一个-parser-解析器" aria-label="Permalink to &quot;28 ｜ Nom：用 Rust 写一个 Parser 解析器&quot;">​</a></h1><p>你好，我是 Mike。今天我们来一起学习如何用 Rust 写一个 Parser 解析器。</p><p>说到解析器，非计算机科班出身的人会一脸懵，这是什么？而计算机科班出身的人会为之色变，曾经熬夜啃“龙书”的痛苦经历浮现眼前。解析器往往跟“编译原理”这个概念一起出现，谈解析器色变完全可以理解。</p><p>实际上，解析器也没那么难，并不是所有需要“解析”的地方都与编程语言相关。因此我们可以先把“编译原理”的负担给卸掉。在开发过程中，其实经常会碰到需要解析的东西，比如自定义配置文件，从网络上下载下来的一些数据文件、服务器日志文件等。这些其实不需要很深的背景知识。更加复杂一点的，比如网络协议的处理等等，这些也远没有达到一门编程语言的难度。</p><p>另一方面，虽然我们这门课属于入门级，但是对于未来的职业规划来说，如果你说你能写解析器，那面试官可能会很感兴趣。所以这节课我会从简单的示例入手，让你放下恐惧，迈上“解析”之路。</p><h2 id="解析器是什么" tabindex="-1">解析器是什么？ <a class="header-anchor" href="#解析器是什么" aria-label="Permalink to &quot;解析器是什么？&quot;">​</a></h2><p>解析器其实很简单，就是把一个字符串或字节串解析成某种类型。对应的，在 Rust 语言里就是把一个字段串解析成一个 Rust 类型。一个 Parser 其实就是一个 Rust 函数。</p><p>这个转换过程有很多种方法。</p><ol><li>最原始的是完全手撸，一个字符一个字符吞入解析。</li><li>对一些简单情况，直接使用 String 类型中的 find、split、replace 等函数就可以。</li><li>用正则表达式能够解析大部分种类的文本。</li><li>还可以用一些工具或库帮助解析，比如 Lex、Yacc、LalrPop、Nom、Pest 等。</li><li>Rust 语言的宏也能用来设计 DSL，能实现对 DSL 文本的解析。</li></ol><p>这节课我们只关注第 4 点。在所有辅助解析的工具或库里，我们只关心 Rust 生态辅助解析的库。</p><h2 id="rust-生态中主流的解析工具" tabindex="-1">Rust 生态中主流的解析工具 <a class="header-anchor" href="#rust-生态中主流的解析工具" aria-label="Permalink to &quot;Rust 生态中主流的解析工具&quot;">​</a></h2><p>目前 Rust 生态中已经有几个解析库用得比较广泛，我们分别来了解下。</p><ul><li><a href="https://crates.io/crates/lalrpop" target="_blank" rel="noreferrer">LalrPop</a> 类似于 Yacc，用定义匹配规则和对应的行为方式来写解析器。</li><li><a href="https://crates.io/crates/pest" target="_blank" rel="noreferrer">Pest</a> 使用解析表达式语法（Parsing Expression Grammar，PEG）来定义解析规则，PEG 已经形成了一个成熟的标准，各种语言都有相关的实现。</li><li>Nom 是一个解析器组合子（Parser-Combinator）库，用函数组合的方式来写规则。一个 Parser 就是一个函数，接收一个输入，返回一个结果。而组合子 combinator 也是一个函数，用来接收多个 Parser 函数作为输入，把这些小的 Parser 组合在一起，形成一个大的 Parser。这个过程可以无限叠加。</li></ul><h2 id="nom-库介绍" tabindex="-1">Nom 库介绍 <a class="header-anchor" href="#nom-库介绍" aria-label="Permalink to &quot;Nom 库介绍&quot;">​</a></h2><p>这节课我们选用 Nom 库来讲解如何快速写出一个解析器，目前（2023 年 12 月）Nom 库的版本为 v7.1。选择 Nom 的原因是，它可以用来解析几乎一切东西，比如文本协议、二进制文件、流数据、视频编码数据、音频编码数据，甚至是一门完整功能的编程语言。</p><p>Nom 的显著特性在安全解析、便捷的解析过程中的错误处理和尽可能的零拷贝上。因此用 Nom 解析库写的代码是非常高效的，甚至比你用 C 语言手撸一个解析器更高效，这里有一些 <a href="https://github.com/rust-bakery/parser_benchmarks" target="_blank" rel="noreferrer">评测</a> 你可以参考。Nom 能够做到这种程度主要是因为站在了 Rust 的肩膀上。</p><p>解析器组合子是一种解析方法，这种方法不同于 PEG 通过写单独的语法描述文件的方式进行解析。Nom 的 slogan 是“nom, eating data byte by byte”，也就是一个字节一个字节地吞，顺序解析。</p><p>使用 Nom 你可以写特定目的的小函数，比如获取 5 个字节、识别单词 HTTP 等，然后用有意义的模式把它们组装起来，比如识别 <code>&#39;HTTP&#39;</code>，然后是一个空格、一个版本号，也就是 <code>&#39;HTTP 1.1&#39;</code> 这种形式。这样写出的代码就非常小，容易起步。并且这种形式明显适用于流模式，比如网络传输的数据，一次可能拿不完，使用 Nom 能够边取数据边解析。</p><p>解析器组合子思路有 5 个优势。</p><ul><li>解析器很小，很容易写。</li><li>解析器的组件非常容易重用。</li><li>解析器的组件非常容易用单元测试进行独立测试。</li><li>解析器组合的代码看起来接近于你要解析的数据结构，非常直白。</li><li>你可以针对你当前的特定数据，构建部分解析器，而不用关心其他数据部分。</li></ul><h3 id="nom-的工作方式" tabindex="-1">Nom 的工作方式 <a class="header-anchor" href="#nom-的工作方式" aria-label="Permalink to &quot;Nom 的工作方式&quot;">​</a></h3><p>Nom 的解析器基本工作方式很简单，就是读取输入数据流，比如字符串，返回 <code>(rest, output)</code> 这样一个 tuple，rest 就是没有解析到的字符串的剩余部分，output 就是解析出来的目标类型。很多时候，这个返回结果就是(&amp;str, &amp;str)。解析过程中，可以处理解析错误。</p><p><img src="'+e+`" alt=""></p><h3 id="基本解析器和组合子" tabindex="-1">基本解析器和组合子 <a class="header-anchor" href="#基本解析器和组合子" aria-label="Permalink to &quot;基本解析器和组合子&quot;">​</a></h3><p>在 Nom 中，一个 Parser 其实就是一个函数。Nom 提供了一些最底层的 Parser。相当于构建房屋的砖块，我们掌握了这些砖块后，就可以把这些砖块组合使用，像乐高积木，一层层越搭越高。</p><p>这里我们列举一些常用的解析器，案例基本上都是对字符串的解析。</p><h4 id="tag" tabindex="-1">Tag <a class="header-anchor" href="#tag" aria-label="Permalink to &quot;Tag&quot;">​</a></h4><p>tag 非常常用，用来指代一个确定性的字符串，比如 “hello”。</p><ul><li><a href="https://docs.rs/nom/latest/nom/bytes/complete/fn.tag.html" target="_blank" rel="noreferrer">tag</a>：识别一个确定性的字符串。</li><li><a href="https://docs.rs/nom/latest/nom/bytes/complete/fn.tag_no_case.html" target="_blank" rel="noreferrer">tag_no_case</a>：识别一个确定性的字符串，忽略大小写。</li></ul><h4 id="基本类别解析器" tabindex="-1">基本类别解析器 <a class="header-anchor" href="#基本类别解析器" aria-label="Permalink to &quot;基本类别解析器&quot;">​</a></h4><p>下面是 Nom 提供的用来识别字符的基本解析器，可以看到，都是我们熟知的解析器。</p><ul><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.alpha0.html" target="_blank" rel="noreferrer">alpha0</a>：识别 a-z, A-Z 中的字符 0 个或多个。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.alpha1.html" target="_blank" rel="noreferrer">alpha1</a>：识别 a-z, A-Z 中的字符 1 个或多个（至少 1 个）。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.alphanumeric0.html" target="_blank" rel="noreferrer">alphanumeric0</a>：识别 0-9, a-z, A-Z 中的字符 0 个或多个。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.alphanumeric1.html" target="_blank" rel="noreferrer">alphanumeric1</a>：识别 0-9, a-z, A-Z 中的字符 1 个或多个（至少 1 个）。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.digit0.html" target="_blank" rel="noreferrer">digit0</a>：识别 0-9 中的字符 0 个或多个。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.digit1.html" target="_blank" rel="noreferrer">digit1</a>：识别 0-9 中的字符 1 个或多个（至少 1 个）。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.hex_digit0.html" target="_blank" rel="noreferrer">hex_digit0</a>：识别 0-9, A-F, a-f 中的字符 0 个或多个。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.hex_digit1.html" target="_blank" rel="noreferrer">hex_digit1</a>：识别 0-9, A-F, a-f 中的字符 1 个或多个（至少 1 个）。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.space0.html" target="_blank" rel="noreferrer">space0</a>：识别 空格和 tab 符 \\t 0 个或多个。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.space1.html" target="_blank" rel="noreferrer">space1</a>：识别 空格和 tab 符 \\t 0 个或多个（至少 1 个）。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.multispace0.html" target="_blank" rel="noreferrer">multispace0</a>：识别 空格、tab 符 \\t 、回车符 \\r、换行符\\n， 0 个或多个。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.multispace1.html" target="_blank" rel="noreferrer">multispace1</a>：识别 空格、tab 符 \\t 、回车符 \\r、换行符\\n， 1 个或多个（至少 1 个）。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.tab.html" target="_blank" rel="noreferrer">tab</a>：识别确定的制表符 \\t。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.newline.html" target="_blank" rel="noreferrer">newline</a>：识别确定的换行符 \\n。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.line_ending.html" target="_blank" rel="noreferrer">line_ending</a>：识别 ‘\\n’ 和‘\\r\\n’。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.not_line_ending.html" target="_blank" rel="noreferrer">not_line_ending</a>：识别 ‘\\n’ 和‘\\r\\n’之外的其他字符（串）。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.one_of.html" target="_blank" rel="noreferrer">one_of</a>：识别给定的字符集合中的一个。</li><li><a href="https://docs.rs/nom/latest/nom/character/complete/fn.none_of.html" target="_blank" rel="noreferrer">none_of</a>：识别给定的字符集合之外的字符。</li></ul><p>完整的列表请看这里： <a href="https://docs.rs/nom/latest/nom/character/complete/index.html" target="_blank" rel="noreferrer">https://docs.rs/nom/latest/nom/character/complete/index.html</a></p><h4 id="基本组合子" tabindex="-1">基本组合子 <a class="header-anchor" href="#基本组合子" aria-label="Permalink to &quot;基本组合子&quot;">​</a></h4><ul><li><a href="https://docs.rs/nom/latest/nom/branch/fn.alt.html" target="_blank" rel="noreferrer">alt</a>：Try a list of parsers and return the result of the first successful one 或组合子，满足其中的一个解析器就可成功返回。</li><li><a href="https://docs.rs/nom/latest/nom/sequence/fn.tuple.html" target="_blank" rel="noreferrer">tuple</a>：和组合子，并且按顺序执行解析器，并返回它们的值为一个 tuple。</li><li><a href="https://docs.rs/nom/latest/nom/sequence/fn.delimited.html" target="_blank" rel="noreferrer">delimited</a>：解析左分界符目标信息右分界符这种格式，比如 <code>&quot;{ ... }&quot;</code>，返回目标信息。</li><li><a href="https://docs.rs/nom/latest/nom/sequence/fn.pair.html" target="_blank" rel="noreferrer">pair</a>：tuple 的两元素版本，返回一个二个元素的 tutple。</li><li><a href="https://docs.rs/nom/latest/nom/sequence/fn.separated_pair.html" target="_blank" rel="noreferrer">separated_pair</a>：解析目标信息分隔符目标信息这种格式，比如 <code>&quot;1,2&quot;</code> 这种，返回一个二个元素的 tutple。</li><li><a href="https://docs.rs/nom/latest/nom/bytes/complete/fn.take_while_m_n.html" target="_blank" rel="noreferrer">take_while_m_n</a>：解析最少 m 个，最多 n 个字符，这些字符要符合给定的条件。</li></ul><p>更多 Nom 中的解析器和组合子的信息请查阅 <a href="https://docs.rs/nom/latest/nom/index.html" target="_blank" rel="noreferrer">Nom 的 API</a>。</p><h2 id="nom-实战" tabindex="-1">Nom 实战 <a class="header-anchor" href="#nom-实战" aria-label="Permalink to &quot;Nom 实战&quot;">​</a></h2><p>我们从最简单的解析器开始。</p><h3 id="_0-号解析器" tabindex="-1">0 号解析器 <a class="header-anchor" href="#_0-号解析器" aria-label="Permalink to &quot;0 号解析器&quot;">​</a></h3><p>0 号解析器就相当于整数的 0，这是一个什么也干不了的解析器。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> nom</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> do_nothing_parser</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;(), </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> Error</span><span style="color:#ABB2BF;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">remaining_input</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> do_nothing_parser</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;abcdefg&quot;</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#61AFEF;">    assert_eq!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">remaining_input</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;abcdefg&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    assert_eq!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>上面的 <code>do_nothing_parser()</code> 函数就是一个 Nom 的解析器，对，就是一个普通的 Rust 函数，它接收一个 &amp;str 参数，返回一个 <code>IResult&lt;&amp;str, &amp;str&gt;，IResult&lt;I, O&gt;</code> 是 Nom 定义的解析器的标准返回类型。你可以看一下它的 <a href="https://docs.rs/nom/latest/nom/type.IResult.html" target="_blank" rel="noreferrer">定义</a>。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> type</span><span style="color:#E5C07B;"> IResult</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">O</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">E</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Error</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">&gt;&gt; </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Result</span><span style="color:#ABB2BF;">&lt;(</span><span style="color:#E5C07B;">I</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">O</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">Err</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">E</span><span style="color:#ABB2BF;">&gt;&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以看到，正确返回情况下，它的返回内容是 <code>(I, O)</code>，一个元组，元组第一个元素是剩下的未解析的输入流部分，第二个元素是解析出的内容。这正好对应 <code>do_nothing_parser()</code> 的返回内容 <code>(input, &quot;&quot;)</code>。这里是原样返回，不做任何处理。</p><p>注意， <code>E = Error&lt;I&gt;</code> 这种写法是类型参数的默认类型，请回顾课程 <a href="https://time.geekbang.org/column/article/724776?utm_campaign=geektime_search&amp;utm_content=geektime_search&amp;utm_medium=geektime_search&amp;utm_source=geektime_search&amp;utm_term=geektime_search" target="_blank" rel="noreferrer">第 10 讲</a> 找到相关知识点。</p><p>看起来这个解析器没有啥作用，但不可否认，它让我们直观感受了 Nom 中的 parser 是个什么东西，我们已经有了基本模板。</p><h3 id="_1-号解析器" tabindex="-1">1 号解析器 <a class="header-anchor" href="#_1-号解析器" aria-label="Permalink to &quot;1 号解析器&quot;">​</a></h3><p>这次我们必须要做点什么事情了，那就把 <code>&quot;abcedfg&quot;</code> 的前三个字符识别出来。我们需要用到 tag 解析器。代码如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> use</span><span style="color:#E5C07B;"> nom</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">bytes</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">complete</span><span style="color:#ABB2BF;">::tag;</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> use</span><span style="color:#E5C07B;"> nom</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> parse_input</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">    tag</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;abc&quot;</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;(), </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> Error</span><span style="color:#ABB2BF;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">leftover_input</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> parse_input</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;abcdefg&quot;</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#61AFEF;">    assert_eq!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">leftover_input</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;defg&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    assert_eq!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">output</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;abc&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    assert!</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">parse_input</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;defdefg&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">is_err</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在这个例子里， <code>tag(&quot;abc&quot;)</code> 的返回值是一个 parser，然后这个 parser 再接收 input 的输入，并返回 <code>IResult&lt;&amp;str, &amp;str&gt;</code>。前面的我们看到，tag 识别固定的字符串/字节串。</p><p>tag 实际返回一个闭包，你可以看一下它的定义。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> fn</span><span style="color:#61AFEF;"> tag</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">ParseError</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">&gt;&gt;(</span></span>
<span class="line"><span style="color:#E06C75;">    tag</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">T</span></span>
<span class="line"><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#C678DD;">impl</span><span style="color:#61AFEF;"> Fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#C678DD;">where</span></span>
<span class="line"><span style="color:#E5C07B;">    Input</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">InputTake</span><span style="color:#ABB2BF;"> + </span><span style="color:#E5C07B;">Compare</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">T</span><span style="color:#ABB2BF;">&gt;,</span></span>
<span class="line"><span style="color:#E5C07B;">    T</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">InputLength</span><span style="color:#ABB2BF;"> + </span><span style="color:#E5C07B;">Clone</span><span style="color:#ABB2BF;">,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>也就是返回下面这行内容。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">impl</span><span style="color:#61AFEF;"> Fn</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Input</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里这个 Fn 就是用于描述闭包的 trait，你可以回顾一下课程 <a href="https://time.geekbang.org/column/article/724942" target="_blank" rel="noreferrer">第 11 讲</a> 中关于它的内容。</p><p>这个示例里 <code>parse_input(&quot;abcdefg&quot;)?</code> 这个解析器会返回 <code>(&quot;defg&quot;, &quot;abc&quot;)</code>，也就是把 <code>&quot;abc&quot;</code> 解析出来了，并返回了剩下的 <code>&quot;defg&quot;</code>。而如果在待解析输入中找不到目标 pattern，那么就会返回 Err。</p><h3 id="解析一个坐标" tabindex="-1">解析一个坐标 <a class="header-anchor" href="#解析一个坐标" aria-label="Permalink to &quot;解析一个坐标&quot;">​</a></h3><p>下面我们再加大难度，解析一个坐标，也就是从 <code>&quot;(x, y)&quot;</code> 这种形式中解析出 x 和 y 两个数字来。</p><p>代码如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">error</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Error</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> nom</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> nom</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">bytes</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">complete</span><span style="color:#ABB2BF;">::tag;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> nom</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">sequence</span><span style="color:#ABB2BF;">::{separated_pair, delimited};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">PartialEq</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> struct</span><span style="color:#E5C07B;"> Coordinate</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  pub</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">:   </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">  pub</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">:   </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> nom</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">character</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">complete</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解析 &quot;x, y&quot; 这种格式</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> parse_integer_pair</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, (</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">)&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">    separated_pair</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E5C07B;">        i32</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">        tag</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;, &quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        i32</span></span>
<span class="line"><span style="color:#ABB2BF;">    )(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解析 &quot;( ... )&quot; 这种格式</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> parse_coordinate</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Coordinate</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">remaining</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> delimited</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">        tag</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;(&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">        parse_integer_pair</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">        tag</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;)&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    )(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">remaining</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Coordinate</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">}))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;(), </span><span style="color:#E5C07B;">Box</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">dyn</span><span style="color:#E5C07B;"> Error</span><span style="color:#ABB2BF;">&gt;&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parsed</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> parse_coordinate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;(3, 5)&quot;</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#61AFEF;">    assert_eq!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parsed</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Coordinate</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">parsed</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> parse_coordinate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;(2, -4)&quot;</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#61AFEF;">    assert_eq!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parsed</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Coordinate</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">: -</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 用nom，可以方便规范地处理解析失败的情况</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> parsing_error</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parse_coordinate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;(3,)&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    assert!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parsing_error</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is_err</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> parsing_error</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parse_coordinate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;(,3)&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    assert!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parsing_error</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is_err</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> parsing_error</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> parse_coordinate</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Ferris&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">    assert!</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">parsing_error</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is_err</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">(())</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><p>我们从 <code>parse_coordinate() parser</code> 看起。首先遇到的是 delimited 这个 combinator，它的作用我们查一下上面的表格，是解析左分界符目标信息右分界符这种格式，返回目标信息，也就是解析 <code>(xxx), &lt;xxx&gt;, {xxx}</code> 这种前后配对边界符的 pattern，正好可以用来识别我们这个 <code>(x, y)</code>，我们把 <code>&quot;(x, y)&quot;</code> 第一步分解成 <code>&quot;(&quot;, &quot;x, y&quot;, &quot;)&quot;</code> 三部分，用 delimited 来处理。同样的，它也返回一个解析器闭包。</p><p>然后，对于中间的这部分 <code>&quot;x, y&quot;</code>，我们用 <code>parse_integer_pair()</code> 这个 parser 来处理。继续看这个函数，它里面用到了 <code>separated_pair</code> 这个 combinator。查一下上面的表，你会发现它是用来处理左目标信息分隔符右目标信息这种 pattern 的，刚好能处理我们的 <code>&quot;x, y&quot;</code>。中间那个分隔符就用一个 <code>tag(&quot;, &quot;)</code> 表示，两侧是 i32 这个 parser。注意，这里这个 <a href="https://docs.rs/nom/latest/nom/character/complete/fn.i32.html" target="_blank" rel="noreferrer">i32</a> 是代码中引入的。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> nom</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">character</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">complete</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">i32</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>不是 Rust std 中的那个 i32，它实际是 Nom 中提供的一个 parser，用来把字符串解析成 std 中的 i32 数字。 <code>separated_pair</code> 也返回一个解析器闭包。可以看到，返回的闭包调用形式和 delimited 是一样的。其实整个 Nom 解析器的签名都是固定的，可以以这种方式无限搭积木。</p><p><code>parse_integer_pair</code> 就返回了 \`(x, y) 两个 i32 数字组成的元组类型，最后再包成 Coordinate 结构体类型返回。整个任务就结束了。</p><p>可以看到，这实际就是标准的 <strong>递归下降</strong> 解析方法。先识别大 pattern，分割，一层层解析小 pattern，直到解析到最小单元为止，再组装成需要的输出类型，从函数中一层层返回。整个过程就是普通的 Rust 函数栈调用过程。</p><h3 id="解析-16-进制色彩编码" tabindex="-1">解析 16 进制色彩编码 <a class="header-anchor" href="#解析-16-进制色彩编码" aria-label="Permalink to &quot;解析 16 进制色彩编码&quot;">​</a></h3><p>下面我们继续看一个示例：解析网页上的色彩格式 #2F14DF。</p><p>对于这样比较简单的问题，手动用 String 的方法分割当然可以，用正则表达式也可以。这里我们来研究用 Nom 怎样做。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> nom</span><span style="color:#ABB2BF;">::{</span></span>
<span class="line"><span style="color:#E5C07B;">    bytes</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">complete</span><span style="color:#ABB2BF;">::{tag, take_while_m_n},</span></span>
<span class="line"><span style="color:#E5C07B;">    combinator</span><span style="color:#ABB2BF;">::map_res,</span></span>
<span class="line"><span style="color:#E5C07B;">    sequence</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Tuple</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">    IResult</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[derive(</span><span style="color:#E5C07B;">Debug</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">PartialEq</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"><span style="color:#C678DD;">pub</span><span style="color:#C678DD;"> struct</span><span style="color:#E5C07B;"> Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    pub</span><span style="color:#E06C75;"> red</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    pub</span><span style="color:#E06C75;"> green</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#C678DD;">    pub</span><span style="color:#E06C75;"> blue</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> from_hex</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">ParseIntError</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#E5C07B;">    u8</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_str_radix</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> is_hex_digit</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">char</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">bool</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    c</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is_digit</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">16</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> hex_primary</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">u8</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#61AFEF;">    map_res</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">take_while_m_n</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">is_hex_digit</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">from_hex</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> hex_color</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">: &amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">IResult</span><span style="color:#ABB2BF;">&lt;&amp;</span><span style="color:#E5C07B;">str</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> tag</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#&quot;</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">red</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">green</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">blue</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">hex_primary</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hex_primary</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hex_primary</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)?;</span></span>
<span class="line"><span style="color:#E5C07B;">    Ok</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">red</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">green</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">blue</span><span style="color:#ABB2BF;"> }))</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">#[test]</span></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> parse_color</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#61AFEF;">    assert_eq!</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">        hex_color</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#2F14DF&quot;</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E5C07B;">        Ok</span><span style="color:#ABB2BF;">((</span></span>
<span class="line"><span style="color:#98C379;">            &quot;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            Color</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                red</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">47</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                green</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">                blue</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">223</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        ))</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>执行 <code>cargo test</code>，输出 ：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">running</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;"> test</span></span>
<span class="line"><span style="color:#E06C75;">test</span><span style="color:#E06C75;"> parse_color</span><span style="color:#ABB2BF;"> ... </span><span style="color:#E06C75;">ok</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">test</span><span style="color:#E06C75;"> result</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">ok</span><span style="color:#ABB2BF;">. </span><span style="color:#D19A66;">1</span><span style="color:#E06C75;"> passed</span><span style="color:#ABB2BF;">; </span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> failed</span><span style="color:#ABB2BF;">; </span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> ignored</span><span style="color:#ABB2BF;">; </span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> measured</span><span style="color:#ABB2BF;">; </span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> filtered</span><span style="color:#E06C75;"> out</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">finished</span><span style="color:#C678DD;"> in</span><span style="color:#D19A66;"> 0.</span><span style="color:#ABB2BF;">00s</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>我们来详细解释这个文件。</p><p>代码从 <code>hex_color</code> 入手，输入就是 <code>&quot;#2F14DF&quot;</code> 这个字符串。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">_</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> tag</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;#&quot;</span><span style="color:#ABB2BF;">)(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)?;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这句执行完，返回的 input 变成 <code>&quot;2F14DF&quot;</code>。</p><p>接下来就要分析三个 16 进制数字，两个字符一组。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">hex_primary</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hex_primary</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hex_primary</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)?;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们在元组上直接调用了 <code>.parse()</code> 函数。这是什么神奇的用法？别慌，你在 std 标准库文档里面肯定找不到，实现在 <a href="https://docs.rs/nom/latest/nom/sequence/trait.Tuple.html#tymethod.parse" target="_blank" rel="noreferrer">这里</a>。它将常用的元组变成了 parser。但是这样的实现需要手动调用一下 <code>.parse()</code> 函数来执行解析。</p><p>这里我们意图就是把颜色解析成独立的三个元素，每种元素是一个 16 进制数，这个 16 进制数进一步用 <code>hex_primary</code> 来解析。我们再来看 <code>hex_primary</code> 的实现。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#61AFEF;">map_res</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#61AFEF;">    take_while_m_n</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">is_hex_digit</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#E06C75;">    from_hex</span></span>
<span class="line"><span style="color:#ABB2BF;">  )(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中，代码第二行表示在 input 中一次取 2 个字符（前面两个参数 2，2，表示返回不多于 2 个，不少于 2 个，因此就是等于 2 个），取出每个字符的时候，都要判断是否是 16 进制数字。是的话才取，不是的话就会返回 Err。</p><p><code>map_res</code> 的意思是，对 <code>take_while_m_n parser</code> 返回的结果应用一个后面提供的函数，这里就是 <code>from_hex</code>，它的目的是把两个 16 进制的字符组成的字符串转换成 10 进制数字类型，这里就是 u8 类型。因此 <code>hex_primary</code> 函数返回的结果是 <code>IResult&lt;&amp;str, u8&gt;</code>。 <code>u8::from_str_radix(input, 16)</code> 是 Rust std 库中的 u8 类型的自带方法，16 表示 16 进制。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">  let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;">red</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">green</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">blue</span><span style="color:#ABB2BF;">)) </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">hex_primary</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hex_primary</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hex_primary</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">parse</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">)?;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>因此这一行，正常返回后，input 就为 <code>&quot;&quot;</code> 了， <code>(red, green, blue)</code> 这三个是 u8 类型的三元素 tuple，实际这里相当于定义了 red、green、blue 三个变量。</p><p>然后下面一行，就组装成 Color 对象返回了，目标完成。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Ok</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Color</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">red</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">green</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">blue</span><span style="color:#ABB2BF;"> }))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="更多示例" tabindex="-1">更多示例 <a class="header-anchor" href="#更多示例" aria-label="Permalink to &quot;更多示例&quot;">​</a></h3><p>前面我们说过，Nom 非常强大，可应用领域非常广泛，这里有一些链接，你有兴趣的话，可以继续深入研究。</p><ul><li>解析 HTTP2 协议： <a href="https://github.com/sozu-proxy/sozu/blob/main/lib/src/protocol/h2/parser.rs" target="_blank" rel="noreferrer">https://github.com/sozu-proxy/sozu/blob/main/lib/src/protocol/h2/parser.rs</a></li><li>解析 flv 文件： <a href="https://github.com/rust-av/flavors/blob/master/src/parser.rs" target="_blank" rel="noreferrer">https://github.com/rust-av/flavors/blob/master/src/parser.rs</a>，你还可以对照 C 实现体会 Nom 的厉害之处： <a href="https://github.com/FFmpeg/FFmpeg/blob/master/libavformat/flvdec.c" target="_blank" rel="noreferrer">https://github.com/FFmpeg/FFmpeg/blob/master/libavformat/flvdec.c</a>。</li><li>解析 Python 代码： <a href="https://github.com/progval/rust-python-parser" target="_blank" rel="noreferrer">https://github.com/progval/rust-python-parser</a></li><li>自己写一个语言： <a href="https://github.com/Rydgel/monkey-rust" target="_blank" rel="noreferrer">https://github.com/Rydgel/monkey-rust</a></li></ul><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>这节课我们学习了如何用 Nom 解决解析器任务。在计算机领域，需要解析的场景随处可见，以前的 lexer、yacc 等套路其实已经过时了，Rust 的 Nom 之类的工具才是业界最新的成果，你掌握了 Nom 等工具，就能让这类工作轻松自如。</p><p>我们需要理解 Nom 这类解析器库背后的 <strong>解析器-组合子</strong> 思想，它是一种通用的解决复杂问题的构建方法，也就是递归下降分解问题，从上到下分割任务，直到问题可解决为止。然后先解决基本的小问题，再把这些成果像砖块那样组合起来，于是便能够解决复杂的系统问题。</p><p>可以看到，Nom 的学习门槛其实并不高，其中很关键的一点是学完一部分就能应用一部分，不像其他有些框架，必须整体学完后才能应用。一旦你通过一定的时间掌握了 Nom 的基本武器零件后，就会收获到一项强大的新技能，能够让你在以后的工作中快速升级，解决你以前不敢去解决的问题。</p><p>这节课你应该也能感受到 Rust 打下的扎实基础（安全编程、高性能等），Rust 生态已经构建出强大框架和工具，这些框架和工具能够让我们达到前所未有的生产力水平，已经完全不输于甚至超过其他编程语言了。</p><p>这节课所有可运行代码在这里： <a href="https://github.com/miketang84/jikeshijian/tree/master/28-nom" target="_blank" rel="noreferrer">https://github.com/miketang84/jikeshijian/tree/master/28-nom</a></p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>请尝试用 Nom 解析一个简单版本的 CSV 格式文件。欢迎你把你解析的内容分享出来，我们一起看一看，如果你觉得这节课对你有帮助的话，也欢迎你分享给其他朋友，我们下节课再见！</p>`,98)]))}const b=a(o,[["render",r]]);export{m as __pageData,b as default};
