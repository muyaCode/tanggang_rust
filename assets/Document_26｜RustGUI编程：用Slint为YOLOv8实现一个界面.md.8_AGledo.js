import{_ as n,c as a,o as l,ag as p}from"./chunks/framework.D2WelYEY.js";const o="/tanggang_rust/assets/ab5aebed249dc410328a4cee8305e6a4.DSU1cTsR.png",e="/tanggang_rust/assets/a7c4ecbf59ce56f727581577e65984a3.C4UoZDqK.jpg",r="/tanggang_rust/assets/de7a2c40048a2794e5c2e0e482e84e74.C7RJCYHE.png",c="/tanggang_rust/assets/9315e64aa40a8b8abb5ec91817742943.BasjmTN1.png",t="/tanggang_rust/assets/9a0a02da5e5f66ab8afyybed86a8b7e1.BgHY1Zji.png",B="/tanggang_rust/assets/178cf0f880ecbfb19827f34d0897c942.iR3Jicfm.png",y="/tanggang_rust/assets/2cba65908fe6ba1f7cd6f17e8ffc885e.DPqzAxwR.jpg",d=JSON.parse('{"title":"26 ｜ Rust GUI 编程：用 Slint 为 YOLOv8 实现一个界面","description":"","frontmatter":{},"headers":[],"relativePath":"Document/26｜RustGUI编程：用Slint为YOLOv8实现一个界面.md","filePath":"Document/26｜RustGUI编程：用Slint为YOLOv8实现一个界面.md","lastUpdated":1740766764000}'),i={name:"Document/26｜RustGUI编程：用Slint为YOLOv8实现一个界面.md"};function F(A,s,b,C,u,E){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="_26-rust-gui-编程-用-slint-为-yolov8-实现一个界面" tabindex="-1">26 ｜ Rust GUI 编程：用 Slint 为 YOLOv8 实现一个界面 <a class="header-anchor" href="#_26-rust-gui-编程-用-slint-为-yolov8-实现一个界面" aria-label="Permalink to &quot;26 ｜ Rust GUI 编程：用 Slint 为 YOLOv8 实现一个界面&quot;">​</a></h1><p>你好，我是 Mike。</p><p>今天我们继续用 Slint 做一个小项目。这个项目的目标是为我们 <a href="https://time.geekbang.org/column/article/734943" target="_blank" rel="noreferrer">第 24 讲</a> 实现的用 YOLOv8 从图片中识别出对象及姿势的小应用提供一个 GUI 界面。</p><p>这个 GUI 程序非常实用，可以以一种真观对比的形式让你看到对原始图片经过 AI 加工后的效果。比如像下面这样：</p><p><img src="'+o+`" alt="图片"></p><h2 id="原理解析" tabindex="-1">原理解析 <a class="header-anchor" href="#原理解析" aria-label="Permalink to &quot;原理解析&quot;">​</a></h2><p>根据我们上节课学到的知识及第 24 讲里的操作流程，我们的实现应该分成 4 步。</p><ol><li>选择一张图片，加载显示在界面左边。</li><li>点击 “Detect Objects”或 “Detect Poses”。</li><li>经过 YOLOv8 引擎计算和标注，生成一张新的图片。</li><li>在界面右边加载这张新图片。</li></ol><p>下面让我们开始动手操作。</p><p>注：这节课的代码适用于 Slint v1.3 版本。</p><h2 id="分步骤实现" tabindex="-1">分步骤实现 <a class="header-anchor" href="#分步骤实现" aria-label="Permalink to &quot;分步骤实现&quot;">​</a></h2><h3 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h3><p>我们还是使用官方提供的 Slint 模板来创建，先下载模板。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">cargo</span><span style="color:#E06C75;"> generate</span><span style="color:#ABB2BF;"> --</span><span style="color:#E06C75;">git</span><span style="color:#E06C75;"> https</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//github.com/slint-ui/slint-rust-template --name slint-yolov8-demo</span></span>
<span class="line"><span style="color:#E06C75;">cd</span><span style="color:#E06C75;"> slint</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">yolov8</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">demo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>运行 <code>cargo run</code> 测试一下。</p><h3 id="设计界面" tabindex="-1">设计界面 <a class="header-anchor" href="#设计界面" aria-label="Permalink to &quot;设计界面&quot;">​</a></h3><p>这个应用其实不复杂，你可以这样来分解这个界面。</p><p><img src="`+e+'" alt=""></p><ol><li>从上到下使用一个 VerticalBox，分成三部分：Model 说明、图片显示区、按钮区。</li><li>图片显示区使用一个 HorizontalBox，分成三部分：左边图片显示区、中间分隔线、右边图片显示区。图片使用 Image 基础元素来显示。</li><li>按钮区，使用 HorizontalBox 排列三个按钮：选择图片、探测对象、探测姿势，并且左对齐。</li></ol><p>这样界面就设计好了。</p><h3 id="设计回调" tabindex="-1">设计回调 <a class="header-anchor" href="#设计回调" aria-label="Permalink to &quot;设计回调&quot;">​</a></h3><p>这个小工具的回调任务的步骤也很清晰。</p><ul><li><p>界面刚打开的时候，显示空白界面。</p><p><img src="'+r+'" alt="图片"></p></li><li><p>点击 “Select Picture”后，弹出图片选择对话框，选择一张图片，并显示在左侧。</p><p><img src="'+c+'" alt="图片"></p></li><li><p>点击“Detect Objects”，生成新图片，显示在右侧。</p><p><img src="'+t+'" alt="图片"></p></li><li><p>点击“Detect Poses”，生成新图片，显示在右侧。</p><p><img src="'+B+`" alt="图片"></p></li></ul><p>整个项目回调的逻辑就描述完成了。</p><h3 id="下载模型" tabindex="-1">下载模型 <a class="header-anchor" href="#下载模型" aria-label="Permalink to &quot;下载模型&quot;">​</a></h3><p>我们最好先手动下载 YOLOv8 的两个模型文件，下载方式如下：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#D19A66;">HF_HUB_ENABLE_HF_TRANSFER</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#D19A66;"> HF_ENDPOINT</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">https</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//hf-mirror.com huggingface-cli download lmz/candle-yolo-v8 yolov8m.safetensors</span></span>
<span class="line"><span style="color:#D19A66;">HF_HUB_ENABLE_HF_TRANSFER</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#D19A66;"> HF_ENDPOINT</span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;">https</span><span style="color:#ABB2BF;">:</span><span style="color:#7F848E;font-style:italic;">//hf-mirror.com huggingface-cli download lmz/candle-yolo-v8 yolov8m-pose.safetensors</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这是为 HuggingFace candle 框架定制的两个模型文件，我们下载的是 object 和 pose medium 大小的 safetensors 格式的模型文件，我们需要把它们拷贝到当前项目的根目录下。像下面这样：</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#E06C75;">ls</span><span style="color:#ABB2BF;"> -</span><span style="color:#E06C75;">lh</span></span>
<span class="line"><span style="color:#E06C75;">total</span><span style="color:#ABB2BF;"> 101M</span></span>
<span class="line"><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">rwxr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">xr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#ABB2BF;"> 150K </span><span style="color:#E5C07B;">Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 14</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">58</span><span style="color:#E5C07B;"> Cargo</span><span style="color:#ABB2BF;">.lock</span></span>
<span class="line"><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">rwxr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">xr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#D19A66;">  615</span><span style="color:#E5C07B;"> Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 14</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">58</span><span style="color:#E5C07B;"> Cargo</span><span style="color:#ABB2BF;">.toml</span></span>
<span class="line"><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">rwxr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">xr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#D19A66;"> 1.</span><span style="color:#ABB2BF;">1K </span><span style="color:#E5C07B;">Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 14</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">58</span><span style="color:#D19A66;"> LICENSE</span></span>
<span class="line"><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">rwxr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">xr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#D19A66;">  747</span><span style="color:#E5C07B;"> Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 18</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">29</span><span style="color:#D19A66;"> README</span><span style="color:#ABB2BF;">.md</span></span>
<span class="line"><span style="color:#E06C75;">drwxr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">xr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#D19A66;"> 2</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#D19A66;"> 4.</span><span style="color:#ABB2BF;">0K </span><span style="color:#E5C07B;">Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 18</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">27</span><span style="color:#E06C75;"> assets</span></span>
<span class="line"><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">rwxr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">xr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#D19A66;">   71</span><span style="color:#E5C07B;"> Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 14</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">58</span><span style="color:#E06C75;"> build</span><span style="color:#ABB2BF;">.rs</span></span>
<span class="line"><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">rwxr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">xr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#D19A66;"> 1</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#ABB2BF;"> 168K </span><span style="color:#E5C07B;">Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 14</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">58</span><span style="color:#E06C75;"> football</span><span style="color:#ABB2BF;">.jpg</span></span>
<span class="line"><span style="color:#E06C75;">drwxr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">xr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#D19A66;"> 3</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#D19A66;"> 4.</span><span style="color:#ABB2BF;">0K </span><span style="color:#E5C07B;">Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 14</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">58</span><span style="color:#E06C75;"> src</span></span>
<span class="line"><span style="color:#E06C75;">drwxr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">xr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#D19A66;"> 4</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#D19A66;"> 4.</span><span style="color:#ABB2BF;">0K </span><span style="color:#E5C07B;">Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 15</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">03</span><span style="color:#E06C75;"> target</span></span>
<span class="line"><span style="color:#E06C75;">drwxr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">xr</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">x</span><span style="color:#D19A66;"> 2</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#D19A66;"> 4.</span><span style="color:#ABB2BF;">0K </span><span style="color:#E5C07B;">Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 14</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">58</span><span style="color:#E06C75;"> ui</span></span>
<span class="line"><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">rw</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">--</span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">-- </span><span style="color:#D19A66;">1</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#ABB2BF;">  51M </span><span style="color:#E5C07B;">Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 17</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">45</span><span style="color:#E06C75;"> yolov8m</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">pose</span><span style="color:#ABB2BF;">.safetensors</span></span>
<span class="line"><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">rw</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">--</span><span style="color:#E06C75;">r</span><span style="color:#ABB2BF;">-- </span><span style="color:#D19A66;">1</span><span style="color:#E06C75;"> mike</span><span style="color:#E06C75;"> mike</span><span style="color:#ABB2BF;">  50M </span><span style="color:#E5C07B;">Dec</span><span style="color:#D19A66;">  9</span><span style="color:#D19A66;"> 17</span><span style="color:#ABB2BF;">:</span><span style="color:#D19A66;">45</span><span style="color:#E06C75;"> yolov8m</span><span style="color:#ABB2BF;">.safetensors</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>下面我们就开始动手写代码吧！</p><h2 id="代码实现和解析" tabindex="-1">代码实现和解析 <a class="header-anchor" href="#代码实现和解析" aria-label="Permalink to &quot;代码实现和解析&quot;">​</a></h2><p>有了前面几讲的经验，我们应该能比较轻松地完成这次任务。</p><h3 id="界面文件" tabindex="-1">界面文件 <a class="header-anchor" href="#界面文件" aria-label="Permalink to &quot;界面文件&quot;">​</a></h3><p>我们先来看一下界面描述文件 ui/appwindow.slint 内容。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">Button</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">VerticalBox</span><span style="color:#ABB2BF;"> , </span><span style="color:#E5C07B;">HorizontalBox</span><span style="color:#ABB2BF;">} </span><span style="color:#E06C75;">from</span><span style="color:#98C379;"> &quot;std-widgets.slint&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">export</span><span style="color:#E06C75;"> component</span><span style="color:#E5C07B;"> AppWindow</span><span style="color:#E06C75;"> inherits</span><span style="color:#E5C07B;"> Window</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    width</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">900px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    height</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">480px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    in</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">out</span><span style="color:#E06C75;"> property</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">orig</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    in</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">out</span><span style="color:#E06C75;"> property</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">orig</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    in</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">out</span><span style="color:#E06C75;"> property</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">generated</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    callback</span><span style="color:#E06C75;"> select</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">orig</span><span style="color:#ABB2BF;">-</span><span style="color:#61AFEF;">pic</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    callback</span><span style="color:#E06C75;"> probe</span><span style="color:#ABB2BF;">-</span><span style="color:#61AFEF;">objects</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    callback</span><span style="color:#E06C75;"> probe</span><span style="color:#ABB2BF;">-</span><span style="color:#61AFEF;">poses</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    VerticalBox</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        width</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">%;</span></span>
<span class="line"><span style="color:#E06C75;">        vertical</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">stretch</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        Text</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            text</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Model Size: Medium&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        HorizontalBox</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            width</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">98</span><span style="color:#ABB2BF;">%;</span></span>
<span class="line"><span style="color:#E06C75;">            vertical</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">stretch</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            Image</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                width</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">49</span><span style="color:#ABB2BF;">%;</span></span>
<span class="line"><span style="color:#E06C75;">                source</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">.orig-</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            Rectangle</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                width</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">1px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                background</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">gray</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            Image</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                width</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">49</span><span style="color:#ABB2BF;">%;</span></span>
<span class="line"><span style="color:#E06C75;">                source</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">.generated-</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        HorizontalBox</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            alignment</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">start</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">            height</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">50px</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">            Button</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                text</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Select Picture..&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                clicked</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                    root</span><span style="color:#ABB2BF;">.select-</span><span style="color:#E06C75;">orig</span><span style="color:#ABB2BF;">-</span><span style="color:#61AFEF;">pic</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            Button</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                text</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Detect Objects&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                clicked</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                    root</span><span style="color:#ABB2BF;">.probe-</span><span style="color:#61AFEF;">objects</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            Button</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">                text</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Detect Poses&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">                clicked</span><span style="color:#ABB2BF;"> =&gt; {</span></span>
<span class="line"><span style="color:#E06C75;">                    root</span><span style="color:#ABB2BF;">.probe-</span><span style="color:#61AFEF;">poses</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>我们设计了三个顶层应用属性。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">    in</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">out</span><span style="color:#E06C75;"> property</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">orig</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    in</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">out</span><span style="color:#E06C75;"> property</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">string</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">orig</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    in</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">out</span><span style="color:#E06C75;"> property</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">generated</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">image</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意，orig-image 和 generated-image 类型是 image，是 slint 语言中的图像类型。orig-image-path 类型是 string，是 slint 语言中的字符串类型，它与 Rust 中的字符串类型可以通过下面的代码互相转换。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">slint</span><span style="color:#E06C75;"> string</span><span style="color:#ABB2BF;"> -&gt; </span><span style="color:#E5C07B;">Rust</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;">:  .</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E5C07B;">Rust</span><span style="color:#E5C07B;"> String</span><span style="color:#ABB2BF;"> -&gt; </span><span style="color:#E06C75;">slint</span><span style="color:#E06C75;"> string</span><span style="color:#ABB2BF;">:  .</span><span style="color:#61AFEF;">into</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>根据前面设计回调部分，我们对应地设计了三个回调函数。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">    callback</span><span style="color:#E06C75;"> select</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">orig</span><span style="color:#ABB2BF;">-</span><span style="color:#61AFEF;">pic</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    callback</span><span style="color:#E06C75;"> probe</span><span style="color:#ABB2BF;">-</span><span style="color:#61AFEF;">objects</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    callback</span><span style="color:#E06C75;"> probe</span><span style="color:#ABB2BF;">-</span><span style="color:#61AFEF;">poses</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后，你还要注意代码里 <strong>主体内容区的属性</strong>。我们使用 <code>vertical-stretch: 1;</code> 来让这个区域尽量填充，占领能够占领的最大区域，不留空白。然后我们使用 Image widget 来承载图片显示，并把它的 source 属性绑定到 root.orig-image 和 root.generated-image 上面。</p><p>然后下面的按钮区，我们使用 <code>alignment: start;</code> 将三个按钮左对齐，并给三个按钮的 clicked 回调写逻辑，调用到对应的顶层回调上面去。</p><p>这就是界面描述包含的内容。</p><h3 id="main-rs" tabindex="-1">main.rs <a class="header-anchor" href="#main-rs" aria-label="Permalink to &quot;main.rs&quot;">​</a></h3><p>接下来，我们看 main 文件内容。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">PathBuf</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">sync</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">mpsc</span><span style="color:#ABB2BF;">::channel};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> native_dialog</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">FileDialog</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">use</span><span style="color:#E5C07B;"> slint</span><span style="color:#ABB2BF;">::{</span><span style="color:#E5C07B;">Image</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Rgba8Pixel</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">SharedPixelBuffer</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">slint</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">include_modules!</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">mod</span><span style="color:#ABB2BF;"> yolov8engine;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">() -&gt; </span><span style="color:#E5C07B;">Result</span><span style="color:#ABB2BF;">&lt;(), </span><span style="color:#E06C75;">slint</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">PlatformError</span><span style="color:#ABB2BF;">&gt; {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ui</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> AppWindow</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">()?;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ui_handle</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_weak</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on_select_orig_pic</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">move</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> ui</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui_handle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> FileDialog</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">new</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">set_location</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;~&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">add_filter</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Pics&quot;</span><span style="color:#ABB2BF;">, &amp;[</span><span style="color:#98C379;">&quot;png&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;jpg&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;jpeg&quot;</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">show_open_single_file</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // if selected pic file</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Some</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> path</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">            ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_orig_image_path</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string_lossy</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">into</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">            ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_orig_image</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">load_image</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">sender</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">receiver</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> channel</span><span style="color:#ABB2BF;">::&lt;(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">)&gt;();</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> sender1</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sender</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> sender2</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sender</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ui_handle</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_weak</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> _thread</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">thread</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">spawn</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">move</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        loop</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#E06C75;"> ui_handle</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui_handle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clone</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">task</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">img_path</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> receiver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">recv</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#E06C75;"> task</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_str</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;_exit_&quot;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // end of this thread</span></span>
<span class="line"><span style="color:#C678DD;">                return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            let</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">task</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">model</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> if</span><span style="color:#E06C75;"> task</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_str</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">==</span><span style="color:#98C379;"> &quot;detect&quot;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                (</span></span>
<span class="line"><span style="color:#E5C07B;">                    yolov8engine</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">YoloTask</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Detect</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                    Some</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;yolov8m.safetensors&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">()),</span></span>
<span class="line"><span style="color:#ABB2BF;">                )</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                (</span></span>
<span class="line"><span style="color:#E5C07B;">                    yolov8engine</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">YoloTask</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Pose</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">                    Some</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;yolov8m-pose.safetensors&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">()),</span></span>
<span class="line"><span style="color:#ABB2BF;">                )</span></span>
<span class="line"><span style="color:#ABB2BF;">            };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            if</span><span style="color:#C678DD;"> let</span><span style="color:#E5C07B;"> Ok</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> yolov8engine</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">start_engine</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">task</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">model</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">img_path</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E06C75;">                _</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> slint</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">invoke_from_event_loop</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">move</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">                    let</span><span style="color:#E06C75;"> ui</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui_handle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">                    ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_generated_image</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">load_image</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">PathBuf</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#ABB2BF;">                });</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ui_handle</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_weak</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on_probe_objects</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">move</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> ui</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui_handle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> img_path</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_orig_image_path</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">img_path</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sender</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&quot;detect&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">img_path</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> ui_handle</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_weak</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">on_probe_poses</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">move</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> ui</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui_handle</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        let</span><span style="color:#E06C75;"> img_path</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get_orig_image_path</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">        println!</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">img_path</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">        _</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> sender1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&quot;pose&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">(), </span><span style="color:#E06C75;">img_path</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">window</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">on_close_requested</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">move</span><span style="color:#56B6C2;"> ||</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        sender2</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">((</span><span style="color:#98C379;">&quot;_exit_&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">(), </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">()))</span></span>
<span class="line"><span style="color:#ABB2BF;">            .</span><span style="color:#61AFEF;">unwrap</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        slint</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">CloseRequestResponse</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">HideWindow</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">fn</span><span style="color:#61AFEF;"> load_image</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">std</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">path</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">PathBuf</span><span style="color:#ABB2BF;">) -&gt; </span><span style="color:#E5C07B;">slint</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">Image</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#C678DD;"> mut</span><span style="color:#E06C75;"> a_image</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> image</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">open</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">expect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Error loading image&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">into_rgba8</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    image</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">imageops</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">colorops</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">brighten_in_place</span><span style="color:#ABB2BF;">(&amp;</span><span style="color:#C678DD;">mut</span><span style="color:#E06C75;"> a_image</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> buffer</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> SharedPixelBuffer</span><span style="color:#ABB2BF;">::&lt;</span><span style="color:#E5C07B;">Rgba8Pixel</span><span style="color:#ABB2BF;">&gt;::</span><span style="color:#61AFEF;">clone_from_slice</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#E06C75;">        a_image</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">as_raw</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">        a_image</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">width</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E06C75;">        a_image</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">height</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> image</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Image</span><span style="color:#ABB2BF;">::</span><span style="color:#61AFEF;">from_rgba8</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">buffer</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    image</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br></div></div><p>main 文件整体结构和上一讲差不多。这里我重点讲一下不同的地方。Slint 里没有现成的文件选择组件，因此我们使用了 native_dialog 这个 crate，它是一个跨平台的文件选择组件。FileDialog 这一段返回后的 path 是一个 <code>Option&lt;PathBuf&gt;</code>。如果选择了文件，就会是 <code>Some(path)</code>，如果没有选择文件，比如打开了文件选择框，但是又点击了取消按钮或者关闭按钮，就返回 None。</p><p>选择图片文件后，用这种 <code>set_* API</code> 把返回的完整路径填充到应用的顶层属性 orig-image-path 和 orig-image 上去。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#E06C75;">            ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_orig_image_path</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">to_string_lossy</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">to_string</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">into</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E06C75;">            ui</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set_orig_image</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">load_image</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>load_image 会把文件从磁盘里读出来，转换成 Slint 的 image 类型。</p><p>后台任务和 channel 架构也和上节课差不多，我就不赘述了。注意这里使用了模式匹配语法来析构元组消息内容。</p><p><code>yolov8engine::start_engine(task, model, img_path)</code> 是 YOLOv8 任务的执行器，分别传入任务类型 task、模型名字 model 和原始图片地址 img_path 三个参数，并返回处理后的图片路径 path。然后调用 <code>slint::invoke_from_event_loop()</code> 来更新 UI 界面。</p><p>注意，由于我们的主要逻辑是在后台任务中处理的，不能直接在后台任务中更新 UI 界面，必须使用 <code>slint::invoke_from_event_loop()</code> 把更新界面的逻辑包起来。在 slint 内部，它还是通过一个 channel queue 把里面的相关值发送到主 UI 线程来处理。看起来整个过程是自动的，如果不加这个函数，而是直接调用 UI 对象指针，会出现什么问题呢？</p><p>没错，所有权问题！这可以看成是 Rust 的所有权系统在 GUI 领域的一次实践和验证，它可以在编译期间帮助我们发现和阻绝界面更新上的竞争问题。</p><p>这里，你可以想象一下，如果不创建后台任务，而是直接把业务逻辑写在回调函数里会怎样？也就是放在 <code>on_probe_objects()</code> 和 <code>on_probe_poses()</code> 中，你可以试一下。这里我分享一下我试验的结果：对于长时间执行的任务，Slint 框架会主动把这些任务 kill 掉，以免对界面操作造成卡顿。</p><h3 id="改造-yolov8-示例" tabindex="-1">改造 YOLOv8 示例 <a class="header-anchor" href="#改造-yolov8-示例" aria-label="Permalink to &quot;改造 YOLOv8 示例&quot;">​</a></h3><p>剩下的主要工作就是看 <code>yolov8engine::start_engine(task, model, img_path)</code> 是怎么实现的了。</p><p>我们在 <a href="https://time.geekbang.org/column/article/734943" target="_blank" rel="noreferrer">第 24 讲</a> 实现的 YOLOv8 的工具是一个命令行界面工具，使用 clap 实现。为了能够整合进现在这个 GUI 程序，我们首先应该对它的 Args 类型进行转换，转换成普通的结构体，结构体的字段一部分固定下来，一部分从 UI 界面传进来。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#C678DD;">    let</span><span style="color:#E06C75;"> args</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Args</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        cpu</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        tracing</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        model</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        which</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">Which</span><span style="color:#ABB2BF;">::</span><span style="color:#E5C07B;">M</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        images</span><span style="color:#ABB2BF;">: </span><span style="color:#61AFEF;">vec!</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">img_path</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#E06C75;">        confidence_threshold</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0.25</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        nms_threshold</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0.45</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        task</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        legend_size</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">14</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果你想让所有参数都可定制，完全可以在界面上做得更复杂，让这些参数可以通过界面上的控件来调整数值。</p><p>然后，我们再看一下模块的目录组织结构。</p><div class="language-rust line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">$ </span><span style="color:#E06C75;">tree</span><span style="color:#E06C75;"> src</span><span style="color:#ABB2BF;">/</span></span>
<span class="line"><span style="color:#E06C75;">src</span><span style="color:#ABB2BF;">/</span></span>
<span class="line"><span style="color:#ABB2BF;">├── </span><span style="color:#E06C75;">main</span><span style="color:#ABB2BF;">.rs</span></span>
<span class="line"><span style="color:#ABB2BF;">└── </span><span style="color:#E06C75;">yolov8engine</span></span>
<span class="line"><span style="color:#ABB2BF;">    ├── </span><span style="color:#E06C75;">coco_classes</span><span style="color:#ABB2BF;">.rs</span></span>
<span class="line"><span style="color:#ABB2BF;">    ├── </span><span style="color:#C678DD;">mod</span><span style="color:#ABB2BF;">.rs</span></span>
<span class="line"><span style="color:#ABB2BF;">    ├── </span><span style="color:#E06C75;">model</span><span style="color:#ABB2BF;">.rs</span></span>
<span class="line"><span style="color:#ABB2BF;">    └── </span><span style="color:#E06C75;">roboto</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">mono</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">stripped</span><span style="color:#ABB2BF;">.ttf</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">1</span><span style="color:#E06C75;"> directory</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#E06C75;"> files</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>你会发现我们使用的是 2015 edition 的风格。这样做不丢人，很多人喜欢这种目录组织风格。这种风格还有一个好处是可以把第 24 讲的 src 代码直接拷贝进来，重命名成 yolov8engine，然后把里面的 main.rs 重命名成 mod.rs。整个代码的结构就重构完成了。</p><p>然后把 mod.rs 里面的 <code>fn main()</code> 函数改成 <code>start_engine(task, model, img_path)</code> 即可，这样整个代码结构也改造完成了，剩下的就是要处理一下函数参数的输入和返回值的类型。</p><p>在第 24 讲的代码中， <code>run()</code> 函数没有把生成的新图片的 path 返回回来，我们将其返回回来，并进一步通过 <code>start_engine()</code> 函数的返回值返回给这个 GUI 程序的 <code>main()</code> 函数。然后整个业务就完成了。</p><p>我把完成代码整理到 <a href="https://github.com/miketang84/jikeshijian/tree/master/26-slint-yolov8-demo" target="_blank" rel="noreferrer">这个地址</a> 了，你可以下载下来，按照说明运行一下看看效果，也可以基于这个代码随意改改，实现你的任何想法。</p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p><img src="`+y+'" alt=""></p><p>这节课我们使用 Slint GUI 框架为 YOLOv8 对象和姿势引擎实现了一个图形化界面。有了这个 GUI 工具，任何人都可以来体验 Rust 的图像识别能力了。相比于命令行界面，我们将用户群体扩大到了普通用户。</p><p>Rust 应用的分发也很简单，将编译后的文件拷贝到另一台电脑上就可以运行了，只需要针对不同的平台分别编译不同的目标格式可执行文件。它不像 Python 实现的对象和姿势识别工具需要先安装一大堆依赖。</p><p>我们花了两节课的时间来熟悉使用 Slint GUI 框架。它是 Rust 社区冉冉升起的一个明星框架，目前虽然说不上成熟，但是胜在 <strong>小巧、灵活，可定制性很强</strong>。如果它缺失一些控件什么的，你也可以自己实现。</p><p>我们这两节课与第 23、24 讲结合在一起，做了两组 Rust 的 AI 工具。 <strong>AI 时代刚刚来临，Rust 在 AI 领域有着巨大的潜力和机会。</strong> AI 本身覆盖面非常广，比如学术研究、算法实现、训练、推理、部署、云端计算、单机版模型、集群应用、工业应用、行业工具、终端设备、用户界面等等。未来使用 Rust 作为工具，也是一个相当好的切入点。</p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>这节课的代码实现有一个性能上的问题，就是每次点击 Detect Objects 或 Detect Poses 的时候，实际上都重复加载了模型，你想一想如何优化这个点？欢迎你把你的想法和优化代码分享到评论区，如果你觉得对你有帮助的话，也欢迎你把这节课的内容分享给其他朋友，我们下节课再见！</p>',75)]))}const g=n(i,[["render",F]]);export{d as __pageData,g as default};
